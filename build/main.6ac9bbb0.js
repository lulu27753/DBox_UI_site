(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,function(e,n){e.exports=React},,,,,,,,,,function(e,n){e.exports=ReactDOM},,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Color=n.PrevPage=n.Version=n.Typography=n.Upload=n.TreeSelect=n.Transfer=n.Tree=n.Tooltip=n.Title=n.Timeline=n.TimePicker=n.Tag=n.Tabs=n.Table=n.Switch=n.Steps=n.Spin=n.Slider=n.Select=n.Radio=n.Progress=n.Popover=n.Popconfirm=n.Pagination=n.Notification=n.Modal=n.Message=n.Menu=n.List=n.Layout=n.InputNumber=n.Input=n.Icon=n.Col=n.Row=n.Form=n.Drawer=n.Dropdown=n.Divider=n.DatePicker=n.Collapse=n.Checkbox=n.Cascader=n.Card=n.Calendar=n.Button=n.Breadcrumb=n.Badge=n.BackTop=n.Anchor=n.Avatar=n.AutoComplete=n.Alert=n.Affix=void 0;var a=oe(t(171)),o=oe(t(241)),l=oe(t(242)),i=oe(t(243)),r=oe(t(877)),s=oe(t(247)),u=oe(t(248)),d=oe(t(249)),c=oe(t(59)),p=oe(t(250)),f=oe(t(909)),m=oe(t(379)),h=oe(t(85)),v=oe(t(380)),g=oe(t(381)),y=oe(t(383)),b=oe(t(176)),C=oe(t(385)),k=oe(t(386)),x=oe(t(398)),w=oe(t(397)),S=oe(t(21)),I=oe(t(96)),T=oe(t(399)),P=oe(t(400)),M=oe(t(1047)),R=oe(t(129)),_=oe(t(401)),N=oe(t(403)),B=oe(t(1082)),E=oe(t(128)),D=oe(t(404)),O=oe(t(405)),F=oe(t(555)),L=oe(t(130)),j=oe(t(83)),A=oe(t(408)),V=oe(t(127)),z=oe(t(411)),K=oe(t(412)),$=oe(t(413)),H=oe(t(120)),q=oe(t(124)),G=oe(t(420)),W=oe(t(188)),U=oe(t(1205)),Y=oe(t(69)),J=oe(t(421)),X=oe(t(422)),Q=oe(t(423)),Z=oe(t(424)),ee=oe(t(425)),ne=oe(t(1240)),te=oe(t(426)),ae=oe(t(1250));function oe(e){return e&&e.__esModule?e:{default:e}}n.Affix=a.default,n.Alert=o.default,n.AutoComplete=i.default,n.Avatar=r.default,n.Anchor=l.default,n.BackTop=s.default,n.Badge=u.default,n.Breadcrumb=d.default,n.Button=c.default,n.Calendar=p.default,n.Card=f.default,n.Cascader=m.default,n.Checkbox=h.default,n.Collapse=v.default,n.DatePicker=g.default,n.Divider=y.default,n.Dropdown=b.default,n.Drawer=C.default,n.Form=k.default,n.Row=w.default,n.Col=x.default,n.Icon=S.default,n.Input=I.default,n.InputNumber=T.default,n.Layout=P.default,n.List=M.default,n.Menu=R.default,n.Message=_.default,n.Modal=N.default,n.Notification=B.default,n.Pagination=E.default,n.Popconfirm=D.default,n.Popover=O.default,n.Progress=F.default,n.Radio=L.default,n.Select=j.default,n.Slider=A.default,n.Spin=V.default,n.Steps=z.default,n.Switch=K.default,n.Table=$.default,n.Tabs=H.default,n.Tag=q.default,n.TimePicker=G.default,n.Timeline=W.default,n.Title=U.default,n.Tooltip=Y.default,n.Tree=J.default,n.Transfer=X.default,n.TreeSelect=Q.default,n.Upload=Z.default,n.Typography=ee.default,n.Version=ne.default,n.PrevPage=ae.default,n.Color=te.default},,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(2)),o=i(t(13)),l=i(t(1));function i(e){return e&&e.__esModule?e:{default:e}}t(838),n.default=function(e){var n=e.type,t=e.className,i=void 0===t?"":t,r=(0,o.default)(e,["type","className"]);return i+=" idoll-icon idoll-icon-"+n,l.default.createElement("i",(0,a.default)({className:i.trim()},r))}},function(e,n,t){},,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Row=n.Col=void 0;var a=l(t(398)),o=l(t(397));function l(e){return e&&e.__esModule?e:{default:e}}var i={Col:a.default,Row:o.default};n.Col=a.default,n.Row=o.default,n.default=i},,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ButtonGroup=void 0;var a=l(t(817)),o=l(t(840));function l(e){return e&&e.__esModule?e:{default:e}}a.default.Group=o.default,n.ButtonGroup=o.default,n.default=a.default},,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1058),l=(a=o)&&a.__esModule?a:{default:a};t(1061),n.default=l.default},,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(866),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";t(874)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.CheckboxGroup=void 0;var a=l(t(515)),o=l(t(944));function l(e){return e&&e.__esModule?e:{default:e}}a.default.CheckboxGroup=o.default,n.CheckboxGroup=o.default,n.default=a.default},,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(868)),o=r(t(869)),l=r(t(875)),i=r(t(245));function r(e){return e&&e.__esModule?e:{default:e}}i.default.Group=a.default,i.default.Textarea=o.default,i.default.Search=l.default,n.default=i.default},,,function(e,n,t){"use strict";t(1244)},,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(117)),o=c(t(12)),l=c(t(5)),i=c(t(7)),r=c(t(3)),s=c(t(6)),u=c(t(1)),d=c(t(0));function c(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function n(){return(0,l.default)(this,n),(0,r.default)(this,(n.__proto__||(0,o.default)(n)).apply(this,arguments))}return(0,s.default)(n,e),(0,i.default)(n,[{key:"getLocale",value:function(){var e=this.props,n=e.componentName,t=e.defaultLocale,o=this.context.idollLocale,l=o&&o[n],i=null,r=null;return"function"==typeof t?(i=t(),r=l||{}):(i=t,r=l||{}),(0,a.default)(i,r)}},{key:"getLocaleCode",value:function(){var e=this.context.idollLocale;return e&&e.locale}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode())}}]),n}(u.default.Component);p.propTypes={componentName:d.default.string,defaultLocale:d.default.oneOfType([d.default.object,d.default.func]),children:d.default.func},p.contextTypes={idollLocale:d.default.object},n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return e.default||e}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ReactDOM=n.TabPane=void 0;var a=l(t(911)),o=l(t(11));function l(e){return e&&e.__esModule?e:{default:e}}var i=a.default.TabPane;n.TabPane=i,n.ReactDOM=o.default,n.default=a.default},,,function(e,n,t){"use strict";t(22),t(943)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.TagGroup=void 0;var a=l(t(532)),o=l(t(972));function l(e){return e&&e.__esModule?e:{default:e}}n.TagGroup=o.default,n.default=a.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(54),l=(a=o)&&a.__esModule?a:{default:a};var i={};n.default=function(e,n){e||i[n]||((0,l.default)(!1,n),i[n]=!0)}},function(e,n,t){"use strict";t(1042)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1049),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.MiniSelect=void 0;var a=l(t(1050)),o=l(t(542));function l(e){return e&&e.__esModule?e:{default:e}}n.MiniSelect=o.default,n.default=a.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SubMenu=n.MenuItem=void 0;var a=i(t(1057)),o=i(t(547)),l=i(t(548));function i(e){return e&&e.__esModule?e:{default:e}}n.MenuItem=o.default,n.SubMenu=l.default,n.default=a.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.RadioGroup=n.RadioButton=void 0;var a=i(t(407)),o=i(t(1092)),l=i(t(1093));function i(e){return e&&e.__esModule?e:{default:e}}a.default.RadioButton=l.default,a.default.RadioGroup=o.default,n.RadioButton=l.default,n.RadioGroup=o.default,n.default=a.default},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(843),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,function(e,n,t){"use strict";t(867)},,function(e,n,t){"use strict";t(22)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SubMenu=n.MenuItem=n.Menu=n.DropdownNormal=n.DropdownButton=void 0;var a=s(t(384)),o=s(t(978)),l=s(t(979)),i=t(40),r=s(i);function s(e){return e&&e.__esModule?e:{default:e}}a.default.DropdownButton=o.default,a.default.DropdownNormal=l.default,n.DropdownButton=o.default,n.DropdownNormal=l.default,n.Menu=r.default,n.MenuItem=i.MenuItem,n.SubMenu=i.SubMenu,n.default=a.default},,,,,,function(e,n,t){"use strict";t(1035)},,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=l(t(1202)),o=l(t(578));function l(e){return e&&e.__esModule?e:{default:e}}a.default.Item=o.default,n.default=a.default},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";t(22),t(839)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if("undefined"==typeof window)return 0;var t=n?"pageYOffset":"pageXOffset",a=n?"scrollTop":"scrollLeft",o=e===window,l=o?e[t]:e[a];o&&"number"!=typeof l&&(l=window.document.documentElement[a]);return l}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(848),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AnchorLinkProps=n.AnchorProps=void 0;var a=t(853);Object.defineProperty(n,"AnchorProps",{enumerable:!0,get:function(){return a.AnchorProps}});var o=t(502);Object.defineProperty(n,"AnchorLinkProps",{enumerable:!0,get:function(){return o.AnchorLinkProps}});var l=r(a),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}l.default.link=i.default,n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(857),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=t(1),c=v(d),p=v(t(8)),f=t(0),m=v(t(174)),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(84);var g=function(e){function n(){(0,i.default)(this,n);var e=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this));return e.handleKeyDown=function(n){var t=e.props,a=t.onPressEnter,o=t.onKeyDown;13===n.keyCode&&a(n),o&&o(n)},e.saveInput=function(n){e.input=n},e.onClear=function(){e.input.value="",e.setState({isHover:!1})},e.renderLaybeldIcon=function(n){var t,a=e.props;if(!("prefix"in a||"suffix"in a||"clearable"in a))return n;var l=a.prefix?c.default.createElement("span",{className:a.prefixCls+"-prefix"},a.prefix):null,i=c.default.createElement(h.default,{type:"close-circle",className:a.prefixCls+"-picker-clear"}),r=c.default.cloneElement(i,{onClick:e.onClear,className:"icon-hover"}),s=c.default.createElement("span",{className:a.prefixCls+"-clear-icon"},r),u=c.default.createElement("span",{style:{display:"none"},className:a.prefixCls+"-clear-icon"},r),d=c.default.createElement("span",{style:{display:a.suffix||a.clearable?"block":"none"},className:a.prefixCls+"-suffix"},e.input&&e.input.value&&e.state.isHover&&!e.props.disabled&&!e.props.readOnly?s:u,a.suffix),f=(0,p.default)(a.className,a.prefixCls+"-affix-wrapper",(t={},(0,o.default)(t,a.prefixCls+"-affix-wrapper-sm","small"===a.size),(0,o.default)(t,a.prefixCls+"-affix-wrapper-lg","large"===a.size),t));return c.default.createElement("span",{className:f,style:a.style},l,c.default.cloneElement(n,{style:null,className:e.getInputClassName()}),d)},e.onMouseEnter=function(n){e.setState({isHover:!0})},e.onInput=function(n){e.setState({isHover:!0})},e.onBlur=function(n){e.setState({isHover:!1})},e.state={isHover:!1},e}return(0,u.default)(n,e),(0,r.default)(n,[{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"getInputClassName",value:function(){var e,n,t=this.props,a=t.prefixCls,l=t.size,i=t.disabled,r=t.readOnly;return(0,p.default)(a,(e={},(0,o.default)(e,a+"-sm","small"===l),(0,o.default)(e,a+"-lg","large"===l),(0,o.default)(e,a+"-disabled",i),(0,o.default)(e,a+"-readOnly",r),e),(n={},(0,o.default)(n,a+"-enter-button",!0),(0,o.default)(n,a+"-"+l,!0),n))}},{key:"renderLabelInput",value:function(e){var n,t=this.props;if(!t.addonBefore&&!t.addonAfter)return e;var a=t.prefixCls+"-group",l=a+"-addon",i=t.addonBefore?t.beforelength?c.default.createElement("span",{className:l,style:{width:t.beforelength}},t.addonBefore):c.default.createElement("span",{className:l},t.addonBefore):null,r=t.addonAfter?t.afterlength?c.default.createElement("span",{className:l,style:{width:t.afterlength}},t.addonAfter):c.default.createElement("span",{className:l},t.addonAfter):null,s=(0,p.default)(t.prefixCls+"-wrapper",(0,o.default)({},a,i||r)),u=(0,p.default)((n={},(0,o.default)(n,t.prefixCls+"-group-wrapper-sm","small"===t.size),(0,o.default)(n,t.prefixCls+"-group-wrapper-lg","large"===t.size),n));return i||r?c.default.createElement("span",{className:u,style:t.style},c.default.createElement("span",{className:s},i,c.default.cloneElement(e,{style:null}),r)):c.default.createElement("span",{className:s},i,e,r)}},{key:"renderInput",value:function(){var e=this.props,n=e.value,t=e.className,o=(0,m.default)(this.props,["prefixCls","onPressEnter","addonBefore","addonAfter","prefix","suffix"]);return"value"in this.props&&(o.value=function(e){return null==e?"":e}(n),delete o.defaultValue),this.renderLaybeldIcon(c.default.createElement("input",(0,a.default)({},o,{className:(0,p.default)(this.getInputClassName(),t),onKeyDown:this.handleKeyDown,ref:this.saveInput,onMouseEnter:this.onMouseEnter,onInput:this.onInput,onBlur:this.onBlur})))}},{key:"render",value:function(){return this.renderLabelInput(this.renderInput())}}]),n}(d.Component);g.defaultProps={disabled:!1,prefixCls:"idoll-input",type:"text",onPressEnter:function(){},onKeyDown:function(){},onChange:function(){}},g.propTypes={type:f.PropTypes.string,id:f.PropTypes.oneOfType([f.PropTypes.string,f.PropTypes.number]),size:f.PropTypes.oneOf(["small","default","large"]),disabled:f.PropTypes.bool,value:f.PropTypes.any,defaultValue:f.PropTypes.any,className:f.PropTypes.string,addonBefore:f.PropTypes.node,addonAfter:f.PropTypes.node,prefixCls:f.PropTypes.string,prefix:f.PropTypes.node,suffix:f.PropTypes.node,onPressEnter:f.PropTypes.func,onKeyDown:f.PropTypes.func,onChange:f.PropTypes.func,beforelength:f.PropTypes.string,afterlength:f.PropTypes.string,clearable:f.PropTypes.bool},n.default=g},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(9)),l=g(t(13)),i=g(t(12)),r=g(t(5)),s=g(t(7)),u=g(t(3)),d=g(t(6)),c=v(t(1)),p=v(t(11)),f=g(t(0)),m=g(t(8)),h=g(t(21));function v(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function g(e){return e&&e.__esModule?e:{default:e}}t(878);var y=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));return t.setScale=function(){var e=t.avatarChildren;if(e){var n=e.offsetWidth,a=p.findDOMNode(t).getBoundingClientRect().width;a-8<n?t.setState({scale:(a-8)/n}):t.setState({scale:1})}},t.handleImgLoadError=function(){return t.setState({isImgExist:!1})},t.state={scale:1,isImgExist:!0},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentDidMount",value:function(){this.setScale()}},{key:"componentDidUpdate",value:function(e,n){(e.children!==this.props.children||n.scale!==this.state.scale&&1===this.state.scale)&&this.setScale()}},{key:"avatarChildren",value:function(){return c.createElement("span",null)}},{key:"render",value:function(){var e,n,t=this,i=this.props,r=i.prefixCls,s=i.shape,u=i.size,d=i.src,p=i.icon,f=i.alt,v=i.className,g=(0,l.default)(i,["prefixCls","shape","size","src","icon","alt","className"]),y=(0,m.default)((e={},(0,o.default)(e,r+"-lg","large"===u),(0,o.default)(e,r+"-sm","small"===u),(0,o.default)(e,r+"-ti","tiny"===u),e)),b=(0,m.default)(r,v,y,(n={},(0,o.default)(n,r+"-"+s,s),(0,o.default)(n,r+"-image",d&&this.state.isImgExist),(0,o.default)(n,r+"-icon",p),n)),C=this.props.children;if(d)C=c.createElement("img",{src:d,onError:this.handleImgLoadError,alt:f});else if(p)C=c.createElement(h.default,{type:p});else{var k=this.avatarChildren;if(k||1!==this.state.scale){var x={msTransform:"scale("+this.state.scale+")",WebkitTransform:"scale("+this.state.scale+")",transform:"scale("+this.state.scale+")",position:"absolute",display:"inline-block",top:"calc(50% - "+Math.round(k.offsetHeight/2)+"px)",left:"calc(50% - "+Math.round(k.offsetWidth/2)+"px)"};C=c.createElement("span",{className:r+"-string",style:x,ref:function(e){t.avatarChildren=e}},C)}}return c.createElement("span",(0,a.default)({},g,{className:b}),C)}}]),n}(c.Component);y.PropType={scale:f.default.number,prefixCls:f.default.string,shape:f.default.string,className:f.default.string,children:f.default.node,icon:f.default.string,size:f.default.string,src:f.default.string},y.defaultProps={prefixCls:"dbox-avatar",size:"default",shape:"cirecle"},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(880),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(883),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BreadcrumbItem=n.BreadcrumbItemProps=n.BreadcrumbProps=void 0;var a=t(888);Object.defineProperty(n,"BreadcrumbProps",{enumerable:!0,get:function(){return a.BreadcrumbProps}});var o=t(504);Object.defineProperty(n,"BreadcrumbItemProps",{enumerable:!0,get:function(){return o.BreadcrumbItemProps}});var l=r(a),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}l.default.Item=i.default,n.default=l.default,n.BreadcrumbItem=i.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(891),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(2)),o=i(t(905)),l=i(t(377));function i(e){return e&&e.__esModule?e:{default:e}}var r={lang:(0,a.default)({placeholder:"请选择日期",rangePlaceholder:["开始日期","结束日期"]},o.default),timePickerLocale:(0,a.default)({},l.default)};r.lang.ok="确定",n.default=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={placeholder:"请选择时间"}},function(e,n,t){"use strict";t(908),t(22)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(935),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(2)),o=m(t(9)),l=m(t(12)),i=m(t(5)),r=m(t(7)),s=m(t(3)),u=m(t(6)),d=m(t(1)),c=m(t(1359)),p=m(t(8)),f=m(t(521));function m(e){return e&&e.__esModule?e:{default:e}}t(948);var h=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,l=n.className,i=void 0===l?"":l,r=n.bordered,s=n.bgColor,u=(0,p.default)((e={},(0,o.default)(e,t+"-borderless",!r),(0,o.default)(e,t+"-bgColor",s),e),i);return d.default.createElement(c.default,(0,a.default)({},this.props,{className:u}))}}]),n}(d.default.Component);h.Panel=c.default.Panel,h.defaultProps={prefixCls:"idoll-collapse",bordered:!0,openAnimation:(0,a.default)({},f.default,{appear:function(){}})},n.default=h},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(117)),o=d(t(582)),l=d(t(522)),i=d(t(954)),r=d(t(957)),s=d(t(967)),u=d(t(973));function d(e){return e&&e.__esModule?e:{default:e}}t(530);var c=(0,r.default)((0,i.default)(o.default)),p=(0,r.default)((0,i.default)(l.default),"YYYY-MM");(0,a.default)(c,{RangePicker:(0,r.default)(s.default),MonthPicker:p,WeekPicker:(0,r.default)(u.default,"gggg-wo")}),n.default=c},,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(974),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(12)),o=c(t(5)),l=c(t(7)),i=c(t(3)),r=c(t(6)),s=c(t(1)),u=t(0),d=c(t(1363));function c(e){return e&&e.__esModule?e:{default:e}}t(533);var p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(d.default,this.props)}}]),n}(s.default.Component);p.defaultProps={transitionName:"slide-up",prefixCls:"idoll-dropdown",mouseEnterDelay:.15,mouseLeaveDelay:.1},p.propTypes={placement:u.PropTypes.string,trigger:u.PropTypes.array,overlay:u.PropTypes.any,disabled:u.PropTypes.bool,visible:u.PropTypes.bool,onVisibleChange:u.PropTypes.func,icon:u.PropTypes.string,block:u.PropTypes.bool},n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(980),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.FormItemProps=n.ValidationRule=n.ValidateCallback=n.FormCreateOption=n.FormComponentProps=n.FormProps=void 0;var a=t(983);Object.defineProperty(n,"FormProps",{enumerable:!0,get:function(){return a.FormProps}}),Object.defineProperty(n,"FormComponentProps",{enumerable:!0,get:function(){return a.FormComponentProps}}),Object.defineProperty(n,"FormCreateOption",{enumerable:!0,get:function(){return a.FormCreateOption}}),Object.defineProperty(n,"ValidateCallback",{enumerable:!0,get:function(){return a.ValidateCallback}}),Object.defineProperty(n,"ValidationRule",{enumerable:!0,get:function(){return a.ValidationRule}});var o=t(540);Object.defineProperty(n,"FormItemProps",{enumerable:!0,get:function(){return o.FormItemProps}});var l,i=(l=a)&&l.__esModule?l:{default:l};n.default=i.default},,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(13)),i=h(t(12)),r=h(t(5)),s=h(t(7)),u=h(t(3)),d=h(t(6)),c=t(1),p=h(c),f=h(t(0)),m=h(t(8));function h(e){return e&&e.__esModule?e:{default:e}}t(182);var v=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.className,i=n.gutter,r=n.style,s=n.children,u=n.type,d=n.justify,f=n.align,h=(0,l.default)(n,["className","gutter","style","children","type","justify","align"]),v=(0,m.default)((e={"idoll-row":!u},(0,o.default)(e,"idoll-row-"+u,u),(0,o.default)(e,"idoll-row-"+u+"-"+d,d),(0,o.default)(e,"idoll-row-"+u+"-"+f,f),(0,o.default)(e,t,!!t),e)),g=i>0?(0,a.default)({marginLeft:i/-2,marginRight:i/-2},r):r,y=c.Children.map(s,function(e){return e?e.props?(0,c.cloneElement)(e,{style:i>0?(0,a.default)({paddingLeft:i/2,paddingRight:i/2},e.props.style):e.props.style}):e:null});return p.default.createElement("div",(0,a.default)({},h,{className:v,style:g}),y)}}]),n}(p.default.Component);v.defulatProps={gutter:0},v.propTypes={type:f.default.string,align:f.default.string,justify:f.default.string,className:f.default.string,children:f.default.node,gutter:f.default.number,style:f.default.object},n.default=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(9)),o=d(t(2)),l=d(t(28)),i=d(t(13)),r=d(t(1)),s=d(t(0)),u=d(t(8));function d(e){return e&&e.__esModule?e:{default:e}}t(182);var c=s.default.oneOfType([s.default.string,s.default.number]),p=s.default.oneOfType([s.default.object,s.default.number]);function f(e){var n,t=e.span,s=e.order,d=e.offset,c=e.push,p=e.pull,f=e.className,m=e.children,h=(0,i.default)(e,["span","order","offset","push","pull","className","children"]),v={};["xs","sm","md","lg"].forEach(function(n){var t,i={};"number"==typeof e[n]?i.span=e[n]:"object"===(0,l.default)(e[n])&&(i=e[n]||{}),delete h[n],v=(0,o.default)((t={},(0,a.default)(t,"idoll-col-"+n+"-"+i.span,void 0!==i.span),(0,a.default)(t,"idoll-col-"+n+"-order-"+i.order,i.order),(0,a.default)(t,"idoll-col-"+n+"-offset-"+i.offset,i.offset),(0,a.default)(t,"idoll-col-"+n+"-push-"+i.push,i.push),(0,a.default)(t,"idoll-col-"+n+"-pull-"+i.pull,i.pull),t),v)});var g=(0,u.default)((0,o.default)((n={},(0,a.default)(n,"idoll-col-"+t,!!t),(0,a.default)(n,"idoll-col-order-"+s,s),(0,a.default)(n,"idoll-col-offset-"+d,d),(0,a.default)(n,"idoll-col-push-"+c,c),(0,a.default)(n,"idoll-col-pull-"+p,p),(0,a.default)(n,f,!!f),n),v));return r.default.createElement("div",(0,o.default)({},h,{className:g}),m)}f.propTypes={span:c,order:c,offset:c,push:c,pull:c,className:s.default.string,children:s.default.node,xs:p,sm:p,md:p,lg:p},n.default=f},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1038),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Footer=n.Content=n.Header=n.Sider=void 0;var a=s(t(1041)),o=s(t(1043)),l=s(t(1044)),i=s(t(1045)),r=s(t(1046));function s(e){return e&&e.__esModule?e:{default:e}}a.default.Sider=o.default,a.default.Header=l.default,a.default.Content=i.default,a.default.Footer=r.default,n.default=a.default,n.Sider=o.default,n.Header=l.default,n.Content=i.default,n.Footer=r.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1065),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(2)),o=i(t(554)),l=i(t(1080));function i(e){return e&&e.__esModule?e:{default:e}}o.default.info=function(e){var n=(0,a.default)({type:"info",iconType:"info-circle-o",okCancel:!1},e);return(0,l.default)(n)},o.default.success=function(e){var n=(0,a.default)({type:"success",iconType:"check-circle-o",okCancel:!1},e);return(0,l.default)(n)},o.default.error=function(e){var n=(0,a.default)({type:"error",iconType:"error-circle-o",okCancel:!1},e);return(0,l.default)(n)},o.default.warning=function(e){var n=(0,a.default)({type:"warning",iconType:"exclamation-circle",okCancel:!1},e);return(0,l.default)(n)},o.default.confirm=function(e){var n=(0,a.default)({type:"confirm",iconType:"exclamation-circle",okCancel:!0},e);return(0,l.default)(n)},n.default=o.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1086),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1087),l=(a=o)&&a.__esModule?a:{default:a};t(1088),n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=v(t(0)),p=v(t(1)),f=v(t(21)),m=t(1356),h=v(t(8));function v(e){return e&&e.__esModule?e:{default:e}}t(1090);var g={normal:"#13B886",exception:"#F44336",success:"#3CCB69"},y=function(e){return!e||e<0?0:e>100?100:e},b=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,i=n.className,r=n.percent,s=void 0===r?0:r,u=n.status,d=n.format,c=n.trailColor,v=n.size,b=n.successPercent,C=n.type,k=n.strokeWidth,x=n.width,w=n.showInfo,S=n.strokeColor,I=n.strokeLinecap,T=void 0===I?"round":I,P=(0,l.default)(n,["prefixCls","className","percent","status","format","trailColor","size","successPercent","type","strokeWidth","width","showInfo","strokeColor","strokeLinecap"]),M=parseInt(b?b.toString():s.toString(),10)>=100&&!("status"in n)?"success":u||"normal",R=void 0,_=void 0;if(w){var N=void 0,B="circle"===C?"":"-circle";d||"exception"!==M&&"success"!==M?N=(d||function(e){return e+"%"})(y(s),y(b)):"exception"===M?N=p.default.createElement(f.default,{type:"close"+B,theme:"line"===C?"filled":"outlined"}):"success"===M&&(N=p.default.createElement(f.default,{type:"check"+B,theme:"line"===C?"filled":"outlined"})),R=p.default.createElement("span",{className:t+"-text",title:"string"==typeof N?N:void 0},N)}if("line"===C){var E={width:y(s)+"%",height:k||("small"===v?4:8),background:S,borderRadius:"square"===T?0:"100px"},D={width:y(b)+"%",height:k||("small"===v?4:8),borderRadius:"square"===T?0:"100px"},O=void 0!==b?p.default.createElement("div",{className:"$(prefixCls)-success-bg",style:D}):null;_=p.default.createElement("div",null,p.default.createElement("div",{className:t+"-outer"},p.default.createElement("div",{className:t+"-inner"},p.default.createElement("div",{className:t+"-bg",style:E}),O)),R)}else if("circle"===C){var F=x||120,L={width:F,height:F,fontSize:.15*F+6},j=k||6;_=p.default.createElement("div",{className:t+"-inner",style:L},p.default.createElement(m.Circle,{percent:y(s),strokeWidth:j,trailWidth:j,strokeColor:S||g[M],strokeLinecap:T,trailColor:c,prefixCls:t}),R)}var A=(0,h.default)(t,(e={},(0,o.default)(e,t+"-"+("dashboard"===C?"circle":C),!0),(0,o.default)(e,t+"-status-"+M,!0),(0,o.default)(e,t+"-show-info",w),(0,o.default)(e,t+"-"+v,v),e),i);return p.default.createElement("div",(0,a.default)({},P,{className:A}),_)}}]),n}(p.default.Component);b.defaultProps={type:"line",percent:0,showInfo:!0,trailColor:"#f5f5f5",prefixCls:"idoll-progress",size:"default"},b.propTypes={status:c.default.oneOf(["normal","exception","active","success"]),type:c.default.oneOf(["line","circle"]),showInfo:c.default.bool,percent:c.default.number,width:c.default.number,strokeWidth:c.default.number,strokeLinecap:c.default.oneOf(["round","square"]),format:c.default.func,default:c.default.oneOf(["default","small"])},n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(9)),l=g(t(117)),i=g(t(13)),r=g(t(12)),s=g(t(5)),u=g(t(7)),d=g(t(3)),c=g(t(6)),p=g(t(1)),f=g(t(0)),m=g(t(585)),h=g(t(8)),v=g(t(34));function g(e){return e&&e.__esModule?e:{default:e}}t(378);var y=function(e){function n(){var e,t,a,o;(0,s.default)(this,n);for(var l=arguments.length,i=Array(l),u=0;u<l;u++)i[u]=arguments[u];return t=a=(0,d.default)(this,(e=n.__proto__||(0,r.default)(n)).call.apply(e,[this].concat(i))),a.saveCheckbox=function(e){a.rcCheckbox=e},o=t,(0,d.default)(a,o)}return(0,c.default)(n,e),(0,u.default)(n,[{key:"shouldComponentUpdate",value:function(e,n,t){return!(0,v.default)(this.props,e)||!(0,v.default)(this.state,n)||!(0,v.default)(this.context.radioGroup,t.radioGroup)}},{key:"focus",value:function(){this.rcCheckbox.focus()}},{key:"blur",value:function(){this.rcCheckbox.blur()}},{key:"render",value:function(){var e,n=this.props,t=this.context,r=n.prefixCls,s=n.className,u=n.children,d=n.style,c=(0,i.default)(n,["prefixCls","className","children","style"]),f=t.radioGroup,v=(0,l.default)({},c);f&&(v.name=f.name,v.onChange=f.onChange,v.checked=n.value===f.value,v.disabled=n.disabled||f.disabled);var g=(0,h.default)(s,(e={},(0,o.default)(e,r+"-wrapper",!0),(0,o.default)(e,r+"-wrapper-checked",v.checked),(0,o.default)(e,r+"-wrapper-disabled",v.disabled),(0,o.default)(e,r+"-wrapper-disabled-checked",v.disabled&&v.checked),e));return p.default.createElement("label",{className:g,style:d,onMouseEnter:n.onMouseEnter,onMouseLeave:n.onMouseLeave},p.default.createElement(m.default,(0,a.default)({},v,{prefixCls:r,ref:this.saveCheckbox})),void 0!==u?p.default.createElement("span",null,u):null)}}]),n}(p.default.Component);y.defaultProps={prefixCls:"idoll-radio",type:"radio"},y.contextTypes={radioGroup:f.default.any},y.propTypes={defaultChecked:f.default.bool,value:f.default.any,checked:f.default.bool},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1094),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1105),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1116),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1119),l=(a=o)&&a.__esModule?a:{default:a};t(1200),n.default=l.default},,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(529),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1209),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1212),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1226),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1231),l=(a=o)&&a.__esModule?a:{default:a};t(1234),n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(12)),o=p(t(5)),l=p(t(7)),i=p(t(3)),r=p(t(6)),s=p(t(1)),u=t(44);t(1236);var d=p(t(1238)),c=p(t(1239));function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"handelRender",value:function(e){var n=[];return e.map(function(e,t){n.push(s.default.createElement("dl",{key:t},s.default.createElement("dt",{className:"idoll-typography-subtitle"},e.name),s.default.createElement("dd",null,e.fontSize),s.default.createElement("dd",null,e.fontWeight),s.default.createElement("dd",null,e.color),s.default.createElement("dd",null,e.opacity)))}),n}},{key:"handleRenderUi",value:function(e){var n=[];return e.map(function(e,t){n.push(s.default.createElement("dl",{key:t},s.default.createElement("dt",{className:"idoll-typography-subtitle"},e.name),s.default.createElement("dd",null,e.lineHeight),s.default.createElement("dd",null,e.MarginTop)))}),n}},{key:"render",value:function(){var e=this;return s.default.createElement(s.default.Fragment,null,s.default.createElement("img",{className:"idoll-typography-img",src:d.default}),s.default.createElement("div",{className:"idoll-typography-title"},s.default.createElement("h3",null,"字体代码"),s.default.createElement("p",null,'font-family: -apple-system, BlinkMacSystemFont, "PingFang SC" , "Hiragino Sans GB" , "Microsoft YaHei" , "Helvetica Neue" , Helvetica , Arial , sans-serif ;')),s.default.createElement("div",{className:"idoll-typography-title"},s.default.createElement("h3",null,"推荐用法"),s.default.createElement("p",null,"DBox 提供了一套完整的标准字体，并提供建议用法，以帮助使用者更好的理解和使用本套系统。")),c.default.map(function(n,t){return s.default.createElement(u.Row,{key:t,className:"idoll-typography-wrap"},s.default.createElement(u.Col,{span:9},s.default.createElement("h4",{style:{fontSize:n.size},className:"idoll-typography-h4"},n.title),s.default.createElement("p",null,n.description)),s.default.createElement(u.Col,{span:8},e.handelRender(n.basic)),s.default.createElement(u.Col,{span:7},e.handleRenderUi(n.ui)))}))}}]),n}(s.default.Component);n.default=f},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(12)),o=h(t(5)),l=h(t(7)),i=h(t(3)),r=h(t(6)),s=h(t(1)),u=h(t(1243));t(99);var d=h(t(1245)),c=h(t(1246)),p=h(t(1247)),f=h(t(1248)),m=h(t(1249));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("img",{src:u.default,className:"idoll-color-img"}),s.default.createElement(d.default,null),s.default.createElement(c.default,null),s.default.createElement(p.default,null),s.default.createElement(f.default,null),s.default.createElement(m.default,null))}}]),n}(s.default.Component);n.default=v},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(469)),o=c(t(2)),l=c(t(13));n.LinkRenderer=f;var i=c(t(1)),r=c(t(0)),s=c(t(8)),u=c(t(14)),d=c(t(755));function c(e){return e&&e.__esModule?e:{default:e}}var p=function(e){return e===window.location.hash.split("/")[window.location.hash.split("/").length-1]?{background:"rgba(19,184,134,0.1)",borderRight:"3px solid #13B886",color:"#13B886"}:{}};function f(e){var n=e.classes,t=e.children,r=(0,l.default)(e,["classes","children"]),u=!0,c=!1,f=void 0;try{for(var m,h=(0,a.default)(["Components","General","Navigation","DataEntry","DataDisplay","Feedback","Others"].values());!(u=(m=h.next()).done);u=!0){if(t===m.value)return i.default.createElement("h3",{className:(0,s.default)(n.h1,r.className)},t)}}catch(e){c=!0,f=e}finally{try{!u&&h.return&&h.return()}finally{if(c)throw f}}return i.default.createElement("a",(0,o.default)({},r,{style:p(t),className:(0,s.default)(n.link,r.className)}),t,"   ",d.default[t])}f.propTypes={children:r.default.node,className:r.default.string,classes:r.default.object.isRequired},n.default=(0,u.default)(function(e){e.color;return{link:{display:"block",height:"30px",color:"#444",lineHeight:"30px",overflow:"hidden",fontWeight:"400",fontSize:"14px",cursor:"pointer"},h1:{fontSize:"12px",color:"#99a9bf"}}})(f)},,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.LogoRenderer=s;var a=r(t(1)),o=r(t(0)),l=r(t(14)),i=r(t(804));function r(e){return e&&e.__esModule?e:{default:e}}function s(e){var n=e.classes;e.children;return a.default.createElement("h1",{className:n.logo},a.default.createElement("img",{className:n.image,src:i.default}),a.default.createElement("span",null,"DBOX"))}s.propTypes={classes:o.default.object.isRequired,children:o.default.node},n.default=(0,l.default)(function(){return{logo:{display:"flex",alignItems:"center",margin:0,fontSize:20,color:"#000"},image:{width:"22px",marginRight:"12px"},text:{fontSize:"20px",color:"#000"}}})(s)},,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.styles=void 0,n.PathlineRenderer=s;var a=i(t(1)),o=i(t(0)),l=i(t(14));function i(e){return e&&e.__esModule?e:{default:e}}var r=n.styles=function(e){var n=e.fontFamily,t=e.fontSize,a=e.color;return{pathline:{fontFamily:n.monospace,fontSize:t.small,color:a.light,wordBreak:"break-all",display:"none"}}};function s(e){var n=e.classes,t=e.children;return a.default.createElement("div",{className:n.pathline},t)}s.propTypes={classes:o.default.object.isRequired,children:o.default.string},n.default=(0,l.default)(r)(s)},,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(82),l=(a=o)&&a.__esModule?a:{default:a};n.default=function(e){return(0,l.default)(e).reduce(function(n,t){return"data-"!==t.substr(0,5)&&"aria-"!==t.substr(0,5)&&"role"!==t||"data-_"===t.substr(0,7)||(n[t]=e[t]),n},{})}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(9)),o=p(t(12)),l=p(t(5)),i=p(t(7)),r=p(t(3)),s=p(t(6)),u=p(t(1)),d=p(t(0)),c=p(t(8));function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){var e,t,a,i;(0,l.default)(this,n);for(var s=arguments.length,u=Array(s),d=0;d<s;d++)u[d]=arguments[d];return t=a=(0,r.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(u))),a.state={type:"vertical"},a.componentDidMount=function(){a.context.idollAnchor.registerLink(a.props.href),(a.context.idollAnchor.type||"vertical"!==a.context.idollAnchor.type)&&a.setState({type:a.context.idollAnchor.type})},a.componentWillUnmount=function(){a.context.idollAnchor.unregisterLink(a.props.href)},a.handleClick=function(e){var n=a.context.idollAnchor,t=n.scrollTo,o=n.onClick,l=a.props,i=l.href,r=l.title;o&&o(e,{title:r,href:i}),t(i)},i=t,(0,r.default)(a,i)}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentWillReceiveProps",value:function(e){var n=e.href,t=this.state.type;this.props.href!==n&&(this.context.idollAnchor.unregisterLink(this.props.href),this.context.idollAnchor.registerLink(n)),t!==this.context.idollAnchor.type&&this.setState({type:this.context.idollAnchor.type})}},{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.href,o=e.title,l=e.children,i=this.state.type,r=this.context.idollAnchor.activeLink===t,s=(0,c.default)(n+"-link",(0,a.default)({},n+"-link-active",r)),d=(0,c.default)(n+"-line-link",(0,a.default)({},n+"-link-active",r)),p=(0,c.default)(n+"-link-title",(0,a.default)({},n+"-link-title-active",r)),f=(0,c.default)(n+"-bookmark",(0,a.default)({},n+"-bookmark-active",r)),m=(0,c.default)(n+"-bookmark-title",(0,a.default)({},n+"-bookmark-title-active",r));return u.default.createElement("div",{className:"vertical"!==i&&i?"bookmark"===i?f:d:s},u.default.createElement("a",{className:"bookmark"!==i?p:m,href:t,title:"string"==typeof o?o:"",onClick:this.handleClick},o),l)}}]),n}(u.default.Component);f.propTypes={prefixCls:d.default.string,href:d.default.string,title:d.default.string,children:d.default.node},f.defaultProps={prefixCls:"idoll-anchor",href:"#"},f.contextTypes={idollAnchor:d.default.object},n.default=f},,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(2)),o=p(t(13)),l=p(t(12)),i=p(t(5)),r=p(t(7)),s=p(t(3)),u=p(t(6)),d=p(t(1)),c=p(t(0));function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.separator,l=e.children,i=(0,o.default)(e,["prefixCls","separator","children"]),r=void 0;return r="href"in this.props?d.default.createElement("a",(0,a.default)({className:n+"-link"},i),l):d.default.createElement("span",(0,a.default)({className:n+"-link"},i),l),l?d.default.createElement("span",null,r,d.default.createElement("span",{className:n+"-separator"},t)):null}}]),n}(d.default.Component);f.__IDOLL_BREADCRUMB_ITEM=!0,f.defaultProps={prefixCls:"idoll-breadcrumb",separator:"/"},f.proprTypes={prefixCls:c.default.string,separator:c.default.oneOfType([c.default.string,c.default.element]),href:c.default.string},n.default=f},,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.PREFIX_CLS="idoll-fullcalendar"},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(376),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(2)),o=s(t(13));n.default=u;var l=s(t(1)),i=s(t(8)),r=s(t(0));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){var n=e.prefixCls,t=void 0===n?"dbox-card":n,r=e.bodyStyle,s=(0,o.default)(e,["prefixCls","bodyStyle"]),u=(0,i.default)(t+"-grid",i.default);return l.default.createElement("div",(0,a.default)({},s,{className:u,style:r}))}u.Protypes={classNames:r.default.string,prefixCls:r.default.string}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(9)),o=v(t(2)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=v(t(1)),p=v(t(0)),f=v(t(8)),m=v(t(585)),h=v(t(34));function v(e){return e&&e.__esModule?e:{default:e}}t(123);var g=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.saveCheckbox=function(e){a.rcCheckbox=e},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"shouldComponentUpdate",value:function(e,n,t){return!(0,h.default)(this.props,e)||!(0,h.default)(this.state,n)||!(0,h.default)(this.context.checkboxGroup,t.checkboxGroup)}},{key:"focus",value:function(){this.rcCheckbox.focus()}},{key:"blur",value:function(){this.rcCheckbox.blur()}},{key:"render",value:function(){var e=this.props,n=this.context,t=this.props,i=t.prefixCls,r=t.className,s=t.children,u=t.indeterminate,d=t.style,p=t.onMouseEnter,h=t.onMouseLeave,v=(0,l.default)(t,["prefixCls","className","children","indeterminate","style","onMouseEnter","onMouseLeave"]),g=n.checkboxGroup,y=(0,o.default)({},v);g&&(y.onChange=function(){return g.toggleOption({label:s,value:e.value})},y.checked=-1!==g.value.indexOf(e.value),y.disabled=g.disabled||e.disabled);var b=(0,f.default)(r,(0,a.default)({},i+"-wrapper",!0)),C=(0,f.default)((0,a.default)({},i+"-indeterminate",u));return c.default.createElement("label",{className:b,style:d,onMouseEnter:p,onMouseLeave:h},c.default.createElement(m.default,(0,o.default)({},y,{prefixCls:i,className:C,ref:this.saveCheckbox})),void 0!==s?c.default.createElement("span",null,s):null)}}]),n}(c.default.Component);g.defaultProps={prefixCls:"idoll-checkbox",indeterminate:!1},g.contextTypes={checkboxGroup:p.default.any},n.default=g},,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(101),l=(a=o)&&a.__esModule?a:{default:a};function i(e,n,t){var a=void 0;return(0,l.default)(e,"ant-motion-collapse",{start:function(){n?(a=e.offsetHeight,e.style.height=0):e.style.height=e.offsetHeight+"px"},active:function(){e.style.height=(n?a:0)+"px"},end:function(){e.style.height="",t()}})}var r={enter:function(e,n){return i(e,!0,n)},leave:function(e,n){return i(e,!1,n)},appear:function(e,n){return i(e,!0,n)}};n.default=r},,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=b(t(9)),o=b(t(2)),l=b(t(12)),i=b(t(5)),r=b(t(3)),s=b(t(7)),u=b(t(6));n.generateShowHourMinutesSecond=C;var d=b(t(1)),c=b(t(10)),p=b(t(961)),f=b(t(8)),m=b(t(118)),h=b(t(377)),v=b(t(0)),g=b(t(119)),y=b(t(21));function b(e){return e&&e.__esModule?e:{default:e}}function C(e){return{showHour:e.indexOf("H")>-1||e.indexOf("h")>-1||e.indexOf("k")>-1,showMinute:e.indexOf("m")>-1,showSecond:e.indexOf("s")>-1}}function k(e){return e<10&&(e="0"+e),e}var x=function(e){function n(e){(0,i.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));w.call(t);var a=e.value||e.defaultValue;if(a&&!(0,g.default)(c.default).isMoment(a))throw new Error("The value/defaultValue of TimePicker must be a moment object after `antd@2.0`, see: https://u.ant.design/time-picker-value");return t.state={value:a,defaultOpenValue:null},t}return(0,u.default)(n,e),(0,s.default)(n,null,[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value}:null}}]),(0,s.default)(n,[{key:"focus",value:function(){this.timePickerRef.focus()}},{key:"blur",value:function(){this.timePickerRef.blur()}},{key:"getDefaultFormat",value:function(){var e=this.props,n=e.format,t=e.use12Hours;return n||(t?"h:mm:ss a":"HH:mm:ss")}},{key:"render",value:function(){return d.default.createElement(m.default,{componentName:"TimePicker",defaultLocale:h.default},this.renderTimePicker)}}]),n}(d.default.Component);x.propTypes={className:v.default.string,size:v.default.oneOf(["large","default","small"]),open:v.default.bool,format:v.default.string,onChange:v.default.func,onOpenChange:v.default.func,disabled:v.default.bool,placeholder:v.default.string,prefixCls:v.default.string,hideDisabledOptions:v.default.bool,disabledHours:v.default.func,disabledMinutes:v.default.func,disabledSeconds:v.default.func,style:v.default.object,getPopupContainer:v.default.func,addon:v.default.func,use12Hours:v.default.bool,focusOnOpen:v.default.bool,hourStep:v.default.number,minuteStep:v.default.number,secondStep:v.default.number,allowEmpty:v.default.bool,inputReadOnly:v.default.bool,clearText:v.default.string,popupClassName:v.default.string,suffixIcon:v.default.element,align:v.default.object,placement:v.default.string,transitionName:v.default.string,autoFocus:v.default.bool},x.defaultProps={prefixCls:"idoll-time-picker",align:{offset:[0,-2]},disabled:!1,disabledHours:void 0,disabledMinutes:void 0,disabledSeconds:void 0,hideDisabledOptions:!1,placement:"bottomLeft",transitionName:"slide-up",focusOnOpen:!0};var w=function(){var e=this;this.handleChange=function(n){"value"in e.props||e.setState({value:n});var t=e.props,a=t.onChange,o=t.format,l=void 0===o?"HH:mm:ss":o;a&&a(n,n&&n.format(l)||"")},this.handleOpenClose=function(n){var t=new Date,a=k(t.getHours())+":"+k(t.getMinutes())+":"+k(t.getSeconds());e.setState({defaultOpenValue:(0,c.default)(a,"HH:mm:ss")});var o=e.props.onOpenChange;o&&o(n)},this.saveTimePicker=function(n){e.timePickerRef=n},this.renderTimePicker=function(n){var t;console.log(e.props);var l=(0,o.default)({},e.props);delete l.defaultValue;var i=e.getDefaultFormat(),r=(0,f.default)(l.className,(0,a.default)({},l.prefixCls+"-"+l.size,!!l.size)),s=l.suffixIcon,u=l.prefixCls,c=s&&(d.default.isValidElement(s)?d.default.cloneElement(s,{className:(0,f.default)((t={},(0,a.default)(t,s.props.className,s.props.className),(0,a.default)(t,u+"-clock-icon",!0),t))}):d.default.createElement("span",{className:u+"-clock-icon"},s))||d.default.createElement(y.default,{type:"clock-o",className:u+"-clock-icon",theme:"outlined"}),m=d.default.createElement("span",{className:u+"-icon"},c),h=d.default.createElement(y.default,{type:"close-circle",className:u+"-panel-clear-btn-icon",theme:"filled"});return d.default.createElement(p.default,(0,o.default)({},C(i),l,{defaultOpenValue:e.state.defaultOpenValue,ref:e.saveTimePicker,format:i,className:r,value:e.state.value,placeholder:void 0===l.placeholder?n.placeholder:l.placeholder,onChange:e.handleChange,onOpen:e.handleOpenClose,onClose:e.handleOpenClose,addon:function(e){return l.addon?d.default.createElement("div",{className:l.prefixCls+"-panel-addon"},l.addon(e)):null},inputIcon:m,clearIcon:h}))}};n.default=x},function(e,n,t){"use strict";t(175),t(963),t(84),t(964),t(531)},function(e,n,t){"use strict";t(966)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(9)),o=v(t(12)),l=v(t(5)),i=v(t(7)),r=v(t(3)),s=v(t(6)),u=t(1),d=v(u),c=v(t(27)),p=v(t(0)),f=v(t(8)),m=t(11),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(531);var g=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.clearButton=function(e){e.className=e.className.replace(t.props.prefixCls+"-clicked","")},t.handleClick=function(){var e,n=(0,m.findDOMNode)(t);t.clearButton(n),t.clickedTimeout=setTimeout(function(){return n.className+=" "+t.props.prefixCls+"-clicked"},10),clearTimeout(t.timeout),t.timeout=setTimeout(function(){return t.clearButton(n)},500),(e=t.props).onClick.apply(e,arguments),t.setState({checked:!t.state.checked})},t.close=function(e){var n=t.props.onClose;if(n&&n(e),e.defaultPrevented)return!1;t.setState({closable:!1})},t.state={checked:t.props.checked,closable:t.props.closable},t.handleClick=t.handleClick.bind(t),t.close=t.close.bind(t),t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentWillUnmount",value:function(){this.clickedTimeout&&clearTimeout(this.clickedTimeout),this.timeout&&clearTimeout(this.timeout)}},{key:"render",value:function(){var e,n=this.props,t=n.children,o=n.prefixCls,l=n.target,i=n.color,r=n.href,s=n.hot,u=n.closable,p=this.state.checked,m=u?d.default.createElement(h.default,{style:{marginLeft:4},type:"close",onClick:this.close}):null,v=(0,f.default)(o,(e={},(0,a.default)(e,o+"-hot",s),(0,a.default)(e,o+"-hot-checked",p&&s),(0,a.default)(e,o+"-color",i),(0,a.default)(e,o+"-closable",u),(0,a.default)(e,o+"-"+i,i),(0,a.default)(e,o+"-checkable-checked",p),e)),g=d.default.createElement("div",{"data-show":this.state.closable,key:t,className:v,onClick:this.handleClick},d.default.createElement("div",null,t),m),y=this.state.closable?g:null;return d.default.createElement(c.default,{component:"",showProp:"data-show"},u?y:r?d.default.createElement("a",{target:l,style:{color:(/blue|red|green|yellow/.test(i),i),borderColor:(/blue|red|green|yellow/.test(i),i)},className:v,href:r},"链接"):d.default.createElement("div",{"data-show":this.state.closable,style:{borderColor:(/blue|red|green|yellow/.test(i),i)},key:t,className:v,onClick:this.handleClick},d.default.createElement("div",{style:{color:(/blue|red|green|yellow/.test(i),i)}},t)))}}]),n}(u.Component);g.propTypes={prefixCls:p.default.string,checked:p.default.bool,closable:p.default.bool},g.defaultProps={prefixCls:"idoll-tag",onClick:function(){},closable:!1,hover:!1},n.default=g},function(e,n,t){"use strict";t(22),t(977)},,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=C(t(9)),o=C(t(2)),l=C(t(12)),i=C(t(5)),r=C(t(7)),s=C(t(3)),u=C(t(6)),d=C(t(1)),c=C(t(11)),p=C(t(0)),f=C(t(8)),m=C(t(27)),h=C(t(181)),v=C(t(397)),g=C(t(398)),y=C(t(125)),b=t(541);function C(e){return e&&e.__esModule?e:{default:e}}var k=function(e){function n(){var e,t,a,o;(0,i.default)(this,n);for(var r=arguments.length,u=Array(r),d=0;d<r;d++)u[d]=arguments[d];return t=a=(0,s.default)(this,(e=n.__proto__||(0,l.default)(n)).call.apply(e,[this].concat(u))),a.onLabelClick=function(){var e=a.props.id||a.getId();if(e&&1!==document.querySelectorAll('[id="'+e+'"]').length){var n=c.default.findDOMNode(a).querySelector('[id="'+e+'"]');n&&n.focus&&n.focus()}},o=t,(0,s.default)(a,o)}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidMount",value:function(){(0,y.default)(this.getControls(this.props.children,!0).length<=1,"`Form.Item` cannot generate `validateStatus` and `help` automatically, while there are more than one `getFieldDecorator` in it.")}},{key:"shouldComponentUpdate",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return h.default.shouldComponentUpdate.apply(this,n)}},{key:"getHelpMsg",value:function(){var e=this.props,n=this.getOnlyControl();if(void 0===e.help&&n){var t=this.getField().errors;return t?t.map(function(e){return e.message}).join(", "):""}return e.help}},{key:"getControls",value:function(e,t){for(var a=[],o=d.default.Children.toArray(e),l=0;l<o.length&&(t||!(a.length>0));l++){var i=o[l];(!i.type||i.type!==n&&"FormItem"!==i.type.displayName)&&i.props&&(b.FIELD_META_PROP in i.props?a.push(i):i.props.children&&(a=a.concat(this.getControls(i.props.children,t))))}return a}},{key:"getOnlyControl",value:function(){var e=this.getControls(this.props.children,!1)[0];return void 0!==e?e:null}},{key:"getChildProp",value:function(e){var n=this.getOnlyControl();return n&&n.props&&n.props[e]}},{key:"getId",value:function(){return this.getChildProp("id")}},{key:"getMeta",value:function(){return this.getChildProp(b.FIELD_META_PROP)}},{key:"getField",value:function(){return this.getChildProp(b.FIELD_DATA_PROP)}},{key:"renderHelp",value:function(){var e=this.props.prefixCls,n=this.getHelpMsg(),t=n?d.default.createElement("div",{className:e+"-explain",key:"help"},n):null;return d.default.createElement(m.default,{transitionName:"show-help",component:"",transitionAppear:!0,key:"help"},t)}},{key:"renderExtra",value:function(){var e=this.props,n=e.prefixCls,t=e.extra;return t?d.default.createElement("div",{className:n+"-extra"},t):null}},{key:"getValidateStatus",value:function(){if(!this.getOnlyControl())return"";var e=this.getField();if(e.validating)return"validating";if(e.errors)return"error";var n="value"in e?e.value:this.getMeta().initialValue;return null!=n&&""!==n?"success":""}},{key:"renderValidateWrapper",value:function(e,n,t){var a=this.props,o=this.getOnlyControl,l=void 0===a.validateStatus&&o?this.getValidateStatus():a.validateStatus,i="";return l&&(i=(0,f.default)({"has-feedback":a.hasFeedback||"validating"===l,"has-success":"success"===l,"has-warning":"warning"===l,"has-error":"error"===l,"is-validating":"validating"===l})),d.default.createElement("div",{className:this.props.prefixCls+"-item-control "+i},e,n,t)}},{key:"renderWrapper",value:function(e){var n=this.props,t=n.prefixCls,a=n.wrapperCol,l=(0,f.default)(t+"-item-control-wrapper",a&&a.className);return d.default.createElement(g.default,(0,o.default)({},a,{className:l,key:"wrapper"}),e)}},{key:"isRequired",value:function(){var e=this.props.required;return void 0!==e?e:!!this.getOnlyControl()&&((this.getMeta()||{}).validate||[]).filter(function(e){return!!e.rules}).some(function(e){return e.rules.some(function(e){return e.required})})}},{key:"renderLabel",value:function(){var e=this.props,n=e.prefixCls,t=e.label,l=e.labelCol,i=e.colon,r=e.id,s=e.formType,u=this.context,c=this.isRequired(),p=(0,f.default)(l&&l.className,"compact"===s?n+"-item-label-compact":n+"-item-label"),m=(0,f.default)((0,a.default)({},n+"-item-required",c)),h=t;return i&&!u.vertical&&"string"==typeof t&&""!==t.trim()&&(h=t.replace(/[：|:]\s*$/,"")),t?d.default.createElement(g.default,(0,o.default)({},l,{className:p,key:"label"}),d.default.createElement("label",{htmlFor:r||this.getId(),className:m,title:"string"==typeof t?t:"",onClick:this.onLabelClick},h)):null}},{key:"renderChildren",value:function(){var e=this.props.children;return[this.renderLabel(),this.renderWrapper(this.renderValidateWrapper(e,this.renderHelp(),this.renderExtra()))]}},{key:"renderFormItem",value:function(e){var n,t=this.props,o=t.prefixCls,l=t.style,i=(n={},(0,a.default)(n,o+"-item",!0),(0,a.default)(n,o+"-item-with-help",!!this.getHelpMsg()),(0,a.default)(n,o+"-item-no-colon",!t.colon),(0,a.default)(n,""+t.className,!!t.className),(0,a.default)(n,o+"-item-compact","compact"===t.formType),n);return d.default.createElement(v.default,{className:(0,f.default)(i),style:l},e)}},{key:"render",value:function(){var e=this.renderChildren();return this.renderFormItem(e)}}]),n}(d.default.Component);k.defaultProps={hasFeedback:!1,prefixCls:"idoll-form",colon:!0},k.propTypes={prefixCls:p.default.string,label:p.default.oneOfType([p.default.string,p.default.node]),labelCol:p.default.object,help:p.default.oneOfType([p.default.node,p.default.bool]),validateStatus:p.default.oneOf(["","success","warning","error","validating"]),hasFeedback:p.default.bool,wrapperCol:p.default.object,className:p.default.string,id:p.default.string,children:p.default.node,colon:p.default.bool,extra:p.default.node,vertical:p.default.bool,formType:p.default.string},k.contextTypes={vertical:p.default.bool},n.default=k},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.FIELD_META_PROP="data-__meta",n.FIELD_DATA_PROP="data-__field"},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(2)),o=c(t(12)),l=c(t(5)),i=c(t(7)),r=c(t(3)),s=c(t(6)),u=c(t(1)),d=c(t(83));function c(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function n(){return(0,l.default)(this,n),(0,r.default)(this,(n.__proto__||(0,o.default)(n)).apply(this,arguments))}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){return u.default.createElement(d.default,(0,a.default)({size:"small"},this.props))}}]),n}(u.default.Component);p.Option=d.default.Option,n.default=p},,function(e,n,t){"use strict";t(175),t(1052),t(173),t(84)},function(e,n,t){"use strict";t(22),t(1055)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(2)),o=p(t(13)),l=p(t(12)),i=p(t(5)),r=p(t(7)),s=p(t(3)),u=p(t(6)),d=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),c=p(t(8));function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=void 0===n?"idoll-list":n,l=e.className,i=e.avatar,r=e.title,s=e.description,u=(0,o.default)(e,["prefixCls","className","avatar","title","description"]),p=(0,c.default)(t+"-item-meta",l),f=d.createElement("div",{className:t+"-item-meta-content"},r&&d.createElement("h4",{className:t+"-item-meta-title"},r),s&&d.createElement("div",{className:t+"-item-meta-description"},s));return d.createElement("div",(0,a.default)({},u,{className:p}),i&&d.createElement("div",{className:t+"-item-meta-avatar"},i),(r||s)&&f)}}]),n}(d.Component);n.default=f},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(12)),i=h(t(5)),r=h(t(7)),s=h(t(3)),u=h(t(6)),d=h(t(1)),c=t(40),p=h(t(69)),f=h(t(0)),m=h(t(8));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function n(){var e,t,a,o;(0,i.default)(this,n);for(var r=arguments.length,u=Array(r),d=0;d<r;d++)u[d]=arguments[d];return t=a=(0,s.default)(this,(e=n.__proto__||(0,l.default)(n)).call.apply(e,[this].concat(u))),a.onKeyDown=function(e){a.menuItem.onKeyDown(e)},a.saveMenuItem=function(e){a.menuItem=e},o=t,(0,s.default)(a,o)}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e,n=this.context,t=n.mode,l=n.idollMenuTheme,i=this.props,r=i.level,s=i.rootPrefixCls,u=i.children,f=(0,m.default)((e={},(0,o.default)(e,s+"-inline-collapsed-tooltip","vertical"===t&&1===r),(0,o.default)(e,s+"-theme-"+l,l),e));return"vertical"===t&&1===r?d.default.createElement(p.default,{title:u,placement:"right",overlayClassName:f},d.default.createElement(c.Item,(0,a.default)({},this.props,{ref:this.saveMenuItem}))):d.default.createElement(c.Item,(0,a.default)({},this.props,{ref:this.saveMenuItem}))}}]),n}(d.default.Component);v.propTypes={disabled:f.default.bool,indexkey:f.default.string},v.contextTypes={mode:f.default.string,idollMenuTheme:f.default.string},v.isMenuItem=1,n.default=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=f(t(2)),o=f(t(12)),l=f(t(5)),i=f(t(7)),r=f(t(3)),s=f(t(6)),u=f(t(1)),d=t(40),c=f(t(0)),p=f(t(8));function f(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function n(){var e,t,a,i;(0,l.default)(this,n);for(var s=arguments.length,u=Array(s),d=0;d<s;d++)u[d]=arguments[d];return t=a=(0,r.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(u))),a.onKeyDown=function(e){a.subMenu.onKeyDown(e)},a.saveSubMenu=function(e){a.subMenu=e},i=t,(0,r.default)(a,i)}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){var e=this.props,n=e.rootPrefixCls,t=e.className;return u.default.createElement(d.SubMenu,(0,a.default)({},this.props,{ref:this.saveSubMenu,popupClassName:(0,p.default)(n+"-"+this.context.idollMenuTheme,t)}))}}]),n}(u.default.Component);m.propTypes={disabled:c.default.bool,indexkey:c.default.string,children:c.default.array,onTitleClick:c.default.func},m.contextTypes={idollMenuTheme:c.default.string},n.default=m},,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(2)),o=m(t(12)),l=m(t(5)),i=m(t(7)),r=m(t(3)),s=m(t(6)),u=m(t(1)),d=m(t(1352)),c=m(t(81)),p=m(t(59));t(1078);var f=m(t(0));function m(e){return e&&e.__esModule?e:{default:e}}function h(){}var v=void 0,g=void 0,y=function(e){function n(){var e,t,a,i;(0,l.default)(this,n);for(var s=arguments.length,u=Array(s),d=0;d<s;d++)u[d]=arguments[d];return t=a=(0,r.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(u))),a.state={confirmLoading:!1},a.handleCancel=function(e){a.props.onCancel(e)},a.handleOk=function(){a.props.onOk(),a.setState({confirmLoading:!0})},i=t,(0,r.default)(a,i)}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentDidMount",value:function(){console.log(g),g||((0,c.default)(document.documentElement,"click",function(e){v={x:e.pageX,y:e.pageY},setTimeout(function(){return v=null},20)}),g=!0)}},{key:"render",value:function(){var e=this.props,n=e.okText,t=e.confirmLoading,o=e.cancelText,l=e.footer,i=e.visible;this.context.idollLocale&&this.context.idollLocale.Modal&&(n=n||this.context.idollLocale.Modal.okText,o=o||this.context.idollLocale.Modal.cancelText);var r=[u.default.createElement(p.default,{key:"cancel",type:"ghost",onClick:this.handleCancel},o||"取消"),u.default.createElement(p.default,{key:"confirm",type:"primary",className:t?"loading":"",loading:t,onClick:this.handleOk},n||"确定")];return u.default.createElement(d.default,(0,a.default)({onClose:this.handleCancel,footer:l||r},this.props,{visible:i,mousePosition:v}))}}]),n}(u.default.Component);y.defaultProps={prefixCls:"idoll-modal",onOk:h,onCancel:h,width:560,transitionName:"zoom",maskTransitionName:"fade",visible:!1},y.propTypes={prefixCls:f.default.string,onOk:f.default.func,onCancel:f.default.func,okText:f.default.node,cancelText:f.default.node,width:f.default.oneOfType([f.default.number,f.default.string]),confirmLoading:f.default.bool,visible:f.default.bool,align:f.default.object,footer:f.default.node,title:f.default.node,closable:f.default.bool},y.contextTypes={idollLocale:f.default.object},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(406),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(2)),o=m(t(9)),l=m(t(13)),i=m(t(12)),r=m(t(5)),s=m(t(7)),u=m(t(3)),d=m(t(6)),c=m(t(1)),p=m(t(8)),f=m(t(0));function m(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n,t=this.props,i=t.prefixCls,r=t.color,s=t.last,u=t.children,d=t.pending,f=t.className,m=t.dot,h=(0,l.default)(t,["prefixCls","color","last","children","pending","className","dot"]);console.log("children: "),console.log(u);var v=(0,p.default)((e={},(0,o.default)(e,i+"-item",!0),(0,o.default)(e,i+"-item-last",s),(0,o.default)(e,i+"-item-pending",d),(0,o.default)(e,f,f),e)),g=(0,p.default)((n={},(0,o.default)(n,i+"-item-head",!0),(0,o.default)(n,i+"-item-head-custom",m),(0,o.default)(n,i+"-item-head-"+r,!0),n));return c.default.createElement("li",(0,a.default)({},h,{className:v}),c.default.createElement("div",{className:i+"-item-tail"}),c.default.createElement("div",{className:g,style:{borderColor:/blue|red|green/.test(r)?null:r}},m),c.default.createElement("div",{className:i+"-item-content"},u))}}]),n}(c.default.Component);h.defaultProps={prefixCls:"idoll-timeline",color:"blue",last:!1,pending:!1},h.propTypes={prefixCls:f.default.string,color:f.default.string,last:f.default.bool,pending:f.default.bool,className:f.default.string,dot:f.default.node},n.default=h},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(12)),o=c(t(5)),l=c(t(7)),i=c(t(3)),r=c(t(6)),s=c(t(1)),u=c(t(21)),d=c(t(96));function c(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function n(){var e,t,l,r;(0,o.default)(this,n);for(var s=arguments.length,u=Array(s),d=0;d<s;d++)u[d]=arguments[d];return t=l=(0,i.default)(this,(e=n.__proto__||(0,a.default)(n)).call.apply(e,[this].concat(u))),l.handleChange=function(e){var n=l.props.onChange;n&&n(e)},l.handleClear=function(e){e.preventDefault();var n=l.props.handleClear;n&&n(e)},r=t,(0,i.default)(l,r)}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){var e=this.props,n=e.placeholder,t=e.value,a=e.prefixCls,o=t&&t.length>0?s.default.createElement("a",{href:"#",className:a+"-action",onClick:this.handleClear},s.default.createElement(u.default,{type:"close-circle"})):s.default.createElement("span",{className:a+"-action"},s.default.createElement(u.default,{type:"search"}));return s.default.createElement("div",null,s.default.createElement(d.default,{placeholder:n,className:a,value:t,ref:"input",onChange:this.handleChange}),o)}}]),n}(s.default.Component);p.defaultProps={placeholder:""},n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(543)),o=r(t(376)),l=r(t(377)),i=r(t(510));function r(e){return e&&e.__esModule?e:{default:e}}n.default={locale:"zh",Pagination:a.default,DatePicker:o.default,TimePicker:l.default,Calendar:i.default,Table:{filterTitle:"筛选",filterConfirm:"确定",filterReset:"重置",emptyText:"暂无数据",selectAll:"全选当页",selectInvert:"反选当页",sortTitle:"排序"},Modal:{okText:"确定",cancelText:"取消",justOkText:"知道了"},Popconfirm:{cancelText:"取消",okText:"确定"},Transfer:{notFoundContent:"无匹配结果",searchPlaceholder:"请输入搜索内容",itemUnit:"",itemsUnit:""},Select:{notFoundContent:"无匹配结果"},Upload:{uploading:"文件上传中",removeFile:"删除文件",uploadError:"上传错误",previewFile:"预览文件"}}},,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(9));n.StyleGuideRenderer=d;var o=s(t(1)),l=s(t(0)),i=s(t(803)),r=s(t(14));function s(e){return e&&e.__esModule?e:{default:e}}var u="@media (max-width: 600px)";function d(e){var n=e.classes,t=e.title,a=e.children,l=e.toc;return o.default.createElement("div",{className:n.root},o.default.createElement("header",{className:n.header},o.default.createElement("div",{className:n.bar},o.default.createElement(i.default,null,t),o.default.createElement("nav",{className:n.nav},o.default.createElement("a",{className:n.headerLink,href:"index.html"},"首页"),o.default.createElement("a",{className:n.headerLink,href:"design.html"},"设计原则"),o.default.createElement("a",{className:n.headerLink,href:"doc.html"},"组件文档"),o.default.createElement("a",{className:n.headerLink,href:"resource.html"},"设计资源")))),o.default.createElement("div",{className:n.mainCont},o.default.createElement("aside",{className:n.sidebar},l),o.default.createElement("main",{className:n.content},o.default.createElement("div",{className:n.innerCont},a))))}d.propTypes={classes:l.default.object.isRequired,title:l.default.string.isRequired,children:l.default.node.isRequired},n.default=(0,r.default)(function(e){e.color,e.font,e.base,e.light,e.link;var n=e.mq;return{root:{minHeight:"100vh",backgroundColor:"#fff"},header:{position:"fixed",top:0,left:0,bottom:0,width:"100%",height:"64px",zIndex:"1",lineHeight:"64px",background:"rgba(255,255,255,1)"},bar:(0,a.default)({maxWidth:"1200px",margin:"0 auto",display:"flex",alignItems:"center"},u,{flexDirection:"column",alignItems:"center"}),nav:(0,a.default)({marginLeft:"auto"},u,{margin:[[10,0,0]]}),mainCont:{maxWidth:"1200px",margin:"100px auto 0",clear:"both"},sidebar:(0,a.default)({borderRight:"1px solid #eaeefb",float:"left",marginRight:"-240px",width:"240px",overflowY:"scroll",height:"100%",WebkitOverflowScrolling:"touch"},n.small,{position:"static",width:"auto",borderWidth:[[1,0,0,0]],paddingBottom:"20"}),content:{width:"100%"},innerCont:{marginLeft:"280px"},headerLink:{"&":{display:"inline-block",color:"#000",width:"80px",textAlign:"center"},"&:hover, &:active":{color:"#13B886",textAlign:"center",width:"80px",cursor:"pointer",height:"61px",padding:"0 12px",display:"inline-block",borderBottom:"3px solid #13B886"}},active:{color:"#13B886",cursor:"pointer",height:"64px",padding:"0 12px",display:"inline-block",borderBottom:"3px solid #13B886"}}})(d)},,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=u(t(9)),o=u(t(1)),l=u(t(0)),i=u(t(8)),r=u(t(136)),s=u(t(14));function u(e){return e&&e.__esModule?e:{default:e}}function d(e){var n=e.classes,t=e.children,l=(e.toolbar,e.id),s=e.href,u=e.depth,d=e.deprecated,c=Math.min(6,u),p=(0,i.default)(n.sectionName,(0,a.default)({},n.isDeprecated,d));return o.default.createElement("div",{className:n.wrapper},o.default.createElement(r.default,{level:c,id:l},o.default.createElement("h3",{href:s,className:p},t)))}d.propTypes={classes:l.default.object.isRequired,children:l.default.node,toolbar:l.default.node,id:l.default.string.isRequired,href:l.default.string.isRequired,depth:l.default.number.isRequired,deprecated:l.default.bool},n.default=(0,s.default)(function(e){var n=e.color;return{wrapper:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:e.space[2]},isDeprecated:{color:n.light,"&, &:hover":{textDecoration:"line-through"}}}})(d)},,,,,,,,,,,,,,function(e,n,t){e.exports=t(1348)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={Button:"按钮",Icon:"图标",Grid:"栅格",Layout:"布局",Affix:"固钉",Dropdown:"下拉框",Pagination:"分页",Breadcrumb:"面包屑",Steps:"步骤条",Menu:"菜单",AutoComplete:"自动完成",Cascader:"级联选择",Input:"输入框",InputNumber:"数字输入框",Select:"选择框",TreeSelect:"树选择",Radio:"单选框",Switch:"开关",Slider:"滑动条",TimePicker:"时间选择器",DatePicker:"日期选择器",Transfer:"穿梭框",Upload:"上传",Avatar:"头像",Badge:"徽标数",Collapse:"折叠面板",Calendar:"日历",Popover:"气泡卡片",Tree:"树形控件",Tooltip:"文字提示",Table:"表格",Tabs:"标签页",Timeline:"时间线",Tag:"标签",Alert:"警告提示",Drawer:"抽屉",Modal:"对话框",Message:"全局提示",Notification:"通知提醒框",Progress:"进度条",PopConfirm:"气泡确认框",Spin:"加载中",Anchor:"锚点",BackTop:"返回顶部",Divider:"分割线",Form:"表单",Checkbox:"多选框",Popconfirm:"气泡确认框",Color:"颜色",Typography:"字体"}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){e.exports=t.p+"9ea9a4aa51a70cb27e3b1c0f036d4827.png"},,,,,,,,,,,,function(e,n,t){var a={react:t(1)},o=t(16).default.bind(null,a);t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;",o);e.exports=[{type:"markdown",content:"#### **Features**\n\n-   An enterprise-class UI design language for web applications.\n\n-   A set of high-quality React dbox-ui out of the box.\n\n-   Written in TypeScript with complete defined types.\n\n-   A npm + webpack + babel front-end development workflow.\n\n#### **Environment Support**\n\n-   Modern browsers and Internet Explorer 9+ (with polyfills)\n\n-   Server-side Rendering\n\n-   Electron\n\n#### **Installation**\n\n#### **Links**"}]},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=v(t(1)),p=v(t(8)),f=t(0),m=t(11),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(239);var g=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),y.call(a),o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentWillUnmount",value:function(){this.clickedTimeout&&clearTimeout(this.clickedTimeout),this.timeout&&clearTimeout(this.timeout)}},{key:"isNeedInserted",value:function(){var e=this.props,n=e.icon,t=e.children,a={large:"lg",small:"sm"}[e.size]||"";return 1===c.default.Children.count(t)&&!n&&"sm"!==a}},{key:"render",value:function(){var e,n=this,t=this.props,i=t.type,r=t.text,s=t.shape,u=t.size,d=t.className,f=t.htmlType,m=t.children,v=t.icon,g=t.loading,y=t.ghost,C=t.prefixCls,x=t.block,w=t.iconLocation,S=(0,l.default)(t,["type","text","shape","size","className","htmlType","children","icon","loading","ghost","prefixCls","block","iconLocation"]),I={large:"lg",small:"sm"}[u]||"",T=(0,p.default)((e={},(0,o.default)(e,C,!0),(0,o.default)(e,C+"-"+i,i),(0,o.default)(e,C+"-"+s,s),(0,o.default)(e,C+"-"+I,I),(0,o.default)(e,C+"-icon-only",!m&&v),(0,o.default)(e,C+"-loading",g),(0,o.default)(e,C+"-background-ghost",y),(0,o.default)(e,C+"-text",r),(0,o.default)(e,C+"-block",x),(0,o.default)(e,d,d),e)),P=g?"loading":v,M=m||0===m?c.default.Children.map(m,function(e){return function(e,n){if(null==e)return;var t=n?" ":"";if(b(e.type&&k(e.props.children)))return c.default.cloneElement(e,{},e.props.split("").join(t));if(b(e))return k(e)&&(e=e.split("").join(t)),c.default.createElement("span",null,e);return e}(e,n.isNeedInserted())}):null,R=P?c.default.createElement(h.default,{type:P}):null;return"href"in S?c.default.createElement("a",(0,a.default)({},S,{className:T,onClick:this.handleClick}),R,M):"right"===w?c.default.createElement("button",(0,a.default)({},S,{type:f||"button",className:T,onClick:this.handleClick}),M,R):c.default.createElement("button",(0,a.default)({},S,{type:f||"button",className:T,onClick:this.handleClick}),R,M)}}]),n}(c.default.Component);g.defaultProps={prefixCls:"idoll-btn",onClick:function(){},ghost:!1,loading:!1,text:!1,block:!1},g.propTypes={type:f.PropTypes.string,shape:f.PropTypes.oneOf(["circle","circle-outline","square"]),size:f.PropTypes.oneOf(["large","default","small"]),htmlType:f.PropTypes.oneOf(["submit","button","reset"]),onClick:f.PropTypes.func,loading:f.PropTypes.bool,className:f.PropTypes.string,icon:f.PropTypes.string,block:f.PropTypes.bool};var y=function(){var e=this;this.clearButton=function(n){n.className=n.className.replace(e.props.prefixCls+"-clicked","")},this.handleClick=function(){var n,t=(0,m.findDOMNode)(e);e.clearButton(t),e.clickedTimeout=setTimeout(function(){return t.className+=" "+e.props.prefixCls+"-clicked"},10),clearTimeout(e.timeout),e.timeout=setTimeout(function(){return e.clearButton(t)},500),(n=e.props).onClick.apply(n,arguments)}};function b(e){return"string"==typeof e}n.default=g;var C=/^[\u4e00-\u9fa5]{2}$/,k=C.test.bind(C)},,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";t(22)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=u(t(2)),o=u(t(9)),l=u(t(13));n.default=d;var i=u(t(1)),r=u(t(8)),s=u(t(0));function u(e){return e&&e.__esModule?e:{default:e}}function d(e){var n=e.prefixCls,t=void 0===n?"idoll-btn-group":n,s=e.size,u=e.className,d=(0,l.default)(e,["prefixCls","size","className"]),c="";switch(s){case"large":c="lg";break;case"small":c="sm"}var p=(0,r.default)(t,(0,o.default)({},t+"-"+c,c),u);return i.default.createElement("div",(0,a.default)({},d,{className:p}))}d.propTypes={size:s.default.oneOf(["small","default","large"])}},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Button",examples:t(842)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(59)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Button$0 = require('./index.jsx');\nconst Button = Button$0.default || Button$0;",o);e.exports=[{type:"markdown",content:"用来触发操作和链接。\n\n##### **基本用法**\n\n通过 `type` 属性来控制按钮样式；\n按钮中的文字要尽可能短，并且清晰的表示按钮被激活时会发生什么。一个屏幕上应该只出现一个主按钮，主按钮需谨慎使用。"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div>\n  <Button style={buttonStyle}>默认</Button>\n  <Button type='primary' style={buttonStyle}>主要</Button>\n  <Button type='secondary' style={buttonStyle}>次要</Button>\n  <Button disabled style={buttonStyle}>禁用</Button>\n  <Button type='dashed' style={buttonStyle}>虚线</Button>\n  <Button type='danger' style={buttonStyle}>危险</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **图标按钮**\n\n通过 `icon` 属性在按钮中嵌入图标，设置 iconLocation 可以控制图标的位置，对于没有文字的图标按钮可以通过设置 `shape` 属性控制按钮的形状为圆形或方形。 在按钮中使用图标可以吸引更多注意力或帮助传达更多意义。"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div>\n  <Button icon='delete' size='small' style={buttonStyle}>图标</Button>\n  <Button icon='delete' style={buttonStyle}>图标</Button>\n  <Button icon='delete' size='large' style={buttonStyle}>图标</Button>\n  <br /><br />\n  <Button icon='down' iconLocation='right' size='small' style={buttonStyle}>图标</Button>\n  <Button icon='down' iconLocation='right' style={buttonStyle}>图标</Button>\n  <Button icon='down' iconLocation='right' size='large' style={buttonStyle}>图标</Button>\n  <br /><br />\n\n  <Button icon='down' loading iconLocation='right' size='small' style={buttonStyle}>加载中</Button>\n  <Button icon='down' loading iconLocation='right' style={buttonStyle}>加载中</Button>\n  <Button icon='down' loading iconLocation='right' size='large' style={buttonStyle}>加载中</Button>\n  <br /><br />\n\n  <Button icon='delete' size='small' shape='circle' style={buttonStyle}/>\n  <Button icon='delete' shape='circle' style={buttonStyle}/>\n  <Button icon='delete' size='large' shape='circle' style={buttonStyle}/>\n  <br /><br />\n\n  <Button icon='delete' shape='square' size='small' style={buttonStyle}/>\n  <Button icon='delete' shape='square' style={buttonStyle}/>\n  <Button icon='delete' shape='square' size='large' style={buttonStyle}/>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **文字按钮**\n\n通过添加 `text` 属性可以设置文字按钮，文字按钮常用于链接跳转。"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div>\n  <Button text style={buttonStyle}>默认</Button>\n  <Button type='secondary' text style={buttonStyle}>主要</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **按钮尺寸**\n\n通过 `size` 属性来控制按钮的大、小尺寸，默认尺寸为中。"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div>\n  <Button type='primary' size='small' style={buttonStyle}>按钮</Button>\n  <Button type='primary' style={buttonStyle}>按钮</Button>\n  <Button type='primary' size='large' style={buttonStyle}>按钮</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **跳转按钮**\n\n通过 `href` 属性来设置跳转按钮，并且可以通过 `target` 属性控制打开方式。"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div>\n  <Button type='secondary' href='http://www.baidu.com' target='_blank' style={buttonStyle}>新页面</Button>\n  <Button type='secondary' href='http://www.baidu.com' target='_self' style={buttonStyle}>本页面</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **幽灵按钮**\n\n通过添加 `ghost` 属性来设置幽灵按钮"},{type:"code",content:"import { Button } from 'dbox-ui';\nconst buttonStyle = {\n  marginLeft: '10px'\n};\n<div style={{ background: '#2F323B',height: '50px',paddingTop: '10px',paddingLeft: '10px'}}>\n  <Button ghost style={buttonStyle}>默认</Button>\n  <Button type='primary' ghost style={buttonStyle}>重要</Button>\n  <Button type='dashed' ghost style={buttonStyle}>虚线</Button>\n  <Button type='danger' ghost style={buttonStyle}>危险</Button>\n  <Button disabled ghost style={buttonStyle}>禁用</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **block按钮**\n\n通过 `block` 属性将按钮宽度撑满父容器。"},{type:"code",content:"import { Button } from 'dbox-ui';\n<div style={{ width: '600px' }}>\n  <Button type='primary' block>主要</Button>\n  <br />\n  <br />\n  <Button block>默认</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **组合按钮**\n\n通过 `ButtonGroup` 将按钮组合在一起，可通过设置 `size` 属性控制组合按钮的尺寸，默认为中。"},{type:"code",content:"import { Button,Icon } from 'dbox-ui';\nconst ButtonGroup = Button.Group;\n<div>\n  <ButtonGroup>\n    <Button>取消</Button>\n    <Button>确定</Button>\n  </ButtonGroup>\n  <br />\n  <br />\n\n  <ButtonGroup>\n    <Button >选择1</Button>\n    <Button >选择2</Button>\n    <Button >选择3</Button>\n  </ButtonGroup>\n  <br />\n  <br />\n\n  <ButtonGroup>\n    <Button>\n      <Icon type='left-circle-o' />向后\n    </Button>\n    <Button>\n      向前<Icon type='right-circle-o' />\n    </Button>\n  </ButtonGroup>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"### Api\n\n| 属性       | 说明                                                                                | 类型       | 默认值       |\n| -------- | --------------------------------------------------------------------------------- | -------- | --------- |\n| block    | 将按钮宽度调整为其父宽度的选项                                                                   | boolean  | `false`   |\n| disabled | 按钮失效状态                                                                            | boolean  | `false`   |\n| ghost    | 幽灵属性，使按钮背景透明                                                                      | boolean  | `false`   |\n| href     | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致                                                  | string   | -         |\n| icon     | 设置按钮的图标类型                                                                         | string   | -         |\n| shape    | 设置按钮形状，可选值为 `circle` 、`square` 或者不设                                               | string   | -         |\n| size     | 设置按钮大小，可选值为 `small`、`large` 或者不设                                                  | string   | `default` |\n| target   | 相当于 a 链接的 target 属性，href 存在时生效                                                    | string   | -         |\n| text     | 设置按钮为文字按钮                                                                         | boolean  | `false`   |\n| type     | 设置按钮类型，可选值为 `default`、 `primary`、 `secondary`、 `disabled`、 `dashed`、 `danger`或者不设 | string   | -         |\n| onClick  | `click` 事件的 handler                                                               | function | -         |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=b(t(9)),o=b(t(2)),l=b(t(12)),i=b(t(5)),r=b(t(7)),s=b(t(3)),u=b(t(6)),d=b(t(1)),c=b(t(11)),p=b(t(0)),f=b(t(8)),m=b(t(80)),h=b(t(54)),v=b(t(34)),g=b(t(81)),y=b(t(240));function b(e){return e&&e.__esModule?e:{default:e}}function C(e){return e!==window&&1===e.nodeType?e.getBoundingClientRect():{top:0,left:0,bottom:0}}function k(){}function x(){return"undefined"!=typeof window?window:null}t(846);var w=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.events=["resize","scroll","touchstart","touchmove","pageshow","load"],t.eventHandlers={},t.state={affixStyle:void 0,placeholderStyle:void 0},t.componentWillReceiveProps=function(e){t.props.target!==e.target&&(t.clearEventListeners(),t.setTargetEventListeners(e.target),t.updatePosition({}))},t.updatePosition=function(e){var n=t.props,a=n.offsetTop,l=n.offsetBottom,i=n.offset,r=(0,n.target)();a=a||i;var s=(0,y.default)(r,!0),u=c.default.findDOMNode(t),d=function(e,n){var t=e.getBoundingClientRect(),a=C(n),o=(0,y.default)(n,!0),l=(0,y.default)(n,!1),i=window.document.body,r=i.clientTop||0,s=i.clientLeft||0;return{top:t.top-a.top+o+r,left:t.left-a.left+l+s,width:t.width,height:t.height}}(c.default.findDOMNode(t),r),p=(t.fixedNode.offsetWidth,t.fixedNode.offsetHeight),f={top:!1,bottom:!1};"number"!=typeof a&&"number"!=typeof l?(f.top=!0,a=0):(f.top="number"==typeof a,f.bottom="number"==typeof l);var m=C(r),h=r.innerHeight||r.clientHeight;if(s>d.top-a&&f.top)t.setAffixStyle(e,{position:"fixed",top:m.top+a,left:m.left+d.left,width:c.default.findDOMNode(t).offsetWidth}),t.setPlaceholderStyle(e,{width:c.default.findDOMNode(t).offsetWidth,height:c.default.findDOMNode(t).offsetHeight});else if(s>d.top+p+l-h&&f.bottom){var v=r===window?0:window.innerHeight-m.bottom,g=d.width;t.setAffixStyle(e,{position:"fixed",bottom:v+l,left:m.left+d.left,width:g}),t.setPlaceholderStyle({width:g,height:d.height})}else{var b=t.state.affixStyle;"resize"===e.type&&b&&"fixed"===b.position&&u.offsetWidth?t.setAffixStyle(e,(0,o.default)({},b,{width:u.offsetWidth})):t.setAffixStyle(e,null),t.setPlaceholderStyle(null)}},t.saveFixedNode=function(e){t.fixedNode=e},t.state={affixStyle:null,placeholderStyle:null},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidMount",value:function(){(0,h.default)(!("offset"in this.props),"'offset'属性已经被分离了，请用'offsetTop'代替");var e=this.props.target;this.setTargetEventListeners(e)}},{key:"componentWillUnmount",value:function(){this.clearEventListeners(),clearTimeout(this.timeout),this.updatePosition.cancel()}},{key:"setTargetEventListeners",value:function(e){var n=this,t=e();t&&(this.clearEventListeners(),this.events.forEach(function(e){n.eventHandlers[e]=(0,g.default)(t,e,n.updatePosition)}))}},{key:"clearEventListeners",value:function(){var e=this;this.events.forEach(function(n){var t=e.eventHandlers[n];t&&t.remove&&t.remove()})}},{key:"setAffixStyle",value:function(e,n){var t=this,a=this.props,o=a.onChange,l=void 0===o?k:o,i=a.target,r=void 0===i?x:i,s=this.state.affixStyle,u=r()===window;"scroll"===e.type&&s&&n&&u||(0,v.default)(n,s)||this.setState({affixStyle:n},function(){var e=!!t.state.affixStyle;(n&&!s||!n&&s)&&l(e)})}},{key:"setPlaceholderStyle",value:function(e,n){var t=this.state.placeholderStyle;(0,v.default)(n,t)||this.setState({placeholderStyle:n})}},{key:"render",value:function(){var e=(0,f.default)((0,a.default)({},this.props.prefixCls||"idoll-affix",this.state.affixStyle)),n=(0,m.default)(this.props,["prefixCls","offsetTop","offsetBottom","target","onChange"]),t=(0,o.default)({},this.state.placeholderStyle,this.props.style);return d.default.createElement("div",(0,o.default)({},n,{style:t}),d.default.createElement("div",{className:e,ref:this.saveFixedNode,style:this.state.affixStyle},this.props.children))}}]),n}(d.default.Component);w.propTypes={offsetTop:p.default.number,offsetBottom:p.default.number,target:p.default.func},w.defaultProps={target:function(){return window},onChange:function(){}},n.default=w},,,function(e,n,t){"use strict";t(847)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(9)),l=g(t(12)),i=g(t(5)),r=g(t(7)),s=g(t(3)),u=g(t(6)),d=g(t(1)),c=g(t(11)),p=g(t(27)),f=g(t(21)),m=g(t(8)),h=g(t(0)),v=g(t(501));function g(e){return e&&e.__esModule?e:{default:e}}function y(){}t(851);var b=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.handleClose=function(e){e.preventDefault();var n=c.default.findDOMNode(t);n.style.height=n.offsetHeight+"px",n.style.height=n.offsetHeight+"px",t.setState({closing:!1}),(t.props.onClose||y)(e)},t.animationEnd=function(){t.setState({closed:!0,closing:!0}),(t.props.afterClose||y)()},t.state={closing:!0,closed:!1},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e,n,t=this.props,l=t.closable,i=t.description,r=t.type,s=t.prefixCls,u=void 0===s?"idoll-alert":s,c=t.message,h=t.closeText,g=t.showIcon,y=t.banner,b=t.className,C=void 0===b?"":b,k=t.style,x=t.iconType,w=t.icon;if(g=!(!y||void 0!==g)||g,r=y&&void 0===r?"warning":r||"info",!x)switch(r){case"success":x="check";break;case"info":x="info-circle";break;case"error":x="error-circle";break;case"warning":x="warning";break;default:x="default"}var S=(0,m.default)(u,u+"-"+r,(e={},(0,o.default)(e,u+"-close",!this.state.closing),(0,o.default)(e,u+"-with-description",!!i),(0,o.default)(e,u+"-no-description",!i),(0,o.default)(e,u+"-no-icon",!g),(0,o.default)(e,u+"-banner",!!y),e),C);h&&(l=!0);var I=l?d.default.createElement("a",{onClick:this.handleClose,className:u+"-close-icon"},h||d.default.createElement(f.default,{type:"close"})):null,T=(0,v.default)(this.props),P=w&&(d.default.isValidElement(w)?d.default.cloneElement(w,{className:(0,m.default)((n={},(0,o.default)(n,w.props.className,w.props.className),(0,o.default)(n,u+"-icon",!0),n))}):d.default.createElement("span",{className:u+"-icon"},w))||d.default.createElement(f.default,{className:u+"-icon",type:x});return this.state.closed?null:d.default.createElement(p.default,{component:"",showProp:"data-show",transitionName:u+"-slide-up",onEnd:this.animationEnd},d.default.createElement("div",(0,a.default)({"data-show":this.state.closing,className:S,style:k},T),g?P:null,d.default.createElement("span",{className:u+"-message"},c),d.default.createElement("span",{className:u+"-description"},i),I))}}]),n}(d.default.Component);b.propTypes={closable:h.default.bool,description:h.default.oneOfType([h.default.node,h.default.string]),type:h.default.oneOf(["success","info","warning","error"]),message:h.default.node,closeText:h.default.node,showIcon:h.default.bool,banner:h.default.bool,style:h.default.object,prefixCls:h.default.string,className:h.default.string,onClose:h.default.func,afterClose:h.default.func,icon:h.default.node,iconType:h.default.string},n.default=b},,,function(e,n,t){"use strict";t(22),t(852)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=y(t(2)),o=y(t(12)),l=y(t(5)),i=y(t(7)),r=y(t(3)),s=y(t(6)),u=y(t(1)),d=y(t(11)),c=y(t(0)),p=y(t(8)),f=y(t(81)),m=y(t(240)),h=y(t(31)),v=y(t(502)),g=y(t(171));function y(e){return e&&e.__esModule?e:{default:e}}function b(e,n){if(!e)return 0;if(!e.getClientRects().length)return 0;var t=e.getBoundingClientRect();if(t.width||t.height){if(n===window)return n=e.ownerDocument.documentElement,t.top-n.clientTop;if(n&&1===n.nodeType)return t.top-n.getBoundingClientRect().top}return t.top}t(855);var C=/#([^#]+)$/;var k=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.componentWillUnmount=function(){t.scrollEvent&&t.scrollEvent.remove()},t.handleScroll=function(){if(t.animating)return!1;var e=t.props,n=e.offsetTop,a=e.bounds;t.setState({activeLink:t.getCurrentAnchor(n,a)})},t.handleScrollTo=function(e){var n=t.props,a=n.offsetTop,o=n.getContainer;t.animting=!0,t.setState({activeLink:e}),function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments[2],a=arguments[3],o=t(),l=(0,m.default)(o,!0),i=C.exec(e);if(!i)return!1;var r=document.getElementById(i[1]);if(!r)return!1;var s=b(r,o),u=l+s-n,d=Date.now();(0,h.default)(function e(){var n,t,i,r=Date.now()-d,s=(n=r,i=u-(t=l),(n/=225)<1?i/2*n*n*n+t:i/2*((n-=2)*n*n+2)+t);o===window?window.scrollTo(window.pageXOffset,s):o.scrollTop=s,r<450?(0,h.default)(e):a()})}(e,a,o,function(){t.animating=!1})},t.updateInk=function(){if("undefined"!=typeof document){var e=t.props,n=e.prefixCls,a=e.type,o=d.default.findDOMNode(t).getElementsByClassName(n+"-link-title-active")[0];if(o){if("inline"===a||"bookmark"===a)return void(t.inkNode.style.left=o.offsetLeft+o.clientWidth/2+"px");t.inkNode.style.top=o.offsetTop+o.clientHeight/2-4.5+"px"}}},t.saveInkNode=function(e){t.inkNode=e},t.state={activeLink:null},t.links=[],t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"getChildContext",value:function(){var e=this;return{idollAnchor:{registerLink:function(n){e.links.includes(n)||e.links.push(n)},unregisterLink:function(n){var t=e.links.indexOf(n);-1!==t&&e.links.splice(t,1)},activeLink:this.state.activeLink,scrollTo:this.handleScrollTo,onClick:this.props.onClick,type:this.props.type}}}},{key:"componentDidMount",value:function(){var e=this.props.getContainer;this.scrollEvent=(0,f.default)(e(),"scroll",this.handleScroll),this.handleScroll()}},{key:"componentDidUpdate",value:function(){this.updateInk()}},{key:"getCurrentAnchor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;if("undefined"==typeof document)return"";var t=[],a=(0,this.props.getContainer)();return this.links.forEach(function(o){var l=C.exec(o.toString());if(l){var i=document.getElementById(l[1]);if(i){var r=b(i,a);r<e+n&&t.push({link:o,top:r})}}}),t.length?t.reduce(function(e,n){return n.top>e.top?n:e}).link:""}},{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.className,o=void 0===t?"":t,l=e.style,i=e.offsetTop,r=e.affix,s=e.showInkInFixed,d=e.children,c=e.getContainer,f=e.type,m=this.state.activeLink,h=(0,p.default)(n+"-ink-ball",{visible:m}),v=(0,p.default)(o,n+"-wrapper"),y=n+"-bookmark-wrapper",b=(0,p.default)(n,{fixed:!r&&!s}),C=(0,p.default)(n+"-anchor-line-link"),k=(0,p.default)(n+"-anchor-line-link-ball",{visible:m}),x=(0,a.default)({maxHeight:i?"calc(100vh - "+i+"px)":"100vh"},l),w=u.default.createElement("div",{className:"bookmark"!==f?v:y,style:x},u.default.createElement("div",{className:b},"bookmark"!==f?u.default.createElement("div",{className:"vertical"!==f&&f&&"bookmark"!==f?C:n+"-ink"},u.default.createElement("span",{className:"vertical"!==f&&f?k:h,ref:this.saveInkNode})):null,d));return r?u.default.createElement(g.default,{offsetTop:i,target:c},w):w}}]),n}(u.default.Component);k.Link=v.default,k.propTypes={prefixCls:c.default.string,getContainer:c.default.func,type:c.default.string,className:c.default.string,style:c.default.object,children:c.default.node,offsetTop:c.default.number,onClick:c.default.func,bounds:c.default.number},k.defaultProps={prefixCls:"idoll-anchor",affix:!0,showInkInFixed:!1,getContainer:function(){return window}},k.childContextTypes={idollAnchor:c.default.object},n.default=k},,function(e,n,t){"use strict";t(856)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(28)),o=g(t(9)),l=g(t(2)),i=g(t(12)),r=g(t(5)),s=g(t(7)),u=g(t(3)),d=g(t(6)),c=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),p=t(583),f=g(t(8)),m=g(t(83)),h=g(t(96)),v=g(t(876));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var s=arguments.length,d=Array(s),f=0;f<s;f++)d[f]=arguments[f];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(d))),a.getInputElement=function(){var e=a.props.children,n=e&&c.isValidElement(e)&&e.type!==p.Option?c.Children.only(a.props.children):c.createElement(h.default,null),t=(0,l.default)({},n.props);return delete t.children,c.createElement(v.default,t,n)},a.saveSelect=function(e){a.select=e},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"focus",value:function(){this.select.focus()}},{key:"blur",value:function(){this.select.blur()}},{key:"render",value:function(){var e,n,t=this.props,i=t.size,r=t.className,s=void 0===r?"":r,u=t.notFoundContent,d=t.prefixCls,h=t.optionLabelProp,v=t.dataSource,g=t.children,y=(0,f.default)((e={},(0,o.default)(e,d+"-lg","large"===i),(0,o.default)(e,d+"-sm","small"===i),(0,o.default)(e,s,!!s),(0,o.default)(e,d+"-show-search",!0),(0,o.default)(e,d+"-auto-complete",!0),e)),b=void 0,C=c.Children.toArray(g);return b=C.length&&((n=C[0])&&n.type&&(n.type.isSelectOption||n.type.isSelectOptGroup))?g:v?v.map(function(e){if(c.isValidElement(e))return e;switch(void 0===e?"undefined":(0,a.default)(e)){case"string":return c.createElement(p.Option,{key:e},e);case"object":return c.createElement(p.Option,{key:e.value},e.text);default:throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`. ")}}):[],c.createElement(m.default,(0,l.default)({},this.props,{className:y,mode:"combobox",optionLabelProp:h,getInputElement:this.getInputElement,notFoundContent:u,ref:this.saveSelect}),b)}}]),n}(c.Component);y.Option=p.Option,y.OptGroup=p.OptGroup,y.defaultProps={prefixCls:"idoll-select",transitionName:"slide-up",optionLabelProp:"children",choiceTransitionName:"zoom",showSearch:!0,filterOption:!1},n.default=y},,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=v(t(1)),c=t(583),p=v(c),f=t(0),m=v(t(8)),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(173);var g=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.size,l=n.className,i=n.mode,r=n.notFoundContent,s=n.prefixCls,u=n.showSearch,c=n.optionLabelProp,f=(0,m.default)((e={},(0,o.default)(e,s+"-lg","large"===t),(0,o.default)(e,s+"-sm","small"===t),(0,o.default)(e,l,!!l),(0,o.default)(e,s+"-show-search",u),e)),v=this.context.antLocale;v&&v.Select&&(r=r||v.Select.notFoundContent);var g="combobox"===i;g&&(r=null,c=c||"value");var y={multiple:"multiple"===i,tags:"tags"===i,combobox:g},b=d.default.createElement(h.default,{type:"close-circle-o",className:s+"-picker-clear"}),C=d.default.createElement(h.default,{type:"close",className:s+"-remove-icon"});return t="small"===t?"small":null,d.default.createElement(p.default,(0,a.default)({},this.props,y,{removeIcon:C,clearIcon:b,dropdownClassName:t,className:f,optionLabelProp:c||"children",notFoundContent:r}))}}]),n}(d.default.Component);g.Option=c.Option,g.OptGroup=c.OptGroup,g.defaultProps={prefixCls:"idoll-select",transitionName:"slide-up",choiceTransitionName:"zoom",showSearch:!1},g.contextTypes={antLocale:f.PropTypes.object},n.default=g},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(9));n.default=s;var o=r(t(1)),l=r(t(0)),i=r(t(8));function r(e){return e&&e.__esModule?e:{default:e}}function s(e){var n,t=e.prefixCls,l=void 0===t?"idoll-input-group":t,r=e.className,s=void 0===r?"":r,u=(0,i.default)(l,(n={},(0,a.default)(n,l+"-lg","large"===e.size),(0,a.default)(n,l+"-sm","small"===e.size),(0,a.default)(n,l+"-compact",e.compact),n),s);return o.default.createElement("span",{className:u,style:e.style},e.children)}s.propTypes={children:l.default.any,size:l.default.oneOf(["small","default","large"]),className:l.default.string}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=t(1),c=v(d),p=v(t(8)),f=t(0),m=v(t(174)),h=v(t(873));function v(e){return e&&e.__esModule?e:{default:e}}t(84);var g=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.handleTextareaChange=function(e){"value"in t.props||t.resizeTextarea();var n=t.props.onChange;n&&n(e)},t.resizeTextarea=function(){var e=t.props.autosize;if(e&&t.textareaRef){var n=e?e.minRows:null,a=e?e.maxRows:null,o=(0,h.default)(t.textareaRef,!1,n,a);t.setState({textareaStyles:o})}},t.saveTextAreaRef=function(e){t.textareaRef=e},t.state={textareaStyles:null},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidMount",value:function(){this.resizeTextarea()}},{key:"componentWillReceiveProps",value:function(e){var n,t;this.props.value!==e.value&&(this.nextFrameActionId&&(t=this.nextFrameActionId,window.calculateNodeHeight?window.cancelAnimationFrame(t):window.clearTimeout(t)),this.nextFrameActionId=(n=this.resizeTextarea,window.requestAnimationFrame?window.requestAnimationFrame(n):window.setTimeout(n,1)))}},{key:"focus",value:function(){this.textareaRef.focus()}},{key:"blur",value:function(){this.textareaRef.blur()}},{key:"getTextAreaClassName",value:function(){var e=this.props,n=e.prefixCls,t=e.className,a=e.disabled;return(0,p.default)(n,t,(0,o.default)({},n+"-disabled",a))}},{key:"render",value:function(){var e=this.props,n=(0,m.default)(e,["prefixCls","onPressEnter","autosize"]),t=(0,a.default)({},e.style,this.state.textareaStyles);return"value"in n&&(n.value=n.value||""),c.default.createElement("textarea",(0,a.default)({},n,{className:this.getTextAreaClassName(),style:t,onKeyDown:this.handleKeyDown,onChange:this.handleTextareaChange,ref:this.saveTextAreaRef}))}}]),n}(d.Component);g.defaultProps={defaultValue:"",disabled:!1,prefixCls:"idoll-input",onKeyDown:function(){},onChange:function(){}},g.propTypes={type:f.PropTypes.string,placeholder:f.PropTypes.string,name:f.PropTypes.string,id:f.PropTypes.oneOfType([f.PropTypes.string,f.PropTypes.number]),autosize:f.PropTypes.oneOfType([f.PropTypes.bool,f.PropTypes.object]),size:f.PropTypes.oneOf(["small","default","large"]),maxLength:f.PropTypes.string,readOnly:f.PropTypes.bool,disabled:f.PropTypes.bool,value:f.PropTypes.any,defaultValue:f.PropTypes.any,className:f.PropTypes.string,prefixCls:f.PropTypes.string,autoFocus:f.PropTypes.bool,onKeyDown:f.PropTypes.func,onChange:f.PropTypes.func,onClick:f.PropTypes.func,onFocus:f.PropTypes.func,onBlur:f.PropTypes.func},n.default=g},,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;i||(i=document.createElement("textarea"),document.body.appendChild(i));var s=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=e.getAttribute("id")||e.getAttribute("data-reactid")||e.getAttribute("name");if(n&&l[t])return l[t];var a=window.getComputedStyle(e),i=a.getPropertyValue("box-sizing")||a.getPropertyValue("-moz-box-sizing")||a.getPropertyValue("-webkit-box-sizing"),r=parseFloat(a.getPropertyValue("padding-bottom"))+parseFloat(a.getPropertyValue("padding-top")),s=parseFloat(a.getPropertyValue("border-bottom-width"))+parseFloat(a.getPropertyValue("border-top-width")),u={sizingStyle:o.map(function(e){return e+":"+a.getPropertyValue(e)}).join(";"),paddingSize:r,borderSize:s,boxSizing:i};n&&t&&(l[t]=u);return u}(e,n),u=s.paddingSize,d=s.borderSize,c=s.boxSizing,p=s.sizingStyle;i.setAttribute("style",p+";"+a),i.value=e.value||e.placeholder||"";var f=-1/0,m=1/0,h=i.scrollHeight;"border-box"===c?h+=d:"content-box"===c&&(h-=u);if(null!==t||null!==r){i.value="";var v=i.scrollHeight;null!==t&&(f=v*t,"border-box"===c&&(f=f+u+d),h=Math.max(f,h)),null!==r&&(m=v*r,"border-box"===c&&(m=m+u+d),h=Math.min(m,h))}return{height:h,minHeight:f,maxHeight:m}};var a="\n  min-height: 0 !important;\n  max-height: none !important;\n  height: 0 !important;\n  visibility: hidden !important;\n  overflow: hidden !important;\n  position: absolute !important;\n  z-index: -1000 !important;\n  top: 0 !important;\n  right: 0 !important'\n ",o=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"],l={},i=void 0},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=y(t(2)),o=y(t(9)),l=y(t(13)),i=y(t(12)),r=y(t(5)),s=y(t(7)),u=y(t(3)),d=y(t(6)),c=t(1),p=y(c),f=y(t(8)),m=t(0),h=y(t(245)),v=y(t(21)),g=y(t(59));function y(e){return e&&e.__esModule?e:{default:e}}t(84);var b=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.onSearch=function(){var e=a.props.onSearch;e&&e(a.input.input.value),a.input.focus()},a.saveInput=function(e){a.input=e},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.className,i=n.prefixCls,r=n.inputPrefixCls,s=n.size,u=n.enterButton,d=n.suffix,c=(0,l.default)(n,["className","prefixCls","inputPrefixCls","size","enterButton","suffix"]);delete c.onSearch;var m=u?p.default.createElement(g.default,{className:i+"-button",type:"primary",size:s,key:"enterButton"},!0===u?p.default.createElement(v.default,{type:"search"}):u):p.default.createElement(v.default,{className:i+"-icon",type:"search",key:"searchIcon"}),y=p.default.cloneElement(m,{onClick:this.onSearch,className:"icon-hover"}),b=d?[d,y]:y,C=(0,f.default)(i,t,(e={},(0,o.default)(e,i+"-enter-button",!!u),(0,o.default)(e,i+"-"+s,!!s),e));return p.default.createElement(h.default,(0,a.default)({onPressEnter:this.onSearch},c,{size:s,className:C,prefixCls:r,suffix:b,ref:this.saveInput}))}}]),n}(c.Component);b.defaultProps={inputPrefixCls:"idoll-input",prefixCls:"idoll-input-search",enterButton:!1},b.propTypes={onSearch:m.PropTypes.func},n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=f(t(2)),o=f(t(12)),l=f(t(5)),i=f(t(7)),r=f(t(3)),s=f(t(6)),u=p(t(1)),d=p(t(11)),c=f(t(0));function p(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}function f(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function n(){var e,t,a,i;(0,l.default)(this,n);for(var s=arguments.length,u=Array(s),c=0;c<s;c++)u[c]=arguments[c];return t=a=(0,r.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(u))),a.focus=function(){a.ele.focus?a.ele.focus():d.findDOMNode(a.ele).focus()},a.blur=function(){a.ele.focus?a.ele.focus():d.findDOMNode(a.ele).blur()},a.saveRef=function(e){a.ele=e;var n=a.props.children.ref;"function"==typeof n&&n(e)},i=t,(0,r.default)(a,i)}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){return u.cloneElement(this.props.children,(0,a.default)({},this.props,{ref:this.saveRef}),null)}}]),n}(u.Component);m.propTypes={children:c.default.any},n.default=m},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(246),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";t(879)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(12)),l=g(t(5)),i=g(t(7)),r=g(t(3)),s=g(t(6)),u=g(t(1)),d=g(t(27)),c=g(t(81)),p=g(t(8)),f=g(t(0)),m=g(t(80)),h=g(t(240)),v=g(t(31));function g(e){return e&&e.__esModule?e:{default:e}}t(881);var y=function(e,n,t,a){var o=t-n;return(e/=a/2)<1?o/2*e*e*e+n:o/2*((e-=2)*e*e+2)+n};function b(){return window}var C=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.getCurrentScrollTop=function(){var e=(t.props.target||b)();return e===window?window.pageYOffset||document.body.scrollTop||document.documentElement.scrollTop:e.scrollTop},t.scrollToTop=function(e){var n=t.getCurrentScrollTop(),a=Date.now();(0,v.default)(function e(){var o=Date.now()-a;t.setScrollTop(y(o,n,0,450)),o<450?(0,v.default)(e):t.setScrollTop(0)}),(t.props.onClick||function(){})(e)},t.handleScroll=function(){var e=t.props,n=e.visibilityHeight,a=e.target,o=void 0===a?b:a,l=(0,h.default)(o(),!0);t.setState({visible:l>n})},t.state={visible:!1},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"setScrollTop",value:function(e){var n=(this.props.target||b)();n===window?(document.body.scrollTop=e,document.documentElement.scrollTop=e):n.scroll=e}},{key:"componentDidMount",value:function(){var e=this.props.target||b;this.scrollEvent=(0,c.default)(e(),"scroll",this.handleScroll),this.handleScroll()}},{key:"componentWillUnmount",value:function(){this.scrollEvent&&this.scrollEvent.remove()}},{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=void 0===n?"idoll-back-top":n,o=e.className,l=void 0===o?"":o,i=e.children,r=(0,p.default)(t,l),s=u.default.createElement("div",{className:t+"-content"},u.default.createElement("div",{className:t+"-icon"})),c=(0,m.default)(this.props,["prefixCls","className","children","visibilityHeight","target"]),f=this.state.visible?u.default.createElement("div",(0,a.default)({},c,{className:r,onClick:this.scrollToTop}),i||s):null;return u.default.createElement(d.default,{component:"",transitionName:"fade"},f)}}]),n}(u.default.Component);C.propTypes={visibilityHeight:f.default.number,prefixCls:f.default.string,className:f.default.string,children:f.default.node,target:f.default.element,onClick:f.default.func},C.defaultProps={visibilityHeight:400},n.default=C},function(e,n,t){"use strict";t(175),t(882)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=v(t(1)),p=v(t(27)),f=v(t(884)),m=v(t(8)),h=v(t(0));function v(e){return e&&e.__esModule?e:{default:e}}t(886);var g=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.count,i=n.offset,r=n.text,s=n.status,u=n.prefixCls,d=n.showZero,h=n.overflowCount,v=n.className,g=n.style,y=n.children,b=n.dot,C=(0,l.default)(n,["count","offset","text","status","prefixCls","showZero","overflowCount","className","style","children","dot"]);t=t>h?h+"+":t,b&&(t="");var k="";d||(k=!(t&&"0"!==t||d)),b&&(k=!(t&&"0"!==t||b)),s&&(u=u+"-"+s);var x=u+(b?"-dot":"-count"),w=(0,m.default)((e={},(0,o.default)(e,v,!!v),(0,o.default)(e,u,!0),(0,o.default)(e,u+"-not-a-wrapper",!y),e));return c.default.createElement("span",(0,a.default)({className:w,style:null},C),y,c.default.createElement(p.default,{component:"",showProp:"data-show",transitionName:u+"-zoom",transitionAppear:!0},k?null:c.default.createElement(f.default,{"data-show":!k,className:x,count:t,style:i?{left:i[0],top:i[1]}:g})),r)}}]),n}(c.default.Component);g.defaultProps={prefixCls:"idoll-badge",count:null,dot:!1,overflowCount:99},g.propType={count:h.default.oneOfType([h.default.string,h.default.number]),showZero:h.default.bool,dot:h.default.bool,text:h.default.any,status:h.default.string,overflowCount:h.default.number},n.default=g},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(13)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=t(1),c=v(d),p=t(11),f=v(t(885)),m=v(t(0)),h=v(t(174));function v(e){return e&&e.__esModule?e:{default:e}}function g(e){return e?e.toString().split("").reverse().map(function(e){return Number(e)}):[]}var y=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.state={animateStarted:!0,count:e.count},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidMount",value:function(){(0,f.default)()||((0,p.findDOMNode)(this).className+=" not-support-css-animation")}},{key:"getPositionByNum",value:function(e,n){if(this.state.animateStarted)return 10+e;var t=g(this.state.count)[n],a=g(this.lastCount)[n];return this.state.count>this.lastCount?t>=a?10+e:20+e:t<=a?10+e:e}},{key:"componentWillReceiveProps",value:function(e){var n=this;if("count"in e){if(this.state.count===e.count)return!1;this.lastCount=this.state.count,this.setState({animateStarted:!0},function(){setTimeout(function(){n.setState({animateStarted:!1,count:e.count},function(){n.props.onAnimated()})},5)})}}},{key:"renderNumberList",value:function(e){for(var n=[],t=0;t<30;t++){var a=e===t?"current":null;n.push(c.default.createElement("p",{key:t,className:a},t%10))}return n}},{key:"renderCurrentNumber",value:function(e,n){var t=this.getPositionByNum(e,n),a=this.props.height,o=this.state.animateStarted||void 0===g(this.lastCount)[n];return(0,d.createElement)("span",{className:this.props.prefixCls+"-only",style:{transition:o&&"none",WebkitTransform:"translateY("+-t*a+"px)",transform:"translateY("+-t*a+"px)",height:a},key:n},this.renderNumberList(t))}},{key:"renderNumberElement",value:function(){var e=this,n=this.state;return!n.count||isNaN(n.count)?n.count:g(n.count).map(function(n,t){return e.renderCurrentNumber(n,t)}).reverse()}},{key:"render",value:function(){var e=this.props,n=e.component,t=e.prefixCls,l=e.className,i=(0,o.default)(e,["component","prefixCls","className"]),r=(0,h.default)(i,["count","onAnimated"]),s=(0,a.default)({},r,{className:t+" "+l});return(0,d.createElement)(n,s,this.renderNumberElement())}}]),n}(c.default.Component);y.defaultProps={prefixCls:"idoll-scroll-number",count:null,component:"sup",height:20,onAnimated:function(){}},y.propTypes={count:m.default.oneOfType([m.default.string,m.default.number]),component:m.default.string,onAnimated:m.default.func,height:m.default.number},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=void 0;n.default=function(){if(void 0!==a)return a;var e="Webkit Moz O ms Khtml".split(" "),n=document.createElement("div");if(void 0!==n.style.animationName&&(a=!0),void 0!==a)for(var t=0;t<e.lenght;t++)if(void 0!==n.style[e[t]+"AnimationName"]){a=!0;break}return a=a||!1}},function(e,n,t){"use strict";t(22),t(887)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(12)),o=m(t(5)),l=m(t(7)),i=m(t(3)),r=m(t(6)),s=m(t(82)),u=t(1),d=m(u),c=m(t(0)),p=m(t(504)),f=m(t(8));function m(e){return e&&e.__esModule?e:{default:e}}function h(e,n,t,a){var o=t.indexOf(e)===t.length-1,l=function(e,n){if(!e.breadcrumbName)return null;var t=(0,s.default)(n).join("|");return e.breadcrumbName.replace(new RegExp(":("+t+")","g"),function(e,t){return n[t]||e})}(e,n);return o?d.default.createElement("span",null,l):d.default.createElement("a",{href:"#/"+a.join("/")},l)}t(889);var v=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){var e=void 0,n=this.props,t=n.separator,a=n.prefixCls,o=n.style,l=n.className,i=n.routes,r=n.params,c=void 0===r?{}:r,m=n.children,v=n.itemRender,g=void 0===v?h:v;if(i&&i.length>0){var y=[];e=i.map(function(e){e.path=e.path||"";var n=e.path.replace(/^\//,"");return(0,s.default)(c).forEach(function(e){n=n.replace(":"+e,c[e])}),n&&y.push(n),d.default.createElement(p.default,{separator:t,key:e.breadcrumbName||n},g(e,c,i,y))})}else m&&(e=d.default.Children.map(m,function(e,n){return e?(0,u.cloneElement)(e,{separator:t,key:n}):e}));return d.default.createElement("div",{className:(0,f.default)(l,a),style:o},e)}}]),n}(d.default.Component);v.defaultProps={prefixCls:"idoll-breadcrumb",separator:"/"},v.propTypes={prefixCls:c.default.string,separator:c.default.node,routes:c.default.array,params:c.default.object},n.default=v},function(e,n,t){"use strict";t(22),t(890)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=b(t(2)),o=b(t(251)),l=b(t(12)),i=b(t(5)),r=b(t(7)),s=b(t(3)),u=b(t(6)),d=b(t(1)),c=b(t(0)),p=b(t(10)),f=b(t(896)),m=b(t(118)),h=t(509),v=b(t(903)),g=b(t(119)),y=b(t(510));function b(e){return e&&e.__esModule?e:{default:e}}function C(){return null}t(906);var k=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));x.call(t);var a=e.value||e.defaultValue||(0,g.default)(p.default)();if(!(0,g.default)(p.default).isMoment(a))throw new Error("The value/defaultValue of Calendar must be a moment object after `antd@2.0`, see: https://u.ant.design/calendar-value");return t.state={value:a,mode:e.mode},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentWillReceiveProps",value:function(e){"value"in e&&this.setState({value:e.value}),"mode"in e&&e.mode!==this.props.mode&&this.setState({mode:e.mode})}},{key:"render",value:function(){return d.default.createElement(m.default,{componentName:"Calendar",defaultLocale:this.getDefaultLocale},this.renderCalendar)}}]),n}(d.default.Component);k.defaultProps={locale:{},fullscreen:!0,prefixCls:h.PREFIX_CLS,mode:"month",onSelect:C,onPanelChange:C,onChange:C,mold:""},k.propTypes={prefixCls:c.default.string,className:c.default.string,fullscreen:c.default.bool,dateCellRender:c.default.func,monthCellRender:c.default.func,dateFullCellRender:c.default.func,monthFullCellRender:c.default.func,locale:c.default.object,style:c.default.object,onPanelChange:c.default.func,onSelect:c.default.func,onChange:c.default.func,value:c.default.object};var x=function(){var e=this;this.monthCellRender=function(n){var t=e.props,a=t.prefixCls,o=t.monthCellRender,l=void 0===o?C:o;return d.default.createElement("div",{className:a+"-month"},d.default.createElement("div",{className:a+"-value"},(0,p.default)(n).localeDate().monthsShort(n)),d.default.createElement("div",{className:a+"-content"},l(n)))},this.dateCellRender=function(n){var t,a=e.props,o=a.prefixCls,l=a.dateCellRender,i=void 0===l?C:l;return d.default.createElement("div",{className:o+"-date"},d.default.createElement("div",{className:o+"-value"},(t=(0,p.default)(n).date())<10?"0"+t:""+t),d.default.createElement("div",{className:o+"-content"},i(n)))},this.setValue=function(n,t){"value"in e.props||e.setState({value:n}),"select"===t?e.props.onSelect&&e.props.onSelect(n):"changePanel"===t&&e.onPanelChange(n,e.state.mode)},this.setType=function(n){var t="date"===n?"month":"year";e.state.mode!==t&&(e.setState({mode:t}),e.onPanelChange(e.state.value,t))},this.onHeaderValueChange=function(n){e.setValue(n,"changePanel")},this.onHeaderTypeChange=function(n){e.setType(n)},this.onPanelChange=function(n,t){var a=e.props,o=a.onPanelChange,l=a.onChange;o&&o(n,t),l&&n!==e.state.value&&l(n)},this.onSelect=function(n){e.setValue(n,"select")},this.getDateRange=function(e,n){return function(t){if(!t)return!1;var a=(0,o.default)(e,2),l=a[0],i=a[1],r=!t.isBetween(l,i,"days","[]");return n&&n(t)||r}},this.renderCalendar=function(n,t){var o=e.state,l=e.props,i=o.value,r=o.mode;i&&t&&(0,p.default)(i).locale(t);var s=l.prefixCls,u=l.style,c=l.className,m=l.fullscreen,h=l.dateFullCellRender,g=l.monthFullCellRender,y=l.mold,b="type"===r?"month":"date",k=c||"";m&&(k+=s+"-fullscreen");var x=g||e.monthCellRender,w=h||e.dateCellRender,S=l.disabledDate;return l.validRange&&(S=e.getDateRange(l.validRange,S)),d.default.createElement("div",{className:k,style:u},d.default.createElement(v.default,{fullscreen:m,type:b,value:i,mold:y,locale:n.lang,prefixCls:s,onTypeChange:e.onHeaderTypeChange,onValueChange:e.onHeaderValueChange,validRange:l.validRange}),d.default.createElement(f.default,(0,a.default)({},l,{disabledDate:S,Select:C,locale:n.lang,type:b,prefixCls:s,showHeader:!1,value:i,monthCellRender:x,dateCellRender:w,onSelect:e.onSelect})))},this.getDefaultLocale=function(){var n=(0,a.default)({},y.default,e.props.locale);return n.lang=(0,a.default)({},n.lang,(e.props.locale||{}).lang),n}};n.default=k},,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(251)),o=v(t(12)),l=v(t(5)),i=v(t(7)),r=v(t(3)),s=v(t(6)),u=v(t(1)),d=v(t(0)),c=v(t(10)),p=t(509),f=v(t(904)),m=v(t(83)),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}var g=m.default.Option;c.default.locale("zh_cn");var y=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.handleProIncreaseMonth=function(){var e,n=void 0,a=t.state,o=a.monthNumber,l=a.yearValue;if(n=o,e=l,++n>=12)return n=0,t.onMonthChange(n),t.setState({monthValue:(0,f.default)(n),monthNumber:n,yearValue:e+1},function(){t.state.yearValue!==e&&t.onYearChange(t.state.yearValue)}),!1;t.setState({monthValue:(0,f.default)(n),monthNumber:n,yearValue:e},function(){t.onMonthChange(t.state.monthNumber),t.state.yearValue!==e&&t.onYearChange(t.state.yearValue)})},t.handleDecIncreaseMonth=function(){var e,n=void 0,a=t.state,o=a.monthNumber,l=a.yearValue;if(n=o,e=l,--n<0)return n=11,t.onMonthChange(n),t.setState({monthValue:(0,f.default)(n),monthNumber:n,yearValue:e-1},function(){t.state.yearValue!==e&&t.onYearChange(t.state.yearValue)}),!1;t.setState({monthValue:(0,f.default)(n),monthNumber:n,yearValue:e},function(){t.onMonthChange(t.state.monthNumber),t.state.yearValue!==e&&t.onYearChange(t.state.yearValue)})},t.onYearChange=function(e){var n=t.props,o=n.value,l=n.validRange,i=(0,c.default)(o).clone();if(i.year(parseInt(e,10)),l){var r=(0,a.default)(l,2),s=r[0],u=r[1],d=(0,c.default)(i).get("year"),p=(0,c.default)(i).get("month");d===(0,c.default)(u).get("year")&&p>(0,c.default)(u).get("month")&&i.month((0,c.default)(u).get("month")),d===(0,c.default)(s).get("year")&&p<(0,c.default)(s).get("month")&&i.month((0,c.default)(s).get("month"))}var f=t.props.onValueChange;f&&f(i)},t.onMonthChange=function(e){var n=(0,c.default)(t.props.value).clone();n.month(parseInt(e,10));var a=t.props.onValueChange;a&&a(n)},t.onTypeChange=function(e){var n=t.props.onTypeChange;n&&n(e.target.value)},t.getCalendarHeaderNode=function(e){t.getCalendarHeaderNode=e},t.state={monthValue:null,yearValue:null},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentDidMount",value:function(){this.setState({monthNumber:(0,c.default)().month(),monthValue:(0,f.default)((0,c.default)().month()),yearValue:(0,c.default)().year()})}},{key:"getYearSelectElement",value:function(e){var n=this.props,t=n.yearSelectOffset,a=n.yearSelectTotal,o=n.locale,l=n.prefixCls,i=n.fullscreen,r=n.validRange,s=e-t,d=s+a;r&&(s=(0,c.default)(r[0]).get("year"),d=(0,c.default)(r[1]).get("year")+1);for(var p="年"===o.year?"年":"",f=[],h=s;h<d;h++)f.push(u.default.createElement(g,{key:""+h},h+p));return u.default.createElement(m.default,{size:i?"default":"small",dropdownMatchSelectWidth:!1,className:l+"-year-select",value:String(e),onChange:this.onYearChange,style:{width:75,height:24}},f)}},{key:"getMonthsLocale",value:function(e){for(var n=(0,c.default)(e).clone(),t=(0,c.default)(e).localeData(),a=[],o=0;o<12;o++)n.month(o),a.push(t.monthsShort(n));return a}},{key:"getMonthSelectElement",value:function(e,n){var t=this.props,o=t.prefixCls,l=t.fullscreen,i=t.validRange,r=t.value,s=[],d=0,p=12;if(i){var f=(0,a.default)(i,2),h=f[0],v=f[1],y=(0,c.default)(r).get("year");(0,c.default)(v).get("year")===y?p=(0,c.default)(v).get("month")+1:d=(0,c.default)(h).get("month")}for(var b=d;b<p;b++)s.push(u.default.createElement(g,{key:""+b},n[b]));return u.default.createElement(m.default,{size:l?"default":"small",dropdownMatchSelectWidth:!1,className:o+"-month-select",value:String(e),onChange:this.onMonthChange,style:{width:58,height:24}},s)}},{key:"render",value:function(){var e=this.props,n=e.type,t=e.value,a=e.prefixCls,o=e.mold,l=this.state,i=l.monthValue,r=l.yearValue,s=this.getYearSelectElement((0,c.default)(t).year()),d="date"===n?this.getMonthSelectElement((0,c.default)(t).month(),this.getMonthsLocale(t)):null;return"backdrop"!==o?u.default.createElement("div",{className:a+"-header",ref:this.getCalenderHeaderNode},u.default.createElement("div",null,s,d)):u.default.createElement("div",{className:a+"-backdrop-header",ref:this.getCalenderHeaderNode},u.default.createElement(h.default,{type:"left",className:a+"-backdrop-header-left",onClick:this.handleDecIncreaseMonth}),u.default.createElement("div",{className:a+"-backdrop-header-time"},r+"年","  ",i),u.default.createElement(h.default,{type:"right",className:a+"-backdrop-header-right",onClick:this.handleProIncreaseMonth}))}}]),n}(u.default.Component);y.propTypes={prefixCls:d.default.string,locale:d.default.object,yearSelectOffset:d.default.number,yearSelectTotal:d.default.number,type:d.default.string,onValueChange:d.default.func,onTypeChange:d.default.func,value:d.default.any,fullscreen:d.default.bool,mold:d.default.string},y.defaultProps={prefixCls:p.PREFIX_CLS+"-header",yearSelectOffset:10,yearSelectTotal:20},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=null;switch(e){case 0:n="一月";break;case 1:n="二月";break;case 2:n="三月";break;case 3:n="四月";break;case 4:n="五月";break;case 5:n="六月";break;case 6:n="七月";break;case 7:n="八月";break;case 8:n="九月";break;case 9:n="十月";break;case 10:n="十一月";break;case 11:n="十二月"}return n}},,function(e,n,t){"use strict";t(22),t(907),t(173),t(378)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(910)),o=i(t(934)),l=i(t(514));function i(e){return e&&e.__esModule?e:{default:e}}a.default.Meta=o.default,a.default.Grid=l.default,n.default=a.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=y(t(2)),o=y(t(9)),l=y(t(13)),i=y(t(12)),r=y(t(5)),s=y(t(7)),u=y(t(3)),d=y(t(6)),c=t(1),p=y(c),f=y(t(0)),m=y(t(8)),h=y(t(80)),v=y(t(120)),g=y(t(514));function y(e){return e&&e.__esModule?e:{default:e}}t(932);var b=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.onTabChange=function(e){a.props.onTabChange&&a.props.onTabChange(e)},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"isContainGrid",value:function(){var e=void 0;return p.default.Children.forEach(this.props.children,function(n){n&&n.type&&n.type===g.default&&(e=!0)}),e}},{key:"getCompatibleHoverable",value:function(){var e=this.props,n=e.noHovering,t=e.hoverable;return"noHovering"in this.props?!n||t:!!n}},{key:"getAction",value:function(e){return e&&e.length?e.map(function(n,t){return p.default.createElement("li",{style:{width:100/e.length+"%"},key:"action-"+t},p.default.createElement("span",null,n))}):null}},{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,i=void 0===t?"dbox-card":t,r=n.className,s=n.extra,u=n.title,d=n.bordered,c=void 0===d||d,f=n.bodyStyle,g=n.tabList,y=n.loading,b=n.children,C=n.hoverable,k=n.cover,x=n.type,w=n.action,S=n.activeTabKey,I=n.defaultActiveTabKey,T=(0,l.default)(n,["prefixCls","className","extra","title","bordered","bodyStyle","tabList","loading","children","hoverable","cover","type","action","activeTabKey","defaultActiveTabKey"]),P=(0,m.default)(i,r,(e={},(0,o.default)(e,i+"-bordered",c),(0,o.default)(e,i+"-loading",y),(0,o.default)(e,i+"-hoverable",C),(0,o.default)(e,i+"-contain-grid",this.isContainGrid()),(0,o.default)(e,i+"-"+x,x&&"inner"===x),(0,o.default)(e,i+"-contain-tabs",g&&g),e)),M=p.default.createElement("div",{className:i+"-loading-content"},p.default.createElement("p",{className:i+"-loading-block",style:{width:"94%"}}),p.default.createElement("p",null,p.default.createElement("span",{className:i+"-loading-block",style:{width:"28%"}}),p.default.createElement("span",{className:i+"-loading-block",style:{width:"62%"}})),p.default.createElement("p",null,p.default.createElement("span",{className:i+"-loading-block",style:{width:"22%"}}),p.default.createElement("span",{className:i+"-loading-block",style:{width:"66%"}})),p.default.createElement("p",null,p.default.createElement("span",{className:i+"-loading-block",style:{width:"56%"}}),p.default.createElement("span",{className:i+"-loading-block",style:{width:"39%"}})),p.default.createElement("p",null,p.default.createElement("span",{className:i+"-loading-block",style:{width:"21%"}}),p.default.createElement("span",{className:i+"-loading-block",style:{width:"15%"}}),p.default.createElement("span",{className:i+"-loading-block",style:{width:"40%"}}))),R=void 0!==S,_=(0,o.default)({},R?"activeKey":"defaultActiveKey",R?S:I),N=void 0,B=g&&g.length?p.default.createElement(v.default,(0,a.default)({},_,{className:i+"-head-tabs",size:"large",onChange:this.onTabChange}),g.map(function(e){return p.default.createElement(v.default.TabPane,{tab:e.tab,key:e.key})})):null;(u||s||B)&&(N=p.default.createElement("div",{className:i+"-head"},p.default.createElement("div",{className:i+"-head-wrapper"},u&&p.default.createElement("div",{className:i+"-head-title"},u),s&&p.default.createElement("div",{className:i+"-extra"},s)),B));var E=k?p.default.createElement("div",{className:i+"-cover"},k):null,D=p.default.createElement("div",{className:i+"-body"},y?M:b),O=w&&w.length?p.default.createElement("ul",{className:i+"-actions"},this.getAction(w)):null,F=(0,h.default)(T,["onTabChange"]);return p.default.createElement("div",(0,a.default)({},F,{className:P,style:f}),N,E,D,O)}}]),n}(c.Component);b.PropTypes={prefixCls:f.default.string,className:f.default.string,title:f.default.node,extra:f.default.node,bordered:f.default.bool,tabList:f.default.node,loading:f.default.bool,children:f.default.node,hoverable:f.default.bool,noHovering:f.default.bool,cover:f.default.node,onTabChange:f.default.func,actions:f.default.node},b.defaultProps={prefixCls:"dbox-card",className:""},n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=C(t(2)),o=C(t(9)),l=C(t(28)),i=C(t(12)),r=C(t(5)),s=C(t(7)),u=C(t(3)),d=C(t(6)),c=C(t(1)),p=C(t(11)),f=t(1355),m=C(f),h=C(t(912)),v=C(t(928)),g=C(t(8)),y=C(t(21)),b=C(t(929));function C(e){return e&&e.__esModule?e:{default:e}}t(930);var k=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.createNewTab=function(e){var n=a.props.onEdit;n&&n(e,"add")},a.removeTab=function(e,n){if(n.stopPropagation(),e){var t=a.props.onEdit;t&&t(e,"remove")}},a.handleChange=function(e){var n=a.props.onChange;n&&n(e)},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentDidMount",value:function(){var e=p.default.findDOMNode(this);e&&!(0,b.default)()&&-1===e.className.indexOf(" no-flex")&&(e.className+=" no-flex")}},{key:"render",value:function(){var e,n=this,t=this.props,i=t.prefixCls,r=t.className,s=void 0===r?"":r,u=t.size,d=t.type,p=void 0===d?"line":d,f=t.tabPosition,b=t.children,C=t.tabBarExtraContent,k=t.tabBarStyle,x=t.hideAdd,w=t.onTabClick,S=t.onPrevClick,I=t.onNextClick,T=t.animated,P=void 0===T||T,M="object"===(void 0===P?"undefined":(0,l.default)(P))?{inkBarAnimated:P.inkBar,tabPaneAnimated:P.tabPane}:{inkBarAnimated:P,tabPaneAnimated:P},R=M.inkBarAnimated,_=M.tabPaneAnimated;"line"!==p&&(_="animated"in this.props&&_);var N=(0,g.default)(s,(e={},(0,o.default)(e,i+"-vertical","left"===f||"right"===f),(0,o.default)(e,i+"-"+u,!!u),(0,o.default)(e,i+"-card",p.indexOf("card")>=0),(0,o.default)(e,i+"-cardTabs","cardTabs"===p),(0,o.default)(e,i+"-"+p,!0),(0,o.default)(e,i+"-no-animation",!_),e)),B=[];"editable-card"===p&&(B=[],c.default.Children.forEach(b,function(e,t){var a=e.props.closable,o=(a=void 0===a||a)?c.default.createElement(y.default,{type:"close",onClick:function(t){return n.removeTab(e.key,t)}}):null;B.push(c.default.cloneElement(e,{tab:c.default.createElement("div",{className:a?void 0:i+"-tab-unclosable"},e.props.tab,o),key:e.key||t}))}),x||(C=c.default.createElement("span",null,c.default.createElement(y.default,{type:"plus",className:i+"-new-tab",onClick:this.createNewTab}),C))),C=C?c.default.createElement("div",{className:i+"-extra-content"},C):null;return c.default.createElement(m.default,(0,a.default)({},this.props,{className:N,tabBarPosition:f,renderTabBar:function(){return c.default.createElement(h.default,{inkBarAnimated:R,extraContent:C,onTabClick:w,onPrevClick:S,onNextClick:I,style:k})},renderTabContent:function(){return c.default.createElement(v.default,{animated:_,animatedWithMargin:!0})},onChange:this.handleChange}),B.length>0?B:b)}}]),n}(c.default.Component);k.TabPane=f.TabPane,k.defaultProps={prefixCls:"idoll-tabs",hideAdd:!1},n.default=k},,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){if("undefined"!=typeof window&&window.document&&window.document.documentElement){var e=window.document.documentElement;return"flex"in e.style||"webkitFlex"in e.style||"Flex"in e.style||"msFlex"in e.style}return!1}},function(e,n,t){"use strict";t(931),t(22)},function(e,n,t){},function(e,n,t){"use strict";t(933)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(2)),o=s(t(13));n.default=u;var l=s(t(1)),i=s(t(8)),r=s(t(0));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){var n=e.prefixCls,t=void 0===n?"dbox-card":n,r=e.avatar,s=e.title,u=e.description,d=(0,o.default)(e,["prefixCls","avatar","title","description"]),c=(0,i.default)(t+"-meta",i.default),p=r?l.default.createElement("div",{className:t+"-meta-avatar"},r):null,f=s?l.default.createElement("div",{className:t+"-meta-title"},s):null,m=u?l.default.createElement("div",{className:t+"-meta-description"},u):null,h=s||u?l.default.createElement("div",{className:t+"-meta-detail"},f,m):null;return l.default.createElement("div",(0,a.default)({},d,{className:c}),p,h)}u.PropTypes={classNames:r.default.string,prefixCls:r.default.string,avatar:r.default.node,title:r.default.node,description:r.default.node}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=C(t(2)),o=C(t(9)),l=C(t(13)),i=C(t(12)),r=C(t(5)),s=C(t(7)),u=C(t(3)),d=C(t(6)),c=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),p=C(t(1362)),f=C(t(936)),m=C(t(8)),h=C(t(0)),v=C(t(80)),g=C(t(122)),y=C(t(96)),b=C(t(21));function C(e){return e&&e.__esModule?e:{default:e}}function k(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).some(function(n){return n.label.indexOf(e)>-1})}function x(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=arguments[2];return n.map(function(n,a){var o=n.label,l=o.indexOf(e)>-1?function(e,n,t){return e.split(n).map(function(e,a){return 0===a?e:[c.createElement("span",{className:t+"-menu-item-keyword",key:"seperator"},n),e]})}(o,e,t):o;return 0===a?l:[" / ",l]})}function w(e,n,t){function a(e){return e.label.indexOf(t)>-1}return e.findIndex(a)-n.findIndex(a)}t(937);var S=function(e){return e.join(" / ")},I=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));return t.handleChange=function(e,n){if(t.setState({inputValue:""}),n[0].__IS_FILTERED_OPTION){var a=e[0],o=n[0].path;t.setValue(a,o)}else t.setValue(e,n)},t.handlePopupVisibleChange=function(e){"popupVisible"in t.props||t.setState({popupVisible:e,inputFocused:e,inputValue:e?t.state.inputValue:""});var n=t.props.onPopupVisibleChange;n&&n(e)},t.handleInputBlur=function(){t.setState({inputFocused:!1})},t.handleInputClick=function(e){var n=t.state,a=n.inputFocused,o=n.popupVisible;(a||o)&&(e.stopPropagation(),e.nativeEvent.stopImmediatePropagation())},t.handleKeyDown=function(e){e.keyCode===g.default.BACKSPACE&&e.stopPropagation()},t.handleInputChange=function(e){var n=e.target.value;t.setState({inputValue:n})},t.setValue=function(e,n){"value"in t.props||t.setState({value:e});var a=t.props.onChange;a&&a(e,n)},t.clearSelection=function(e){e.preventDefault(),e.stopPropagation(),t.state.inputValue?t.setState({inputValue:""}):(t.setValue([]),t.handlePopupVisibleChange(!1))},t.saveInput=function(e){t.input=e},t.state={value:e.value||e.defaultValue||[],inputValue:"",inputFocused:!1,popupVisible:e.popupVisible,flattenOptions:e.showSearch&&t.flattenTree(e.options,e.changeOnSelect)},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentWillReceiveProps",value:function(e){"value"in e&&this.setState({value:e.value||[]}),"popupVisible"in e&&this.setState({popupVisible:e.popupVisible}),e.showSearch&&this.props.options!==e.options&&this.setState({flattenOptions:this.flattenTree(e.options,e.changeOnSelect)})}},{key:"getLabel",value:function(){var e=this.props,n=e.options,t=e.displayRender,a=void 0===t?S:t,o=this.state.value,l=Array.isArray(o[0])?o[0]:o,i=(0,f.default)(n,function(e,n){return e.value===l[n]});return a(i.map(function(e){return e.label}),i)}},{key:"flattenTree",value:function(e,n){var t=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=[];return e.forEach(function(e){var l=a.concat(e);!n&&e.children&&e.children.length||o.push(l),e.children&&(o=o.concat(t.flattenTree(e.children,n,l)))}),o}},{key:"generateFilteredOptions",value:function(e){var n=this,t=this.props,a=t.showSearch,o=t.notFoundContent,l=a.filter,i=void 0===l?k:l,r=a.render,s=void 0===r?x:r,u=a.sort,d=void 0===u?w:u,c=this.state,p=c.flattenOptions,f=c.inputValue,m=p.filter(function(e){return i(n.state.inputValue,e)}).sort(function(e,n){return d(e,n,f)});return m.length>0?m.map(function(n){return{__IS_FILTERED_OPTION:!0,path:n,label:s(f,n,e),value:n.map(function(e){return e.value}),disabled:n.some(function(e){return e.disabled})}}):[{label:o,value:"ANT_CASCADER_NOT_FOUND",disabled:!0}]}},{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"render",value:function(){var e,n,t,i=this.props,r=this.state,s=i.prefixCls,u=i.inputPrefixCls,d=i.children,f=i.placeholder,h=i.size,g=i.disabled,C=i.className,k=i.style,x=i.allowClear,w=i.autoFocus,S=i.showSearch,I=void 0!==S&&S,T=(0,l.default)(i,["prefixCls","inputPrefixCls","children","placeholder","size","disabled","className","style","allowClear","autoFocus","showSearch"]),P=r.value,M=(0,m.default)((e={},(0,o.default)(e,u+"-lg","large"===h),(0,o.default)(e,u+"-sm","small"===h),e)),R=(0,m.default)((0,o.default)({},s+"-input-autoFocus",w)),_=x&&!g&&P.length>0||r.inputValue?c.createElement(b.default,{type:"close-circle",className:s+"-picker-clear",onClick:this.clearSelection}):null,N=(0,m.default)((n={},(0,o.default)(n,s+"-picker-arrow",!0),(0,o.default)(n,s+"-picker-arrow-expand",r.popupVisible),n)),B=(0,m.default)(C,s+"-picker",(t={},(0,o.default)(t,s+"-picker-with-value",r.inputValue),(0,o.default)(t,s+"-picker-disabled",g),(0,o.default)(t,s+"-picker-"+h,!!h),t)),E=(0,v.default)(T,["onChange","options","popupPlacement","transitionName","displayRender","onPopupVisibleChange","changeOnSelect","expandTrigger","popupVisible","getPopupContainer","loadData","popupClassName","filterOption","renderFilteredOption","sortFilteredOption","notFoundContent"]),D=i.options;r.inputValue&&(D=this.generateFilteredOptions(s)),r.popupVisible?this.cachedOptions=D:D=this.cachedOptions;var O={};1===(D||[]).length&&"ANT_CASCADER_NOT_FOUND"===D[0].value&&(O.height="auto"),!1!==I.matchInputWidth&&r.inputValue&&this.input&&(O.width=this.input.input.offsetWidth);var F=c.createElement(b.default,{type:"pro-right"}),L=c.createElement("span",{className:s+"-menu-item-loading-icon"},c.createElement(b.default,{type:"loading"})),j=d||c.createElement("span",{style:k,className:B},c.createElement("span",{className:s+"-picker-label"},this.getLabel()),c.createElement(y.default,(0,a.default)({},E,{ref:this.saveInput,prefixCls:u,placeholder:P&&P.length>0?void 0:f,className:s+"-input "+M+" "+R,value:r.inputValue,disabled:g,readOnly:!I,autoComplete:"off",onClick:I?this.handleInputClick:void 0,onBlur:I?this.handleInputBlur:void 0,onKeyDown:this.handleKeyDown,onChange:I?this.handleInputChange:void 0})),_,c.createElement(b.default,{type:"down",className:N}));return c.createElement(p.default,(0,a.default)({},i,{options:D,value:P,popupVisible:r.popupVisible,onPopupVisibleChange:this.handlePopupVisibleChange,onChange:this.handleChange,dropdownMenuColumnStyle:O,expandIcon:F,loadingIcon:L}),j)}}]),n}(c.Component);I.propTypes={defaultValue:h.default.array,filter:h.default.bool,matchInputWidth:h.default.number,className:h.default.string,value:h.default.string,popupClassName:h.default.string,placeholder:h.default.string,size:h.default.string,disabled:h.default.bool,showSearch:h.default.bool,inputPrefixCls:h.default.string,popupVisible:h.default.bool,changeOnSelect:h.default.bool,loadData:h.default.func,onChange:h.default.func},I.defaultProps={prefixCls:"idoll-cascader",inputPrefixCls:"idoll-input",placeholder:"请选择",transitionName:"slide-up",popupPlacement:"bottomLeft",options:[],disabled:!1,allowClear:!0,notFoundContent:"暂无结果"},n.default=I},,function(e,n,t){"use strict";t(938)},function(e,n,t){},,,,,function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(25)),o=m(t(12)),l=m(t(5)),i=m(t(7)),r=m(t(3)),s=m(t(6)),u=m(t(1)),d=m(t(0)),c=m(t(8)),p=m(t(34)),f=m(t(515));function m(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.toggleOption=function(e){var n=t.state.value.indexOf(e.value),o=[].concat((0,a.default)(t.state.value));-1===n?o.push(e.value):o.splice(n,1),"value"in t.props||t.setState({value:o});var l=t.props.onChange;l&&l(o)},t.state={value:e.value||e.defaultValue||[]},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"getChildContext",value:function(){return{checkboxGroup:{toggleOption:this.toggleOption,value:this.state.value,disabled:this.props.disabled}}}},{key:"componentWillReceiveProps",value:function(e){"value"in e&&this.setState({value:e.value||[]})}},{key:"shouldComponentUpdate",value:function(e,n){return!(0,p.default)(this.props,e)||!(0,p.default)(this.state,n)}},{key:"getOptions",value:function(){return this.props.options.map(function(e){return"string"==typeof e?{label:e,value:e}:e})}},{key:"render",value:function(){var e=this,n=this.props,t=this.state,a=n.prefixCls,o=n.className,l=n.style,i=n.options,r=n.children;i&&i.length>0&&(r=this.getOptions().map(function(o){return u.default.createElement(f.default,{key:o.value,disabled:"disabled"in o?o.disabled:n.disabled,value:o.value,checked:-1!==t.value.indexOf(o.value),onChange:function(){return e.toggleOption(o)},className:a+"-item"},o.label)}));var s=(0,c.default)(a,o);return u.default.createElement("div",{className:s,style:l},r)}}]),n}(u.default.Component);h.defaultProps={options:[],prefixCls:"idoll-checkbox-group"},h.propTypes={defaultValue:d.default.array,value:d.default.array,options:d.default.array.isRequired,onChange:d.default.func},h.childContextTypes={checkboxGroup:d.default.any},n.default=h},,,,function(e,n,t){"use strict";t(22),t(949)},function(e,n,t){},,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=k(t(9)),o=k(t(12)),l=k(t(2)),i=k(t(5)),r=k(t(3)),s=k(t(7)),u=k(t(6));n.default=function(e){var n=function(n){function p(e){(0,i.default)(this,p);var n=(0,r.default)(this,(p.__proto__||(0,o.default)(p)).call(this,e));t.call(n);var a=e.value||e.defaultValue;if(a&&!(0,b.default)(c.default).isMoment(a))throw new Error("The value/defaultValue of DatePicker or MonthPicker must be a moment object after `antd@2.0`, see: https://u.ant.design/date-picker-value");return n.state={value:a,showDate:a},n}return(0,u.default)(p,n),(0,s.default)(p,null,[{key:"getDerivedStateFromProps",value:function(e,n){var t=null;return"value"in e&&(t={value:e.value},e.value!==n.value&&(t=(0,l.default)({},t,{showDate:e.value}))),t}}]),(0,s.default)(p,[{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"render",value:function(){var n,t,o=this,i=this.state,r=i.value,s=i.showDate,u=(0,g.default)(this.props,["onChange"]),p=u.prefixCls,v=u.locale,k=u.localeCode,x=u.suffixIcon,w="placeholder"in u?u.placeholder:v.lang.placeholder,S=u.showTime?u.disabledTime:null,I=(0,h.default)((n={},(0,a.default)(n,p+"-time",u.showTime),(0,a.default)(n,p+"-month",f.default===e),n));r&&k&&(0,c.default)(r).locale(k);var T={},P={},M={};u.showTime?(P={onSelect:this.handleChange},M.width=195):T={onChange:this.handleChange},"mode"in u&&(P.mode=u.mode);var R=d.default.createElement(e,(0,l.default)({},P,{disabledDate:u.disabledDate,disabledTime:S,locale:v.lang,timePicker:u.timePicker,defaultValue:u.defaultPickerValue||(0,b.default)(c.default)(),dateInputPlaceholder:w,prefixCls:p,className:I,onOk:u.onOk,dateRender:u.dateRender,format:u.format,showToday:u.showToday,monthCellContentRender:u.monthCellContentRender,renderFooter:this.renderFooter,onPanelChange:u.onPanelChange,onChange:this.handleCalendarChange,value:s})),_=!u.disabled&&u.allowClear&&r?d.default.createElement(y.default,{type:"close-circle",className:p+"-picker-clear",onClick:this.clearSelection,theme:"filled"}):null,N=x&&(d.default.isValidElement(x)?d.default.cloneElement(x,{className:(0,h.default)((t={},(0,a.default)(t,x.props.className,x.props.className),(0,a.default)(t,p+"-picker-icon",!0),t))}):d.default.createElement("span",{className:p+"-picker-icon"},x))||d.default.createElement(y.default,{type:"calendar",className:p+"-picker-icon"}),B=(0,C.default)(u);return d.default.createElement("span",{id:u.id,className:(0,h.default)(u.className,u.pickerClass),style:(0,l.default)({},M,u.style),onFocus:u.onFocus,onBlur:u.onBlur,onMouseEnter:u.onMouseEnter,onMouseLeave:u.onMouseLeave},d.default.createElement(m.default,(0,l.default)({},u,T,{calendar:R,value:r,prefixCls:p+"-picker-container",style:u.popupStyle}),function(e){var n=e.value;return d.default.createElement("div",null,d.default.createElement("input",(0,l.default)({ref:o.saveInput,disabled:u.disabled,readOnly:!0,value:n&&n.format(u.format)||"",placeholder:w,className:u.pickerInputClass},B)),_,N)}))}}]),p}(d.default.Component);n.propTypes={prefixCls:v.default.string,allowClear:v.default.bool,showToday:v.default.bool,onFocus:v.default.func,onBlur:v.default.func,onChange:v.default.func,locale:v.default.object,suffixIcon:v.default.element,style:v.default.object},n.defaultProps={prefixCls:"idoll-calendar",allowClear:!0,showToday:!1};var t=function(){var e=this;this.renderFooter=function(){var n=e.props,t=n.prefixCls,a=n.renderExtraFooter;return a?d.default.createElement("div",{className:t+"-footer-extra"},a.apply(void 0,arguments)):null},this.clearSelection=function(n){n.preventDefault(),n.stopPropagation(),e.handleChange(null)},this.handleChange=function(n){var t=e.props;"value"in t||e.setState({value:n,showDate:n}),t.onChange(n,n&&(0,c.default)(n).format(t.format)||""),e.focus()},this.handleCalendarChange=function(n){e.setState({showDate:n})},this.saveInput=function(n){e.input=n}};return(0,p.polyfill)(n),n};var d=k(t(1)),c=k(t(10)),p=t(19),f=k(t(522)),m=k(t(382)),h=k(t(8)),v=k(t(0)),g=k(t(80)),y=k(t(21)),b=k(t(119)),C=k(t(501));function k(e){return e&&e.__esModule?e:{default:e}}c.default.locale("zh_cn")},,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(9)),o=g(t(2)),l=g(t(12)),i=g(t(5)),r=g(t(7)),s=g(t(3)),u=g(t(6));n.default=function(e,n){var t,g;return g=t=function(n){function t(){var n,r,u,c;(0,i.default)(this,t);for(var f=arguments.length,g=Array(f),y=0;y<f;y++)g[y]=arguments[y];return u=(0,s.default)(this,(n=t.__proto__||(0,l.default)(t)).call.apply(n,[this].concat(g))),r=u,u.handleOpenChange=function(e){var n=u.props.onOpenChange;n(e)},u.handleFocus=function(e){var n=u.props.onFocus;n&&n(e)},u.hanldeBlur=function(e){var n=u.props.onBlur;n&&n(e)},u.handleMouseEnter=function(e){var n=u.props.onMouseEnter;n&&n(e)},u.handleMouseLeave=function(e){var n=u.props.onMouseLeave;n&&n(e)},u.savePicker=function(e){u.picker=e},u.getDefaultLocale=function(){var e=(0,o.default)({},v.default,u.props.locale);return e.lang=(0,o.default)({},e.lang,(u.props.locale||{}).lang),e},u.renderPicker=function(n,t){var l,i=u.props,r=i.prefixCls,s=i.inputPrefixCls,c=(0,m.default)(r+"-picker",(0,a.default)({},r+"-picker-"+i.size,!!i.size)),f=(0,m.default)(r+"-picker-input",s,(l={},(0,a.default)(l,s+"-lg","large"===i.size),(0,a.default)(l,s+"-sm","small"===i.size),(0,a.default)(l,s+"-disabled",i.disabled),l)),v=i.showTime&&i.showTime.format||"HH:mm:ss",g=(0,o.default)({},(0,h.generateShowHourMinutesSecond)(v),{format:v,use12Hours:i.showTime&&i.showTime.use12Hours}),y=function(e){var n=e.showHour,t=e.showMinute,a=e.showSecond,o=e.use12Hours,l=0;n&&(l+=1);t&&(l+=1);a&&(l+=1);o&&(l+=1);return l}(g),b=r+"-time-picker-column-"+y,C=i.showTime?d.default.createElement(p.default,(0,o.default)({},g,i.showTime,{prefixCls:r+"-time-picker",className:b,placeholder:n.timePickerLocale.placeholder,transitionName:"slide-up"})):null;return d.default.createElement(e,(0,o.default)({},i,{ref:u.savePicker,pickerClass:c,pickerInputClass:f,locale:n,localeCode:t,timePicker:C,onOpenChange:u.handleOpenChange,onFocus:u.handleFocus,onBlur:u.handleBlur,onMouseEnter:u.handleMouseEnter,onMouseLeave:u.handleMouseLeave}))},c=r,(0,s.default)(u,c)}return(0,u.default)(t,n),(0,r.default)(t,[{key:"componentDidMount",value:function(){var e=this.props,n=e.autoFocus,t=e.disabled;n&&!t&&this.focus()}},{key:"focus",value:function(){this.picker.focus()}},{key:"blur",value:function(){this.picker.blur()}},{key:"render",value:function(){return d.default.createElement(f.default,{ComponentName:"DatePicker",defaultLocale:this.getDefaultLocale},this.renderPicker)}}]),t}(d.default.Component),t.propTypes={format:c.default.string,transitionName:c.default.string,popupStyle:c.default.object,locale:c.default.object,prefixCls:c.default.string,inputPrefixCls:c.default.string},t.defaultProps={format:n||"YYYY-MM-DD",transitionName:"slide-up",popupStyle:{},onChange:function(){},onOpenChange:function(){},locale:{},prefixCls:"idoll-calendar",inputPrefixCls:"idoll-input"},g};var d=g(t(1)),c=g(t(0)),p=g(t(528)),f=g(t(118)),m=g(t(8)),h=t(529),v=g(t(376));function g(e){return e&&e.__esModule?e:{default:e}}t(530)},,,,,,function(e,n,t){},function(e,n,t){"use strict";t(22),t(965),t(84)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=w(t(82)),o=w(t(9)),l=w(t(12)),i=w(t(2)),r=w(t(5)),s=w(t(3)),u=w(t(7)),d=w(t(6)),c=w(t(251)),p=w(t(1)),f=w(t(10)),m=t(19),h=w(t(968)),v=w(t(382)),g=w(t(8)),y=w(t(0)),b=w(t(34)),C=w(t(21)),k=w(t(124)),x=w(t(119));function w(e){return e&&e.__esModule?e:{default:e}}function S(e){var n=(0,c.default)(e,2),t=n[0],a=n[1];if(t||a)return[t,a&&(0,f.default)(a).isSame(t,"month")?(0,f.default)(a).clone().add(1,"month"):a]}function I(e,n){return e&&(0,f.default)(e).format(n)||""}function T(e){if(e)return Array.isArray(e)?e:[e,(0,f.default)(e).clone().add(1,"month")]}function P(e,n){n&&e&&0!==e.length&&(e[0]&&(0,f.default)(e[0]).locale(n),e[1]&&(0,f.default)(e[1]).locale(n))}var M=function(e){function n(e){(0,r.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));R.call(t);var a=e.value||e.defaultValue||[];if(a[0]&&!(0,x.default)(f.default).isMoment(a[0])||a[1]&&!(0,x.default)(f.default).isMoment(a[1]))throw new Error("The value/defaultValue of RangePicker must be a moment object array after `antd@2.0`, see: https://u.ant.design/date-picker-value");var o,i=a&&(o=a,!Array.isArray(o)||0!==o.length&&!o.every(function(e){return!e}))?a:e.defaultPickerValue;return t.state={value:a,showDate:T(i||(0,x.default)(f.default)()),open:e.open,hoverValue:[]},t}return(0,d.default)(n,e),(0,u.default)(n,null,[{key:"getDerivedStateFromProps",value:function(e,n){var t=null;if("value"in e){var a=e.value||[];t={value:a},(0,b.default)(e.value,n.value)||(t=(0,i.default)({},t,{showDate:S(a)||n.showDate}))}return"open"in e&&n.open!==e.open&&(t=(0,i.default)({},t,{open:e.open})),t}}]),(0,u.default)(n,[{key:"setValue",value:function(e,n){this.handleChange(e),!n&&this.props.showTime||"open"in this.props||this.setState({open:!1})}},{key:"focus",value:function(){this.picker.focus()}},{key:"blur",value:function(){this.picker.blur()}},{key:"render",value:function(){var e,n,t=this,a=this.state,l=this.props,r=a.value,s=a.showDate,u=a.hoverValue,d=a.open,c=l.prefixCls,m=l.popupStyle,y=l.style,b=l.disabledDate,k=l.disabledTime,x=l.showTime,w=l.showToday,S=l.ranges,I=l.onOk,T=l.locale,M=l.localeCode,R=l.format,_=l.dateRender,N=l.onCalendarChange,B=l.suffixIcon;P(r,M),P(s,M);var E=(0,g.default)((e={},(0,o.default)(e,c+"-time",x),(0,o.default)(e,c+"-range-with-ranges",S),e)),D={onChange:this.handleChange},O={onOk:this.handleChange};l.timePicker?D.onChange=function(e){return t.handleChange(e)}:O={},"mode"in l&&(O.mode=l.mode);var F="placeholder"in l?l.placeholder[0]:T.lang.rangePlaceholder[0],L="placeholder"in l?l.placeholder[1]:T.lang.rangePlaceholder[1],j=p.default.createElement(h.default,(0,i.default)({},O,{onChange:N,format:R,prefixCls:c,className:E,renderFooter:this.renderFooter,timePicker:l.timePicker,disabledDate:b,disabledTime:k,dateInputPlaceholder:[F,L],locale:T.lang,onOk:I,dateRender:_,value:s,onValueChange:this.handleShowDateChange,hoverValue:u,onHoverChange:this.handleHoverChange,onPanelChange:l.onPanelChange,showToday:w,onInputSelect:this.handleCalendarInputSelect})),A={};l.showTime&&(A.width=y&&y.width||350);var V=!l.disabled&&l.allowClear&&r&&(r[0]||r[1])?p.default.createElement(C.default,{type:"close-circle",className:c+"-picker-clear",onClick:this.clearSelection,theme:"filled"}):null,z=B&&(p.default.isValidElement(B)?p.default.cloneElement(B,{className:(0,g.default)((n={},(0,o.default)(n,B.props.className,B.props.className),(0,o.default)(n,c+"-picker-icon",!0),n))}):p.default.createElement("span",{className:c+"-picker-icon"},B))||p.default.createElement(C.default,{type:"calendar",className:c+"-picker-icon"});return p.default.createElement("span",{ref:this.savePicker,id:l.id,className:(0,g.default)(l.className,l.pickerClass),style:(0,i.default)({},y,A),tabIndex:l.disabled?-1:0,onFocus:l.onFocus,onBlur:l.onBlur,onMouseEnter:l.onMouseEnter,onMouseLeave:l.onMouseLeave},p.default.createElement(v.default,(0,i.default)({},l,D,{calendar:j,value:r,open:d,onOpenChange:this.handleOpenChange,prefixCls:c+"-picker-container",style:m}),function(e){var n=e.value,t=n[0],a=n[1];return p.default.createElement("span",{className:l.pickerInputClass},p.default.createElement("input",{disabled:l.disabled,readOnly:!0,value:t&&(0,f.default)(t).format(l.format)||"",placeholder:F,className:c+"-range-picker-input",tabIndex:-1}),p.default.createElement("span",{className:c+"-range-picker-separator"}," ~ "),p.default.createElement("input",{disabled:l.disabled,readOnly:!0,value:a&&(0,f.default)(a).format(l.format)||"",placeholder:L,className:c+"-range-picker-input",tabIndex:-1}),V,z)}))}}]),n}(p.default.Component);M.propTypes={prefixCls:y.default.string,tagPrefixCls:y.default.string,allowClear:y.default.bool,showToday:y.default.bool,open:y.default.bool,onFocus:y.default.func,onBlur:y.default.func,popupStyle:y.default.object,style:y.default.object,disabledDate:y.default.func,disabledTime:y.default.func,showTime:y.default.oneOfType([y.default.object,y.default.bool]),onOk:y.default.func,locale:y.default.object,format:y.default.string,onCalendarChange:y.default.func,suffixIcon:y.default.element},M.defaultProps={prefixCls:"idoll-calendar",tagPrefixCls:"idoll-tag",allowClear:!0,showToday:!1};var R=function(){var e=this;this.clearSelection=function(n){n.preventDefault(),n.stopPropagation(),e.setState({value:[]}),e.handleChange([])},this.clearHoverValue=function(){return e.setState({hoverValue:[]})},this.handleChange=function(n){var t=e.props;"value"in t||e.setState(function(e){var t=e.showDate;return{value:n,showDate:S(n)||t}}),t.onChange(n,[I(n[0],t.format),I(n[1],t.format)]),e.focus()},this.handleOpenChange=function(n){"open"in e.props||e.setState({open:n}),!1===n&&e.clearHoverValue();var t=e.props.onOpenChange;t&&t(n)},this.handleShowDateChange=function(n){return e.setState({showDate:n})},this.handleHoverChange=function(n){return e.setState({hoverValue:n})},this.handleRangeMouseLeave=function(){e.state.open&&e.clearHoverValue()},this.handleCalendarInputSelect=function(n){n[0]&&e.setState(function(e){var t=e.showDate;return{value:n,showDate:S(n)||t}})},this.handleRangeClick=function(n){"function"==typeof n&&(n=n()),e.setValue(n,!0);var t=e.props,a=t.onOk,o=t.onOpenChange;a&&a(n),o&&o(!1)},this.savePicker=function(n){e.picker=n},this.renderFooter=function(){var n=e.props,t=n.prefixCls,o=n.ranges,l=n.renderExtraFooter,i=n.tagPrefixCls;if(!o&&!l)return null;var r=l?p.default.createElement("div",{className:t+"-footer-extra",key:"extra"},l.apply(void 0,arguments)):null,s=(0,a.default)(o||{}).map(function(n){var t=o[n];return p.default.createElement(k.default,{key:n,prefixCls:i,color:"rgba(0, 191, 255, 0.3)",onClick:function(){return e.handleRangeClick(t)},onMouseEnter:function(){return e.setState({hoverValue:t})},onMouseLeave:e.handleRangeMouseLeave},n)});return[s&&s.length>0?p.default.createElement("div",{className:t+"-footer-extra "+t+"-range-quick-selector",key:"range"},s):null,r]}};(0,m.polyfill)(M),n.default=M},,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(25)),o=m(t(12)),l=m(t(5)),i=m(t(7)),r=m(t(3)),s=m(t(6)),u=m(t(1)),d=m(t(532)),c=m(t(245)),p=m(t(21)),f=m(t(0));function m(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function n(){var e,t,i,s;(0,l.default)(this,n);for(var u=arguments.length,d=Array(u),c=0;c<u;c++)d[c]=arguments[c];return t=i=(0,r.default)(this,(e=n.__proto__||(0,o.default)(n)).call.apply(e,[this].concat(d))),i.state={tags:i.props.tags||["电影","书籍","音乐"],inputVisible:!1,inputValue:"",id:i.props.id||0,text:i.props.text||"添加",iconType:i.props.iconType||"plus"},i.handleClose=function(e){var n=i.state.tags.filter(function(n){return n!==e});i.setState({tags:n})},i.showInput=function(){i.setState({inputVisible:!0},function(){return i.input.focus()})},i.handleInputChange=function(e){i.setState({inputValue:e.target.value})},i.handleInputConfirm=function(){var e=i.state.inputValue,n=i.state.tags;e&&-1===n.indexOf(e)&&(n=[].concat((0,a.default)(n),[e])),i.setState({tags:n,inputVisible:!1,inputValue:""})},i.saveInputRef=function(e){i.input=e},s=t,(0,r.default)(i,s)}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){var e=this,n=this.state,t=n.tags,a=n.inputVisible,o=n.inputValue;return u.default.createElement("div",{className:"group"},t.map(function(n,t){return u.default.createElement(d.default,{key:n,closable:t!==e.state.id,afterClose:function(){return e.handleClose(n)}},n)}),a&&u.default.createElement(c.default,{ref:this.saveInputRef,type:"text",size:"small",style:{width:78},value:o,onChange:this.handleInputChange,onBlur:this.handleInputConfirm,onPressEnter:this.handleInputConfirm}),!a&&u.default.createElement(d.default,{className:"sdfsf",style:{borderStyle:"dashed"},onClick:this.showInput},u.default.createElement(p.default,{type:this.state.iconType}),u.default.createElement("div",{style:{marginLeft:"4px"}},this.state.text)))}}]),n}(u.default.Component);h.propTypes={id:f.default.number,tags:f.default.array,text:f.default.string,iconType:f.default.string},n.default=h},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=b(t(2)),o=b(t(9)),l=b(t(12)),i=b(t(5)),r=b(t(3)),s=b(t(7)),u=b(t(6)),d=b(t(1)),c=b(t(10)),p=t(19),f=b(t(582)),m=b(t(382)),h=b(t(8)),v=b(t(0)),g=b(t(21)),y=b(t(119));function b(e){return e&&e.__esModule?e:{default:e}}var C=function(e){function n(e){(0,i.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));k.call(t);var a=e.value||e.defaultValue;if(a&&!(0,y.default)(c.default).isMoment(a))throw new Error("The value/defaultValue of DatePicker or MonthPicker must be ","see: https://u.ant.design/date-picker-value");return t.state={value:a},t}return(0,u.default)(n,e),(0,s.default)(n,null,[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value}:null}}]),(0,s.default)(n,[{key:"focus",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"render",value:function(){var e,n=this,t=this.props,l=t.prefixCls,i=t.className,r=t.disabled,s=t.pickerClass,u=t.popupStyle,p=t.pickerInputClass,v=t.format,y=t.allowClear,b=t.locale,C=t.localeCode,k=t.disabledDate,x=t.style,w=t.onFocus,S=t.onBlur,I=t.id,T=t.suffixIcon,P=this.state.value;P&&C&&(0,c.default)(P).locale(C);var M="placeholder"in this.props?this.props.placeholder:b.lang.placeholder,R=d.default.createElement(f.default,{showWeekNumber:!0,dateRender:this.weekDateRender,prefixCls:l,format:v,locale:b.lang,showDateInput:!1,showToday:!1,disabledDate:k}),_=!r&&y&&this.state.value?d.default.createElement(g.default,{type:"close-circle",className:l+"-picker-clear",onClick:this.clearSelection,theme:"filled"}):null,N=T&&(d.default.isValidElement(T)?d.default.cloneElement(T,{className:(0,h.default)((e={},(0,o.default)(e,T.props.className,T.props.className),(0,o.default)(e,l+"-picker-icon",!0),e))}):d.default.createElement("span",{className:l+"-picker-icon"},T))||d.default.createElement(g.default,{type:"calendar",className:l+"-picker-icon"});return d.default.createElement("span",{className:(0,h.default)(i,s),style:x,id:I},d.default.createElement(m.default,(0,a.default)({},this.props,{calendar:R,prefixCls:l+"-picker-container",value:P,onChange:this.handleChange,style:u}),function(e){var t=e.value;return d.default.createElement("span",null,d.default.createElement("input",{ref:n.saveInput,disabled:r,readOnly:!0,value:t&&(0,c.default)(t).format(v)||"",placeholder:M,className:p,onFocus:w,onBlur:S}),_,N)}))}}]),n}(d.default.Component);C.propTypes={format:v.default.string,allowClear:v.default.bool,prefixCls:v.default.string,className:v.default.string,disabled:v.default.bool,pickerClass:v.default.string,popupStyle:v.default.object,style:v.default.object,suffixIcon:v.default.element,onFocus:v.default.func,onBlur:v.default.func,disabledDate:v.default.func,locale:v.default.object,localeCode:v.default.object},C.defaultProps={format:"gggg-wo",allowClear:!0};var k=function(){var e=this;this.weekDateRender=function(n){var t=e.state.value,a=e.props.prefixCls;return t&&(0,c.default)(n).year()===(0,c.default)(t).year()&&(0,c.default)(n).week()===(0,c.default)(t).week()?d.default.createElement("div",{className:a+"-selected-day"},d.default.createElement("div",{className:a+"-date"},(0,c.default)(n).date())):d.default.createElement("div",{className:a+"-date"},(0,c.default)(n).date())},this.handleChange=function(n){"value"in e.props||e.setState({value:n}),e.props.onChange(n,function(e,n){return e&&(0,c.default)(e).format(n)||""}(n,e.props.format)),e.focus()},this.clearSelection=function(n){n.preventDefault(),n.stopPropagation(),e.handleChange(null)},this.saveInput=function(n){e.input=n}};(0,p.polyfill)(C),n.default=C},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=u(t(2)),o=u(t(9)),l=u(t(13)),i=u(t(1)),r=u(t(8)),s=u(t(0));function u(e){return e&&e.__esModule?e:{default:e}}t(975);var d=function(e){var n,t=e.prefixCls,s=void 0===t?"idoll":t,u=e.type,d=void 0===u?"horizontal":u,c=e.orientation,p=void 0===c?"":c,f=e.className,m=e.children,h=e.dashed,v=(0,l.default)(e,["prefixCls","type","orientation","className","children","dashed"]),g=p.length>0?"-"+p:p,y=(0,r.default)(f,s+"-divider",s+"-divider-"+d,(n={},(0,o.default)(n,s+"-divider-with-text"+g,m),(0,o.default)(n,s+"-divider-dashed",!!h),n));return i.default.createElement("div",(0,a.default)({className:y},v),m&&i.default.createElement("span",{className:s+"-divider-inner-text"},m))};d.propTypes={prefixCls:s.default.string,type:s.default.string,className:s.default.string,dashed:s.default.bool,style:s.default.object},n.default=d},function(e,n,t){"use strict";t(976)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(9)),l=g(t(13)),i=g(t(12)),r=g(t(5)),s=g(t(7)),u=g(t(3)),d=g(t(6)),c=g(t(1)),p=g(t(59)),f=g(t(21)),m=t(0),h=g(t(384)),v=g(t(8));function g(e){return e&&e.__esModule?e:{default:e}}var y=p.default.Group,b=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.state={visible:!1},a.onChange=function(e){a.setState({visible:e})},a.onClickChange=function(e){a.setState({visible:e.item.props.isSelected})},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.type,i=n.disabled,r=n.children,s=n.prefixCls,u=n.className,d=n.overlay,m=n.trigger,g=n.size,b=n.align,C=n.visible,k=n.placement,x=n.getPopupContainer,w=(0,l.default)(n,["type","disabled","children","prefixCls","className","overlay","trigger","size","align","visible","placement","getPopupContainer"]),S={align:b,overlay:d,trigger:i?[]:m,placement:k,getPopupContainer:x},I=(0,v.default)((e={className:u,placement:"bottomLeft"},(0,o.default)(e,s,!0),(0,o.default)(e,s+"-disabled",i),e));return"visible"in this.props&&(S.visible=C),c.default.createElement(y,(0,a.default)({},w,{className:I}),c.default.createElement(h.default,(0,a.default)({onOverlayClick:this.onClickChange,disabled:i},S,{onVisibleChange:this.onChange}),c.default.createElement(p.default,{type:t,size:g,disabled:i},r,c.default.createElement(f.default,{type:"down"}))))}}]),n}(c.default.Component);b.propTypes={type:m.PropTypes.string,trigger:m.PropTypes.array,overlay:m.PropTypes.any,disabled:m.PropTypes.bool,onClick:m.PropTypes.func,visible:m.PropTypes.bool,placement:m.PropTypes.string,size:m.PropTypes.string},b.defaultProps={placement:"bottomLeft",prefixCls:"idoll-dropdown-button"},n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(13)),i=h(t(12)),r=h(t(5)),s=h(t(7)),u=h(t(3)),d=h(t(6)),c=h(t(1)),p=h(t(21)),f=h(t(384)),m=h(t(8));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.state={visible:!1},a.onChange=function(e){a.setState({visible:e})},a.onClickChange=function(e){a.setState({visible:e.item.props.isSelected})},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e=this.props,n=e.children,t=e.className,i=e.overlay,r=e.trigger,s=e.align,u=(0,l.default)(e,["children","className","overlay","trigger","align"]),d=(0,m.default)((0,o.default)({"idoll-dropdown-normal":!0},t,!!t));return c.default.createElement(f.default,(0,a.default)({onOverlayClick:this.onClickChange},u,{className:d,align:s,overlay:i,trigger:r,onVisibleChange:this.onChange}),c.default.createElement("a",{href:"#"},n,c.default.createElement(p.default,{type:"down"})))}}]),n}(c.default.Component);n.default=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(13)),o=v(t(2)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=v(t(1)),c=v(t(0)),p=v(t(1358)),f=v(t(54)),m=v(t(8)),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(981);var g=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.close=function(e){if(void 0!==t.props.visible)return t.props.onClose&&t.props.onClose(e),!1},t.maskClick=function(e){t.props.maskClosable&&t.close(e)},t.push=function(){t.setState({push:!0})},t.pull=function(){t.setState({push:!1})},t.onDestoryTransitionEnd=function(){t.getDestoryOnClose()&&(t.props.visible||(t.destoryClose=!0,t.forceUpdate()))},t.getDestoryOnClose=function(){return t.props.destroyOnClose&&!t.props.visible},t.getPushTransform=function(e){return"left"===e||"right"===e?"translateX("+("left"===e?180:-180)+"px)":"top"===e||"bottom"===e?"translateY("+("top"===e?180:-180)+"px)":void 0},t.renderBody=function(){if(t.destoryClose&&!t.props.visible)return null;t.destoryClose=!1;var e=t.props.placement,n="left"===e||"right"===e?{overflow:"auto",height:"100%"}:{};t.getDestoryOnClose()&&(n.opacity=0,n.transition="opacity .3s");var a=t.props,o=a.prefixCls,l=a.title,i=a.closable,r=void 0;l&&(r=d.default.createElement("div",{className:o+"-header"},d.default.createElement("div",{className:o+"-title"},l)));var s=void 0;return i&&(s=d.default.createElement("button",{onClick:t.close,"aria-label":"Close",className:o+"-close"},d.default.createElement("span",{className:o+"-close-x"},d.default.createElement(h.default,{type:"close"})))),d.default.createElement("div",{className:o+"-wrapper-body",style:n,onTransitionEnd:t.onDestoryTransitionEnd},r,s,d.default.createElement("div",{className:o+"-body",style:t.props.style},t.props.children))},t.getRcDrawerStyle=function(){var e=t.props,n=e.zIndex,a=e.placement,l=e.maskStyle;return t.state.push?(0,o.default)({},l,{zIndex:n,transform:t.getPushTransform(a)}):(0,o.default)({},l,{zIndex:n})},t.state={push:!1},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidUpdate",value:function(e){e.visible!==this.props.visible&&this.parentDrawer&&(this.props.visible?this.parentDrawer.push():this.parentDrawer.pull())}},{key:"render",value:function(){var e=this.props,n=e.placement,t=e.className,l=e.wrapClassName,i=e.width,r=e.height,s=(0,a.default)(e,["placement","className","wrapClassName","width","height"]);(0,f.default)(void 0===l,"wrapClassName is deprecated, please use className instead.");var u=s.mask?"":"no-mask",c={};return"left"===n||"right"===n?c.width=i:c.height=r,d.default.createElement(p.default,(0,o.default)({handler:!1},s,c,{open:this.props.visible,onMaskClick:this.maskClick,showMask:this.props.mask,placement:n,style:this.getRcDrawerStyle(),className:(0,m.default)(l,t,u)}),this.renderBody())}}]),n}(d.default.Component);g.propTypes={closable:c.default.bool,destroyOnClose:c.default.bool,getContainer:c.default.oneOfType([c.default.string,c.default.object,c.default.func,c.default.bool]),maskClosable:c.default.bool,mask:c.default.bool,maskStyle:c.default.object,style:c.default.object,title:c.default.node,visible:c.default.bool,width:c.default.oneOfType([c.default.string,c.default.number]),zIndex:c.default.number,prefixCls:c.default.string,placement:c.default.string,onClose:c.default.func,className:c.default.string},g.defaultProps={prefixCls:"idoll-drawer",width:256,height:256,closable:!0,placement:"right",maskClosable:!0,mask:!0,level:null},n.default=g},function(e,n,t){"use strict";t(982),t(239)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=C(t(2)),o=C(t(9)),l=C(t(12)),i=C(t(5)),r=C(t(7)),s=C(t(3)),u=C(t(6)),d=C(t(1)),c=C(t(0)),p=C(t(8)),f=C(t(984)),m=C(t(539)),h=C(t(181)),v=C(t(80)),g=C(t(125)),y=C(t(540)),b=t(541);function C(e){return e&&e.__esModule?e:{default:e}}t(1036);var k=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return(0,g.default)(!e.form),t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"shouldComponentUpdate",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return h.default.shouldComponentUpdate.apply(this,n)}},{key:"getChildContext",value:function(){return{vertical:"vertical"===this.props.layout}}},{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,l=n.hideRequiredMark,i=n.className,r=void 0===i?"":i,s=n.layout,u=(0,p.default)(t,(e={},(0,o.default)(e,t+"-horizontal","horizontal"===s),(0,o.default)(e,t+"-vertical","vertical"===s),(0,o.default)(e,t+"-inline","inline"===s),(0,o.default)(e,t+"-hide-required-mark",l),e),r),c=(0,v.default)(this.props,["prefixCls","className","layout","form","hideRequiredMark"]);return d.default.createElement("form",(0,a.default)({},c,{className:u}))}}]),n}(d.default.Component);k.defaultProps={prefixCls:"idoll-form",layout:"horizontal",hideRequiredMark:!0,onSubmit:function(e){e.preventDefault()}},k.propTypes={prefixCls:c.default.string,children:c.default.any,onSubmit:c.default.func,hideRequiredMark:c.default.bool},k.childContextTypes={vertical:c.default.bool},k.Item=y.default,k.createFormField=m.default,k.create=function(e){return(0,f.default)((0,a.default)({fieldNameProp:"id"},e,{fieldMetaProp:b.FIELD_META_PROP,fieldDataProp:b.FIELD_DATA_PROP}))},n.default=k},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){},function(e,n,t){"use strict";t(22),t(1037),t(182)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=v(t(1)),p=v(t(0)),f=v(t(8)),m=v(t(1357)),h=v(t(21));function v(e){return e&&e.__esModule?e:{default:e}}t(1039);var g=function(e){function n(){var e,t,a,o;(0,r.default)(this,n);for(var l=arguments.length,s=Array(l),d=0;d<l;d++)s[d]=arguments[d];return t=a=(0,u.default)(this,(e=n.__proto__||(0,i.default)(n)).call.apply(e,[this].concat(s))),a.focus=function(){a.inputNumberRef.focus()},a.blur=function(){a.inputNumberRef.blur()},o=t,(0,u.default)(a,o)}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this,t=this.props,i=t.className,r=t.size,s=(0,l.default)(t,["className","size"]),u=(0,f.default)((e={},(0,o.default)(e,this.props.prefixCls+"-lg","large"===r),(0,o.default)(e,this.props.prefixCls+"-sm","small"===r),e),i),d=c.default.createElement(h.default,{type:"up",className:this.props.prefixCls+"-handle-up-inner"}),p=c.default.createElement(h.default,{type:"down",className:this.props.prefixCls+"-handle-down-inner"});return c.default.createElement(m.default,(0,a.default)({ref:function(e){n.inputNumberRef=e},className:u,upHandler:d,downHandler:p},s))}}]),n}(c.default.Component);g.propTypes={defaultValue:p.default.number,disabled:p.default.bool,min:p.default.number,max:p.default.number,parser:p.default.func,precision:p.default.number,size:p.default.oneOf(["small","default","large"]),step:p.default.number},g.defaultProps={prefixCls:"idoll-input-number",step:1},n.default=g},function(e,n,t){"use strict";t(1040),t(22)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(2)),o=s(t(82)),l=s(t(1)),i=s(t(0)),r=s(t(8));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){var n=e.children,t=e.className,i=[];n&&n.length&&(i=n.filter(function(e){return-1!==(0,o.default)(e.type.propTypes).indexOf("collapsed")}));var s=(0,r.default)({"idoll-layout":"idoll-layout","idoll-layout-has-sider":i.length},t);return l.default.createElement("div",(0,a.default)({},e,{className:s}),n)}t(126),u.propTypes={children:i.default.node},n.default=u},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(28)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=t(1),p=v(c),f=v(t(0)),m=v(t(8)),h=v(t(174));function v(e){return e&&e.__esModule?e:{default:e}}t(126);var g=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e)),a=void 0;return a="collapsed"in e&&e.collapsed,t.state={collapsed:a},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentWillReceiveProps",value:function(e){"collapsed"in e&&this.setState({collapsed:e.collapsed})}},{key:"render",value:function(){var e=this.props,n=e.span,t=e.children,i=e.collapsed,r=e.onCollapse,s=void 0;"number"==typeof n?s=n:"object"===(void 0===n?"undefined":(0,l.default)(n))&&(s=i?n.fold:n.unfold),r&&r(i);var u=(0,m.default)((0,o.default)({"idoll-layout-sider":"doll-layout-sider"},"idoll-layout-sider-"+s,s)),d=(0,h.default)(this.props,["span","collapsed","onCollapse"]);return p.default.createElement("div",(0,a.default)({},d,{className:u}),t)}}]),n}(c.Component);g.propTypes={span:f.default.oneOfType([f.default.number,f.default.object]),collapsed:f.default.bool,children:f.default.node,onCollapse:f.default.func},n.default=g},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(2)),o=s(t(9)),l=s(t(1)),i=s(t(0)),r=s(t(8));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){var n=e.span,t=e.children,i=e.className,s=(0,r.default)((0,o.default)({"idoll-layout-header":"idoll-layout-header"},"idoll-layout-header-"+n,n),i);return l.default.createElement("div",(0,a.default)({},e,{className:s}),t)}t(126),u.propTypes={span:i.default.number,children:i.default.node},n.default=u},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(1)),o=i(t(8)),l=i(t(0));function i(e){return e&&e.__esModule?e:{default:e}}function r(e){var n=e.children,t=e.className,l=(0,o.default)({"idoll-layout-content":"idoll-layout-content"},t);return a.default.createElement("div",{className:l},n)}t(126),r.propTypes={children:l.default.node},n.default=r},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(2)),o=r(t(1)),l=r(t(8)),i=r(t(0));function r(e){return e&&e.__esModule?e:{default:e}}function s(e){var n=e.children,t=e.className,i=(0,l.default)({"idoll-layout-footer":"idoll-layout-footer"},t);return o.default.createElement("div",(0,a.default)({},e,{className:i}),n)}t(126),s.propTypes={children:i.default.node},n.default=s},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(1048)),o=i(t(1056)),l=i(t(546));function i(e){return e&&e.__esModule?e:{default:e}}a.default.Item=o.default,a.default.Meta=l.default,n.default=a.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(9)),l=g(t(13)),i=g(t(12)),r=g(t(5)),s=g(t(7)),u=g(t(3)),d=g(t(6)),c=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),p=g(t(0)),f=g(t(8)),m=t(44),h=t(127),v=g(t(128));function g(e){return e&&e.__esModule?e:{default:e}}t(1053);var y=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));return t.renderItem=function(e,n){var a=t.props,o=a.dataSource,l=a.renderItem,i=a.rowKey,r=void 0;return(r="function"==typeof i?i(o[n]):"string"==typeof i?o[i]:o.key)||(r="list-item-"+n),t.keys[n]=r,l(e,n)},t.keys={},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"isSomethingAfterLastTtem",value:function(){var e=this.props,n=e.loadMore,t=e.pagination,a=e.footer;return!!(n||t||a)}},{key:"getChildContext",value:function(){return{grid:this.props.grid}}},{key:"render",value:function(){var e,n=this,t=this.props,i=t.bordered,r=t.split,s=t.className,u=t.children,d=t.itemLayout,p=t.loadMore,g=t.prefixCls,y=t.grid,b=t.dataSource,C=t.size,k=t.renderItem,x=t.pagination,w=t.header,S=t.footer,I=t.loading,T=(0,l.default)(t,["bordered","split","className","children","itemLayout","loadMore","prefixCls","grid","dataSource","size","renderItem","pagination","header","footer","loading"]),P=I;"boolean"==typeof P&&(P={spinning:P});var M=P&&P.spinning,R="";R="large"===C?"lg":"small"===C?"sm":"";var _=(0,f.default)(g,s,(e={},(0,o.default)(e,g+"-vertical","vertical"===d),(0,o.default)(e,g+"-"+R,R),(0,o.default)(e,g+"-split",r),(0,o.default)(e,g+"-bordered",i),(0,o.default)(e,g+"-loading",M),(0,o.default)(e,g+"-grid",y),(0,o.default)(e,g+"-something-after-last-item",this.isSomethingAfterLastTtem()),e)),N=c.createElement("div",{className:g+"-pagination"},c.createElement(v.default,x)),B=void 0;if(B=M&&c.createElement("div",{style:{minHeight:53}}),b.length>0){var E=b.map(function(e,t){return n.renderItem(e,t)}),D=c.Children.map(E,function(e,t){return c.cloneElement(e,{key:n.keys[t]})});B=y?c.createElement(m.Row,{gutter:y.gutter},D):D}else u||M||(B=c.createElement("div",null,console.info(k)));var O=c.createElement("div",null,c.createElement(h.Spin,P,B),p,!p&&x?N:null);return c.createElement("div",(0,a.default)({className:_},T),w&&c.createElement("div",{className:g+"-header"},w),O,u,S&&c.createElement("div",{className:g+"-footer"},S))}}]),n}(c.Component);y.childContextTypes={grid:p.default.any},y.PropTypes={bordered:p.default.bool,prefixCls:p.default.string,header:p.default.node,footer:p.default.node,className:p.default.string,dataSource:p.default.array,children:p.default.node,loading:p.default.bool,grid:p.default.any,pagination:p.default.any,renderItem:p.default.any,size:p.default.string,split:p.default.bool,id:p.default.string},y.defaultProps={dataSource:[],prefixCls:"idoll-list",bordered:!1,split:!0,loading:!1,pagination:!1},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(3)),u=v(t(7)),d=v(t(6)),c=v(t(1)),p=v(t(0)),f=v(t(8)),m=v(t(27)),h=v(t(80));function v(e){return e&&e.__esModule?e:{default:e}}var g=null;function y(e,n){return!!e&&!!n&&!isNaN(Number(n))}var b=function(e){function n(e){(0,r.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));C.call(t);var a=e.spinning,o=e.delay;return t.state={spinning:a&&!y(a,o)},t}return(0,d.default)(n,e),(0,u.default)(n,null,[{key:"setDefaultIndicator",value:function(e){g=e}}]),(0,u.default)(n,[{key:"isNestedPattern",value:function(){return!(!this.props||!this.props.children)}},{key:"componentDidMount",value:function(){var e=this.props,n=e.spinning,t=e.delay;y(n,t)&&(this.shouldTimeout=window.setTimeout(this.delayUpdateSpinning,t))}},{key:"componentWillUnmount",value:function(){this.debounceTimeout&&clearTimeout(this.debounceTimeout),this.delayTimeout&&clearTimeout(this.delayTimeout)}},{key:"componentDidUpdate",value:function(){var e=this,n=this,t=this.state.spinning,a=this.props.spinning;if(t===a)return!1;var o=this.props.delay;this.debounceTimeout&&clearTimeout(this.debounceTimeout),t&&!a?(this.debounceTimeout=window.setTimeout(function(){return e.setState({spinning:a})},200),this.delayTimeout&&clearTimeout(this.delayTimeout)):y(a,o)?(this.delayTimeout&&clearTimeout(this.delayTimeout),this.delayTimeout=window.setTimeout(this.delayUpdateSpinning,o)):n.setState({spinning:a})}},{key:"render",value:function(){var e,n=this.props,t=n.className,i=n.size,r=n.prefixCls,s=n.tip,u=n.wrapperClassName,d=(0,l.default)(n,["className","size","prefixCls","tip","wrapperClassName"]),p=this.state.spinning,v=(0,f.default)(r,(e={},(0,o.default)(e,r+"-sm","small"===i),(0,o.default)(e,r+"-lg","large"===i),(0,o.default)(e,r+"-spinning",p),(0,o.default)(e,r+"-show-text",!!s),e),t),y=(0,h.default)(d,["spinning","delay","indicator"]),b=c.default.createElement("div",(0,a.default)({},y,{className:v}),function(e){var n=e.prefixCls,t=e.indicator,a=e.color,o=n+"-dot";return c.default.isValidElement(t)?c.default.cloneElement(t,{className:(0,f.default)(t.props.className,o)}):c.default.isValidElement(g)?c.default.cloneElement(g,{className:(0,f.default)(g.props.className,o)}):c.default.createElement("span",{className:(0,f.default)(o,n+"-dot-spin")},c.default.createElement("i",{style:{borderColor:a?a.join(" "):""}}))}(this.props),s?c.default.createElement("div",{className:r+"-text"},s):null);if(this.isNestedPattern()){var C,k=r+"-nested-loading";u&&(k+=" "+u);var x=(0,f.default)((C={},(0,o.default)(C,r+"-container",!0),(0,o.default)(C,r+"-blur",p),C));return c.default.createElement(m.default,(0,a.default)({},y,{component:"div",className:k,style:null,transitionName:"fade"}),p&&c.default.createElement("div",{key:"loading"},b),c.default.createElement("div",{className:x,key:"container"},this.props.children))}return b}}]),n}(c.default.Component);b.defaultProps={prefixCls:"idoll-spin",spinning:!0,size:"default",wrapperClassName:""},b.propTypes={prefixCls:p.default.string,className:p.default.string,spinning:p.default.bool,size:p.default.oneOf(["default","small","large"]),wrapperClassName:p.default.string,indicator:p.default.node};var C=function(){var e=this;this.delayUpdateSpinning=function(){var n=e.props.spinning;e.state.spinning!==n&&e.setState({spinning:n})}};n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(13)),l=g(t(12)),i=g(t(5)),r=g(t(7)),s=g(t(3)),u=g(t(6)),d=g(t(1)),c=t(0),p=g(t(1354)),f=g(t(8)),m=g(t(83)),h=g(t(542)),v=g(t(1051));function g(e){return e&&e.__esModule?e:{default:e}}t(544);var y=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e=this.props,n=e.size,t=e.className,l=(0,o.default)(e,["size","className"]),i="small"===n,r=void 0;return r=this.context.idollLocale&&this.context.idollLocale.Pagination?this.context.idollLocale.Pagination:this.props.locale,d.default.createElement(p.default,(0,a.default)({selectComponentClass:i?h.default:m.default,className:(0,f.default)(t,{mini:i}),locale:r},l))}}]),n}(d.default.Component);y.defaultProps={locale:v.default,className:"",prefixCls:"idoll-pagination",selectPrefixCls:"idoll-select"},y.propTypes={current:c.PropTypes.number,defaultCurrent:c.PropTypes.number,defaultPageSizecurrent:c.PropTypes.number,pageSize:c.PropTypes.number,total:c.PropTypes.number,showQuickJumper:c.PropTypes.bool,showTitle:c.PropTypes.bool,showSizeChanger:c.PropTypes.bool,simple:c.PropTypes.bool,pageSizeOptions:c.PropTypes.array,showTotal:c.PropTypes.function,onChange:c.PropTypes.function,icon:c.PropTypes.function,onShowSizeChange:c.PropTypes.function},y.contextTypes={idollLocale:c.PropTypes.object},n.default=y},function(e,n,t){"use strict";e.exports=t(543)},function(e,n,t){},function(e,n,t){"use strict";t(1054),t(545),t(182)},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(2)),o=v(t(9)),l=v(t(13)),i=v(t(12)),r=v(t(5)),s=v(t(7)),u=v(t(3)),d=v(t(6)),c=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),p=v(t(0)),f=v(t(8)),m=t(44),h=v(t(546));function v(e){return e&&e.__esModule?e:{default:e}}var g=["",1,2,3,4,6,8,12,24],y=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"getGrid",value:function(e,n){return e[n]&&Math.floor(24/e[n])}},{key:"render",value:function(){var e=this.context.grid,n=this.props,t=n.prefixCls,i=void 0===t?"idoll-list":t,r=n.children,s=n.actions,u=n.extra,d=n.className,p=(0,l.default)(n,["prefixCls","children","actions","extra","className"]),v=(0,f.default)(i+"-item",d),g=[],y=[];c.Children.forEach(r,function(e){e&&e.type&&e.type===h.default?g.push(e):y.push(e)});var b=(0,f.default)(i+"-item-content",(0,o.default)({},i+"-item-content-single",g.length<1)),C=y.length>0?c.createElement("div",{className:b},y):null,k=void 0;if(s&&s.length>0){k=c.createElement("ul",{className:i+"-item-action"},s.map(function(e,n){return function(e,n){return c.createElement("li",{key:i+"-item-action-"+n},e,n!==s.length-1&&c.createElement("em",{className:i+"-item-action-split"}))}(e,n)}))}var x=c.createElement("div",{className:i+"-item-extra-wrap"},c.createElement("div",{className:i+"-item-main"},g,C,k),c.createElement("div",{className:i+"-item-extra"},u));return e?c.createElement(m.Col,{span:this.getGrid(e,"column"),xs:this.getGrid(e,"xs"),sm:this.getGrid(e,"sm"),md:this.getGrid(e,"md"),lg:this.getGrid(e,"lg")},c.createElement("div",(0,a.default)({},p,{className:v}),u&&x,!u&&g,!u&&C,!u&&k)):c.createElement("div",(0,a.default)({},p,{className:v}),u&&x,!u&&g,!u&&C,!u&&k)}}]),n}(c.Component);y.propTypes={column:p.default.oneOf(g),xs:p.default.oneOf(g),sm:p.default.oneOf(g),md:p.default.oneOf(g),lg:p.default.oneOf(g),xl:p.default.oneOf(g),xxl:p.default.oneOf(g)},y.contextTypes={grid:p.default.any},y.PropTypes={className:p.default.string,children:p.default.node,prefixCls:p.default.string,extra:p.default.node,actions:p.default.array},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(12)),l=g(t(5)),i=g(t(3)),r=g(t(7)),s=g(t(6)),u=g(t(1)),d=g(t(0)),c=t(40),p=g(c),f=g(t(547)),m=g(t(548)),h=g(t(521)),v=g(t(125));function g(e){return e&&e.__esModule?e:{default:e}}function y(){}t(1063);var b=function(e){function n(e){(0,l.default)(this,n);var t=(0,i.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.handleClick=function(e){t.setOpenKeys([]),t.props.onClick(e)},t.handleCloseKeys=function(e){var n=e.openKeys;t.setOpenKeys(n),t.props.onClose(e)},t.handleOpenChange=function(e){t.setOpenKeys(e),"onOpenChange"in t.props||t.setOpenKeys(e)},(0,v.default)(!("inlineCollapsed"in e&&"inline"!==e.mode),"'inlineCollapsed'只能在Menu的'mode'是'inline'的时候使用"),t.state={openKeys:[]},t}return(0,s.default)(n,e),(0,r.default)(n,[{key:"getChildContext",value:function(){return{idollMenuTheme:this.props.theme,mode:this.props.mode}}}]),(0,r.default)(n,[{key:"componentWillReceiveProps",value:function(e){"inline"===this.props.mode&&"inline"!==e.mode&&(this.switchModeFromInline=!0),"openKeys"in e&&this.setOpenKeys(e.openKeys)}},{key:"setOpenKeys",value:function(e){"openKeys"in this.props||this.setState({openKeys:e})}},{key:"render",value:function(){var e=this.props.openAnimation||this.props.openTransitionName;if(!e)switch(this.props.mode){case"horizontal":e="slide-up";break;case"vertical":this.switchModeFromInline?(e="",this.switchModeFromInline=!1):e="zoom-big";break;case"inline":e=h.default}var n={},t=this.props.className+" "+this.props.prefixCls+"-"+this.props.theme;return n="inline"!==this.props.mode?{openKeys:this.state.openKeys,onOpenChange:this.handleOpenChange,onClick:this.handleClick,onClose:this.handleCloseKeys,openTransitionName:e,className:t}:{className:t,openAnimation:e},u.default.createElement(p.default,(0,a.default)({},this.props,n))}}]),n}(u.default.Component);b.Divider=c.Divider,b.ItemGroup=c.ItemGroup,b.Item=f.default,b.SubMenu=m.default,b.defaultProps={prefixCls:"idoll-menu",className:"",onClick:y,onClose:y,theme:"dark"},b.childContextTypes={inlineCollapsed:d.default.bool,idollMenuTheme:d.default.string,mode:d.default.string},b.propTypes={defaultOpenKeys:d.default.any,style:d.default.object,defaultSelectedKeys:d.default.array,openKeys:d.default.array,selectedKeys:d.default.array,forceSubMenuRender:d.default.bool,selectable:d.default.bool,multiple:d.default.bool,subMenuCloseDelay:d.default.number,subMenuOpenDelay:d.default.number,mode:d.default.oneOf(["vertical","vertical-right","horizontal","inline"]),theme:d.default.oneOf(["dark","light"]),onClick:d.default.func,onDeselect:d.default.func,onOpenChange:d.default.func,onSelect:d.default.func,className:d.default.string},n.default=b},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(12)),i=h(t(5)),r=h(t(7)),s=h(t(3)),u=h(t(6)),d=t(1),c=h(d),p=h(t(1360)),f=h(t(8)),m=h(t(1059));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.onVisibleChange=function(e){var n=t.props.onVisibleChange;"visible"in t.props||t.setState({visible:e}),n&&!t.isNoTitle()&&n(e)},t.saveTooltip=function(e){t.tooltip=e},t.state={visible:!!e.visible||!!e.defaultVisible},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"isNoTitle",value:function(){var e=this.props,n=e.title,t=e.overlay;return!n&&!t}},{key:"getPopupDomNode",value:function(){return console.log(this.tooltip),this.tooltip.getPopupDomNode()}},{key:"getDisabledCompatibleChildren",value:function(e){if("button"===e.type&&e.props.disabled&&this.isHoverTrigger()){var n=(0,d.cloneElement)(e,{style:{pointerEvents:"none"},className:null});return c.default.createElement("span",{style:{display:"inline-block",cursor:"not-allowed"},className:e.props.className},n)}return e}},{key:"isHoverTrigger",value:function(){var e=this.props.trigger;return!e||"hover"===e||!!Array.isArray(e)&&e.indexOf("hover")>=0}},{key:"getPlacements",value:function(){var e=this.props,n=e.builtinPlacements,t=e.arrowPointAtCenter,a=e.autoAdjustOverflow;return n||(0,m.default)({arrowPointAtCenter:t,verticalArrowShift:8,autoAdjustOverflow:a})}},{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.overlay,l=e.title,i=e.children,r=e.openClassName,s=e.getPopupContainer,u=e.getTooltipContainer,m=this.state.visible;"visible"in this.props||!this.isNoTitle()||(m=!1);var h=this.getDisabledCompatibleChildren(c.default.isValidElement(i)?i:c.default.createElement("span",null,i)),v=h.props,g=(0,f.default)(v.className,(0,o.default)({},r||n+"-open",!0));return c.default.createElement(p.default,(0,a.default)({ref:this.saveTooltip,overlay:t||l||"",visible:m,onVisibleChange:this.onVisibleChange,getTooltipContainer:s||u,builtinPlacements:this.getPlacements()},this.props),m?(0,d.cloneElement)(h,{className:g}):h)}}]),n}(c.default.Component);v.defaultProps={prefixCls:"idoll-tooltip",placement:"top",mouseEnterDelay:.1,mouseLeaveDelay:.1,arrowPointAtCenter:!1,autoAdjustOverflow:!0},n.default=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=i(t(82)),o=i(t(2));n.getOverflowOptions=d,n.default=function(e){var n=e.arrowWidth,t=void 0===n?5:n,i=e.horizontalArrowShift,r=void 0===i?16:i,s=e.verticalArrowShift,c=void 0===s?12:s,p=e.autoAdjustOverflow,f=void 0===p||p,m={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(r+t),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(c+t)]},topRight:{points:["br","tc"],offset:[r+t,-4]},rightTop:{points:["tl","cr"],offset:[4,-(c+t)]},bottomRight:{points:["tr","bc"],offset:[r+t,4]},rightBottom:{points:["bl","cr"],offset:[4,c+t]},bottomLeft:{points:["tl","bc"],offset:[-(r+t),4]},leftBottom:{points:["br","cl"],offset:[-4,c+t]}};return(0,a.default)(m).forEach(function(n){m[n]=e.arrowPointAtCenter?(0,o.default)({},m[n],{overflow:d(f),targetOffset:u}):(0,o.default)({},l.placements[n],{overflow:d(f)})}),m};var l=t(1060);function i(e){return e&&e.__esModule?e:{default:e}}var r={adjustX:1,adjustY:1},s={adjustX:0,adjustY:0},u=[0,0];function d(e){return"boolean"==typeof e?e?r:s:(0,o.default)({},s,e)}},,function(e,n,t){"use strict";t(22),t(1062)},function(e,n,t){},function(e,n,t){"use strict";t(1064)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(549)),o=r(t(1)),l=r(t(584)),i=r(t(21));function r(e){return e&&e.__esModule?e:{default:e}}t(1076);var s=3,u=void 0,d=void 0,c=1,p="idoll-message",f="move-up",m=void 0,h=void 0;function v(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,t=arguments[2],r=arguments[3],v=arguments[4],g=arguments[5];"boolean"==typeof r&&(g=r),"function"==typeof n&&(r=n,n=s),"boolean"==typeof n&&(g=n,n=s),"boolean"==typeof v&&(g=v,v="");var y={info:"info-circle",success:"check-circle",error:"error-circle",warning:"warning"}[t],b=c++,C=new a.default(function(a){var s=function(){return"function"==typeof r&&r(),a(!0)};!function(e){d?e(d):l.default.newInstance({prefixCls:p,transitionName:f,style:{top:u},getContainer:m,maxCount:h},function(n){d?e(d):(d=n,e(n))})}(function(a){var l=o.default.createElement(i.default,{style:{color:g?"#fff":""},type:y});a.notice({key:b,duration:n,style:{},content:o.default.createElement("div",{className:p+"-custom-content "+(t&&!g?p+"-"+t:"content-"+t)},v||(y?l:""),o.default.createElement("span",null,e)),onClose:s})})}),k=function(){d&&d.removeNotice(b)};return k.then=function(e,n){return C.then(e,n)},k.promise=C,k}var g={open:v,config:function(e){void 0!==e.top&&(u=e.top,d=null),void 0!==e.duration&&(s=e.duration),void 0!==e.prefixCls&&(p=e.prefixCls),void 0!==e.getContainer&&(m=e.getContainer),void 0!==e.transitionName&&(f=e.transitionName,d=null),void 0!==e.maxCount&&(h=e.maxCount,d=null)},destroy:function(){d&&(d.destroy(),d=null)}};["success","info","warning","error","loading"].forEach(function(e){g[e]=function(n,t,a,o){return"boolean"==typeof a&&(o=a),"function"==typeof t&&(a=t,t=void 0),"boolean"==typeof t&&(o=t,t=void 0),g.open({content:n,duration:t,type:e,onClose:a,normal:o})}}),n.default={success:function(e,n,t,a,o){return v(e,n,"success",t,a,o)},error:function(e,n,t,a,o){return v(e,n,"error",t,a,o)},info:function(e,n,t,a,o){return v(e,n,"info",t,a,o)},warning:function(e,n,t,a,o){return v(e,n,"warning",t,a,o)},warn:function(e,n,t,a,o){return v(e,n,"warning",t,a,o)},loading:function(e,n,t,a,o){return v(e,n,"load",t,a,o)},open:function(e){return v(e.content,e.duration,"info",e.onClose,e.icon,e.normal)},config:function(e){void 0!==e.top&&(u=e.top,d=null),void 0!==e.duration&&(s=e.duration),void 0!==e.prefixCls&&(p=e.prefixCls),void 0!==e.getContainer&&(m=e.getContainer),void 0!==e.transitionName&&(f=e.transitionName,d=null),void 0!==e.maxCount&&(h=e.maxCount,d=null)},destroy:function(){d&&(d.destroy(),d=null)}}},,,,,,,,,,,function(e,n,t){"use strict";t(22),t(1077)},function(e,n,t){},function(e,n,t){"use strict";t(22),t(1079)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(9)),o=p(t(2));n.default=function(e){var n,t=(0,o.default)({},e),p=document.createElement("div");document.body.appendChild(p),t.iconType=t.iconType||"question-circle";var f=t.width||408,m=t.style||{};"okCancel"in t||(t.okCancel=!0);var h=(0,c.getConfirmLocale)();function v(){var e=i.default.unmountComponentAtNode(p);e&&p.parentNode.removeChild(p)}function g(){var e=t.onOk;if(e){var n=void 0;e.length?n=e(v):(n=e())||v(),n&&n.then&&n.then(v)}else v()}t.okText=t.okText||(t.okCancel?h.okText:h.justOkText),t.cancelText=t.cancelText||h.cancelText;var y=l.default.createElement("div",{className:"idoll-confirm-body"},l.default.createElement(s.default,{type:t.iconType}),l.default.createElement("span",{className:"idoll-confirm-title"},t.title),l.default.createElement("div",{className:"idoll-confirm-content"},t.content)),b=null;b=t.okCancel?l.default.createElement("div",{className:"idoll-confirm-btns"},l.default.createElement(u.default,{type:"ghost",onClick:function(){var e=t.onCancel;if(e){var n=void 0;e.length?n=e(v):(n=e())||n||v(),n&&n.then&&n.then(v)}else v()}},t.cancelText),l.default.createElement(u.default,{type:"primary",onClick:g},t.okText)):l.default.createElement("div",{className:"idoll-confirm-btns"},l.default.createElement(u.default,{type:"primary",onClick:g},t.okText));var C=(0,d.default)((n={"idoll-confirm":!0},(0,a.default)(n,"idoll-confirm-"+t.type,!0),(0,a.default)(n,t.className,!!t.className),n));return i.default.render(l.default.createElement(r.default,{className:C,visible:!0,closable:!1,title:"",transitionName:"zoom",footer:"",maskTransitionName:"fade",style:m,width:f},l.default.createElement("div",{style:{zoom:1,overflow:"hidden"}},y," ",b)),p),{destroy:v}};var l=p(t(1)),i=p(t(11)),r=p(t(554)),s=p(t(21)),u=p(t(59)),d=p(t(8)),c=t(1081);function p(e){return e&&e.__esModule?e:{default:e}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(2),l=(a=o)&&a.__esModule?a:{default:a};n.changeConfirmLocale=function(e){r=e?(0,l.default)({},i,e):(0,l.default)({},i)},n.getConfirmLocale=function(){return r};var i={okText:"确定",cancelText:"取消",justOkText:"知道了"},r=(0,l.default)({},i)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1083),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=r(t(549)),o=r(t(1)),l=r(t(584)),i=r(t(21));function r(e){return e&&e.__esModule?e:{default:e}}t(1084);var s=3,u=void 0,d=void 0,c=1,p="idoll-notification",f="move-up",m=void 0,h=void 0;function v(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s,t=arguments[2],r=arguments[3],v=arguments[4],g=arguments[5];"boolean"==typeof r&&(g=r),"function"==typeof n&&(r=n,n=s),"boolean"==typeof n&&(g=n,n=s),"boolean"==typeof v&&(g=v,v="");var y={info:"warning-circle",success:"check-circle",error:"close-circle",warning:"warning-circle",loading:"warning-circle"}[t],b=c++,C=new a.default(function(a){var s=function(){return"function"==typeof r&&r(),a(!0)};!function(e){d?e(d):l.default.newInstance({prefixCls:p,transitionName:f,style:{top:u},getContainer:m,maxCount:h},function(n){d?e(d):(d=n,e(n))})}(function(a){var l=o.default.createElement(i.default,{type:y});a.notice({key:b,duration:n,style:{},content:o.default.createElement("div",{className:p+"-custom-content "+(t&&!g?p+"-"+t:"content-"+t)},v||(y?l:""),o.default.createElement("p",{className:"title"},"我是标题",o.default.createElement(i.default,{type:"close",onClick:s})),o.default.createElement("p",null,e)),onClose:s})})}),k=function(){d&&d.removeNotice(b)};return k.then=function(e,n){return C.then(e,n)},k.promise=C,k}var g={open:v,config:function(e){void 0!==e.top&&(u=e.top,d=null),void 0!==e.duration&&(s=e.duration),void 0!==e.prefixCls&&(p=e.prefixCls),void 0!==e.getContainer&&(m=e.getContainer),void 0!==e.transitionName&&(f=e.transitionName,d=null),void 0!==e.maxCount&&(h=e.maxCount,d=null)},destroy:function(){d&&(d.destroy(),d=null)}};["success","info","warning","error","loading"].forEach(function(e){g[e]=function(n,t,a,o){return"boolean"==typeof a&&(o=a),"function"==typeof t&&(a=t,t=void 0),"boolean"==typeof t&&(o=t,t=void 0),g.open({content:n,duration:t,type:e,onClose:a,normal:o})}}),n.default={success:function(e,n,t,a,o){return v(e,n,"success",t,a,o)},error:function(e,n,t,a,o){return v(e,n,"error",t,a,o)},info:function(e,n,t,a,o){return v(e,n,"info",t,a,o)},warning:function(e,n,t,a,o){return v(e,n,"warning",t,a,o)},warn:function(e,n,t,a,o){return v(e,n,"warning",t,a,o)},loading:function(e,n,t,a,o){return v(e,n,"loading",t,a,o)},open:function(e){return v(e.content,e.duration,"info",e.onClose,e.icon,e.normal)},config:function(e){void 0!==e.top&&(u=e.top,d=null),void 0!==e.duration&&(s=e.duration),void 0!==e.prefixCls&&(p=e.prefixCls),void 0!==e.getContainer&&(m=e.getContainer),void 0!==e.transitionName&&(f=e.transitionName,d=null),void 0!==e.maxCount&&(h=e.maxCount,d=null)},destroy:function(){d&&(d.destroy(),d=null)}}},function(e,n,t){"use strict";t(22),t(1085)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(2)),o=m(t(13)),l=m(t(12)),i=m(t(5)),r=m(t(7)),s=m(t(3)),u=m(t(6)),d=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);return n.default=e,n}(t(1)),c=m(t(69)),p=m(t(21)),f=m(t(59));function m(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function n(e){(0,i.default)(this,n);var t=(0,s.default)(this,(n.__proto__||(0,l.default)(n)).call(this,e));return t.onConfirm=function(e){t.setVisible(!1);var n=t.props.onConfirm;n&&n.call(t,e)},t.onCancel=function(e){t.setVisible(!1);var n=t.props.onCancel;n&&n.call(t,e)},t.onVisibleChange=function(e){t.setVisible(e)},t.saveTooltip=function(e){t.tooltip=e},t.state={visible:e.visible},t}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentWillReceiveProps",value:function(e){"visible"in e&&this.setState({visible:e.visible})}},{key:"getPopupDomNode",value:function(){return this.tooltip.getPopupDomNode()}},{key:"setVisible",value:function(e){var n=this.props;"visible"in n||this.setState({visible:e});var t=n.onVisibleChange;t&&t(e)}},{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.placement,l=e.title,i=e.okText,r=e.cancelText,s=(0,o.default)(e,["prefixCls","placement","title","okText","cancelText"]),u=d.createElement("div",null,d.createElement("div",{className:n+"-inner-content"},d.createElement("div",{className:n+"-message"},d.createElement(p.default,{type:"warning-circle"}),d.createElement("div",{className:n+"-message-title"},l)),d.createElement("div",{className:n+"-buttons"},d.createElement(f.default,{onClick:this.onConfirm,type:"danger",size:"small"},i||"确定"),d.createElement(f.default,{onClick:this.onCancel,type:"ghost",size:"small"},r||"取消"))));return d.createElement(c.default,(0,a.default)({},s,{prefixCls:n,placement:t,onVisibleChange:this.onVisibleChange,visible:this.state.visible,overlay:u,ref:this.saveTooltip}))}}]),n}(d.Component);h.defaultProps={prefixCls:"idoll-popover",transitionName:"zoom-big",placement:"topRight",trigger:"click",okType:"primary"},n.default=h},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(2)),o=m(t(9)),l=m(t(12)),i=m(t(5)),r=m(t(7)),s=m(t(3)),u=m(t(6)),d=m(t(1)),c=m(t(69)),p=m(t(8)),f=m(t(125));function m(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function n(){var e,t,a,o;(0,i.default)(this,n);for(var r=arguments.length,u=Array(r),d=0;d<r;d++)u[d]=arguments[d];return t=a=(0,s.default)(this,(e=n.__proto__||(0,l.default)(n)).call.apply(e,[this].concat(u))),a.saveTooltip=function(e){a.tooltip=e},o=t,(0,s.default)(a,o)}return(0,u.default)(n,e),(0,r.default)(n,[{key:"getOverlay",value:function(){var e=this.props,n=e.title,t=e.prefixCls,a=e.content,l=e.className,i=e.overlayClassName,r=(0,p.default)(l,t+"-inner-content",(0,o.default)({},t+"-inline-popover",i));return(0,f.default)(!("overlay"in this.props),"Popover[overlay]已被移除，请用Popover[content]替代"),d.default.createElement("div",null,n&&d.default.createElement("div",{className:t+"-title"},n),d.default.createElement("div",{className:r},a))}},{key:"render",value:function(){return d.default.createElement(c.default,(0,a.default)({},this.props,{ref:this.saveTooltip,overlay:this.getOverlay()}))}}]),n}(d.default.Component);h.defaultProps={prefixCls:"idoll-popover",placement:"topLeft",trigger:"hover",mouseEnterDelay:.1,mouseLeaveDelay:.1,overlayStyle:{}},n.default=h},function(e,n,t){"use strict";t(1089)},function(e,n,t){},function(e,n,t){"use strict";t(1091),t(22)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(9)),o=m(t(12)),l=m(t(5)),i=m(t(7)),r=m(t(3)),s=m(t(6)),u=m(t(1)),d=m(t(0)),c=m(t(8)),p=m(t(34)),f=m(t(407));function m(e){return e&&e.__esModule?e:{default:e}}function h(e){var n=null,t=!1;return u.default.Children.forEach(e,function(e){e&&e.props&&e.props.checked&&(n=e.propos.value,t=!0)}),t?{value:n}:void 0}var v=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));g.call(t);var a=void 0;if("value"in e)a=e.value;else if("defaultValue"in e)a=e.defaultValue;else{var i=h(e.children);a=i&&i.value}return t.state={value:a},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"getChildContext",value:function(){return{radioGroup:{onChange:this.onRadioChange,value:this.state.value,disabled:this.props.disabled,name:this.props.name}}}},{key:"componentWillReceiveProps",value:function(e){if("value"in e)this.setState({value:e.value});else{var n=h(e.children);n&&this.setState({value:n.value})}}},{key:"shouldComponentUpdate",value:function(e,n){return!(0,p.default)(this.props,e)||!(0,p.default)(this.state,n)}},{key:"render",value:function(){var e,n=this,t=this.props,o=t.prefixCls,l=void 0===o?"solid"===t.buttonStyle?"idoll-radio-group-solid":"idoll-radio-group":o,i=t.className,r=void 0===i?"":i,s=t.options,d=(0,c.default)(l,(e={},(0,a.default)(e,l+"-"+t.size,t.size),(0,a.default)(e,l+"-vertical",t.direction),e),r),p=t.children;return s&&s.length>0&&(p=s.map(function(e,t){return"string"==typeof e?u.default.createElement(f.default,{key:t,disabled:n.props.disabled,value:e,onChange:n.onRadioChange,checked:n.state.value===e},e):u.default.createElement(f.default,{key:t,disabled:e.disabled||n.props.disabled,value:e.value,onChange:n.onRadioChange,checked:n.state.value===e.value},e.label)})),u.default.createElement("div",{className:d,style:t.style,onMouseEnter:t.onMouseEnter,onMouseLeave:t.onMouseLeave,id:t.id},p)}}]),n}(u.default.Component);v.defaultProps={disabled:!1},v.childContextTypes={radioGroup:d.default.any};var g=function(){var e=this;this.onRadioChange=function(n){var t=e.state.value,a=n.target.value;"value"in e.props||e.setState({value:a});var o=e.props.onChange;o&&a!==t&&o(n)}};n.default=v},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(117)),o=p(t(12)),l=p(t(5)),i=p(t(7)),r=p(t(3)),s=p(t(6)),u=p(t(1)),d=p(t(0)),c=p(t(407));function p(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){return(0,l.default)(this,n),(0,r.default)(this,(n.__proto__||(0,o.default)(n)).apply(this,arguments))}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){var e=(0,a.default)({},this.props);return this.context.radioGroup&&(e.onChange=this.context.radioGroup.onChange,e.checked=this.props.value===this.context.radioGroup.value,e.disabled=this.props.disabled||this.context.radioGroup.disabled),u.default.createElement(c.default,e)}}]),n}(u.default.Component);f.defaultProps={prefixCls:"idoll-radio-button"},f.contextTypes={radioGroup:d.default.any},n.default=f},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(13)),o=g(t(9)),l=g(t(2)),i=g(t(12)),r=g(t(5)),s=g(t(7)),u=g(t(3)),d=g(t(6)),c=g(t(1)),p=g(t(0)),f=g(t(1095)),m=g(t(1102)),h=g(t(558)),v=g(t(69));function g(e){return e&&e.__esModule?e:{default:e}}t(1103);var y=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));return t.toggleTooltipVisible=function(e,n){t.setState(function(t){var a=t.visibles;return{visibles:(0,l.default)({},a,(0,o.default)({},e,n))}})},t.handleWithTooltip=function(e){var n=e.value,o=e.dragging,i=e.index,r=(0,a.default)(e,["value","dragging","index"]),s=t.props,u=s.tooltipPrefixCls,d=s.tipFormatter,p=t.state.visibles,f=!!d&&(p[i]||o);return c.default.createElement(v.default,{prefixCls:u,title:d?d(n):"",visible:f,placement:"top",key:i},c.default.createElement(h.default,(0,l.default)({},r,{value:n,onMouseEnter:function(){return t.toggleTooltipVisible(i,!0)},onMouseLeave:function(){return t.toggleTooltipVisible(i,!1)}})))},t.saveSlider=function(e){t.rcSlider=e},t.state={visibles:{}},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"focus",value:function(){this.rcSlider.focus()}},{key:"blur",value:function(){this.rcSlider.focus()}},{key:"render",value:function(){var e=this.props,n=e.range,t=(0,a.default)(e,["range"]);return n?c.default.createElement(m.default,(0,l.default)({},t,{ref:this.saveSlider,handle:this.handleWithTooltip})):c.default.createElement(f.default,(0,l.default)({},t,{ref:this.saveSlider,handle:this.handleWithTooltip}))}}]),n}(c.default.Component);y.propTypes={min:p.default.number,max:p.default.number,marks:p.default.object},y.defaultProps={prefixCls:"idoll-slider",tooltipPrefixCls:"idoll-tooltip",tipFormatter:function(e){return e.toString()}},n.default=y},,,,,,,,,function(e,n,t){"use strict";t(22),t(1104)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=f(t(2)),o=f(t(12)),l=f(t(5)),i=f(t(7)),r=f(t(3)),s=f(t(6)),u=f(t(1)),d=f(t(0)),c=f(t(1361));t(1114);var p=f(t(21));function f(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function n(){return(0,l.default)(this,n),(0,r.default)(this,(n.__proto__||(0,o.default)(n)).apply(this,arguments))}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){var e=this.props.prefixCls,n={finish:u.default.createElement(p.default,{type:"done",className:e+"-finish-icon"}),error:u.default.createElement(p.default,{type:"close",className:e+"-error-icon"})};return u.default.createElement(c.default,(0,a.default)({icons:n},this.props))}}]),n}(u.default.Component);m.Step=c.default.Step,m.defaultProps={prefixCls:"idoll-steps",iconPrefix:"idoll",current:0},m.propTypes={prefixCls:d.default.string,iconPrefix:d.default.string,current:d.default.number},n.default=m},,,,,,,,,function(e,n,t){"use strict";t(1115),t(22)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(13)),i=h(t(12)),r=h(t(5)),s=h(t(7)),u=h(t(3)),d=h(t(6)),c=t(1),p=h(c),f=h(t(0)),m=h(t(8));function h(e){return e&&e.__esModule?e:{default:e}}function v(){}t(1117);var g=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));y.call(t);var a=!1;return a="checked"in e?!!e.checked:!!e.defaultChecked,t.state={checked:a},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentDidMount",value:function(){var e=this.props,n=e.autoFocus,t=e.disabled;n&&!t&&this.focus()}},{key:"componentWillReceiveProps",value:function(e){"checked"in e&&this.setState({checked:!!e.checked})}},{key:"setChecked",value:function(e){this.props.disabled||("checked"in this.props||this.setState({checked:e}),this.props.onChange(e))}},{key:"focus",value:function(){this.node.focus()}},{key:"blur",value:function(){this.node.blur()}},{key:"render",value:function(){var e,n=this.props,t=n.className,i=n.prefixCls,r=n.disabled,s=n.loading,u=n.checkedChildren,d=n.tabIndex,c=n.unCheckedChildren,f=n.size,h=(0,l.default)(n,["className","prefixCls","disabled","loading","checkedChildren","tabIndex","unCheckedChildren","size"]),v=this.state.checked,g=r?-1:d||0,y=(0,m.default)((e={},(0,o.default)(e,t,!!t),(0,o.default)(e,i,!0),(0,o.default)(e,i+"-checked",v),(0,o.default)(e,i+"-disabled",r),(0,o.default)(e,i+"-small","small"===f),(0,o.default)(e,i+"-loading",s),e));return p.default.createElement("span",(0,a.default)({},h,{className:y,tabIndex:g,ref:this.saveNode,onClick:this.toggle}),p.default.createElement("span",{className:i+"-inner"},v?u:c))}}]),n}(c.Component);g.propTypes={className:f.default.string,prefixCls:f.default.string,disabled:f.default.bool,checkedChildren:f.default.any,unCheckedChildren:f.default.any,onChange:f.default.func,onMouseUp:f.default.func,onClick:f.default.func,tabIndex:f.default.number,checked:f.default.bool,defaultChecked:f.default.bool,autoFocus:f.default.bool,size:f.default.string},g.defaultProps={prefixCls:"dbox-switch",checkedChildren:null,unCheckedChildren:null,className:"",defaultChecked:!1,onChange:v,onClick:v};var y=function(){var e=this;this.toggle=function(){var n=e.props.onClick,t=!e.state.checked;e.setChecked(t),n(t)},this.saveNode=function(n){e.node=n}};n.default=g},function(e,n,t){"use strict";t(1118)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=S(t(13)),o=S(t(9)),l=S(t(25)),i=S(t(82)),r=S(t(2)),s=S(t(12)),u=S(t(5)),d=S(t(7)),c=S(t(3)),p=S(t(6)),f=S(t(1)),m=S(t(0)),h=S(t(1351)),v=S(t(85)),g=S(t(130)),y=S(t(1198)),b=S(t(128)),C=S(t(21)),k=S(t(127)),x=S(t(8)),w=t(1199);function S(e){return e&&e.__esModule?e:{default:e}}function I(){}function T(e){e.stopPropagation(),e.nativeEvent.stopImmediatePropagation&&e.nativeEvent.stopImmediatePropagation()}var P={filterTitle:"筛选",filterConfirm:"确定",filterReset:"重置",emptyText:f.default.createElement("span",null,f.default.createElement(C.default,{type:"frown"}),"暂无数据")},M={onChange:I,onShowSizeChange:I},R=function(e){function n(e){(0,u.default)(this,n);var t=(0,c.default)(this,(n.__proto__||(0,s.default)(n)).call(this,e));_.call(t);var a=e.pagination||{};return t.state=(0,r.default)({boxChecked:!1,selectedRowKeys:(e.rowSelection||{}).selectedRowKeys||[],filters:t.getFiltersFromColumns(),selectionDirty:!1},t.getSortStateFromColumns(),{pagination:t.hasPagination()?(0,r.default)({},M,a,{current:a.defaultCurrent||a.current||1,pageSize:a.defaultPageSize||a.pageSize||10}):{}}),t.CheckboxPropsCache={},t}return(0,p.default)(n,e),(0,d.default)(n,[{key:"getCheckboxPropsByItem",value:function(e){var n=this.props.rowSelection,t=void 0===n?{}:n;if(!t.getCheckboxProps)return{};var a=this.getRecordKey(e);return this.CheckboxPropsCache[a]||(this.CheckboxPropsCache[a]=t.getCheckboxProps(e)),this.CheckboxPropsCache[a]}},{key:"getDefaultSelection",value:function(){var e=this,n=this.props.rowSelection;return(void 0===n?{}:n).getCheckboxProps?this.getFlatData().filter(function(n){return e.getCheckboxPropsByItem(n).defaultChecked}).map(function(n,t){return e.getRecordKey(n,t)}):[]}},{key:"getLocale",value:function(){var e={};return this.context.idollLocale&&this.context.idollLocale.Table&&(e=this.context.idollLocale.Table),(0,r.default)({},P,e,this.props.locale)}},{key:"componentWillReceiveProps",value:function(e){if("pagination"in e&&!1!==e.pagination&&this.setState(function(n){var t=(0,r.default)({},M,n.pagination,e.pagination);return t.current=t.current||1,{pagination:t}}),"dataSource"in e&&e.dataSource!==this.props.dataSource&&(this.setState({selectionDirty:!1}),this.CheckboxPropsCache={}),e.rowSelection&&"selectedRowKeys"in e.rowSelection){this.setState({selectedRowKeys:e.rowSelection.selectedRowKeys||[]});var n=this.props.rowSelection;n&&e.rowSelection.getCheckboxProps!==n.getCheckboxProps&&(this.CheckboxPropsCache={})}if(this.getSortOrderColumns(e.columns).length>0){var t=this.getSortStateFromColumns(e.columns);t.sortColumn===this.state.sortColumn&&t.sortOrder===this.state.sortOrder||this.setState(t)}if(this.getFilteredValueColumns(e.columns).length>0){var a=this.getFiltersFromColumns(e.columns),o=(0,r.default)({},this.state.filters);(0,i.default)(a).forEach(function(e){o[e]=a[e]}),this.isFiltersChanged(o)&&this.setState({filters:o})}}},{key:"setSelectedRowKeys",value:function(e,n){var t=this,a=n.selectWay,o=n.record,l=n.checked,i=n.changeRowKeys,r=this.props.rowSelection,s=void 0===r?{}:r;!s||"selectedRowKeys"in s||this.setState({selectedRowKeys:e});var u=this.getFlatData();if(s.onChange||s[a]){var d=u.filter(function(n,a){return e.indexOf(t.getRecordKey(n,a))>=0});if(s.onChange&&s.onChange(e,d),"onSelect"===a&&s.onSelect)s.onSelect(o,l,d);else if("onSelectAll"===a&&s.onSelectAll){var c=u.filter(function(e,n){return i.indexOf(t.getRecordKey(e,n))>=0});s.onSelectAll(l,d,c)}}}},{key:"hasPagination",value:function(){return!1!==this.props.pagination}},{key:"isFiltersChanged",value:function(e){var n=this,t=!1;return(0,i.default)(e).length!==(0,i.default)(this.state.filters).length?t=!0:(0,i.default)(e).forEach(function(a){e[a]!==n.state.filters[a]&&(t=!0)}),t}},{key:"getSortOrderColumns",value:function(e){return(e||this.props.columns||[]).filter(function(e){return"sortOrder"in e})}},{key:"getFilteredValueColumns",value:function(e){return(e||this.props.columns||[]).filter(function(e){return"filteredValue"in e})}},{key:"getFiltersFromColumns",value:function(e){var n=this,t={};return this.getFilteredValueColumns(e).forEach(function(e){t[n.getColumnKey(e)]=e.filteredValue}),t}},{key:"getSortStateFromColumns",value:function(e){var n=this.getSortOrderColumns(e).filter(function(e){return e.sortOrder})[0];return n?{sortColumn:n,sortOrder:n.sortOrder}:{sortColumn:null,sortOrder:null}}},{key:"getSorterFn",value:function(){var e=this.state,n=e.sortOrder,t=e.sortColumn;if(n&&t&&"function"==typeof t.sorter)return function(e,a){var o=t.sorter(e,a);return 0!==o?"descend"===n?-o:o:0}}},{key:"toggleSortOrder",value:function(e,n){var t,a=this.state,o=a.sortColumn,i=a.sortOrder;this.isSortColumn(n)?i===e?(i="",o=null):i=e:(i=e,o=n);var s={sortOrder:i,sortColumn:o};0===this.getSortOrderColumns().length&&this.setState(s),(t=this.props).onChange.apply(t,(0,l.default)(this.prepareParamsArguments((0,r.default)({},this.state,s))))}},{key:"getRecordKey",value:function(e,n){var t=this.props.rowKey;return"function"==typeof t?t(e,n):e[t]||n}},{key:"renderRowSelection",value:function(){var e=this,n=this.props.columns.concat();if(this.props.rowSelection){var t=this.getFlatCurrentPageData().filter(function(n){return!e.props.rowSelection.getCheckboxProps||!e.getCheckboxPropsByItem(n).disabled}),a=void 0;a=!!t.length&&(this.state.selectionDirty?t.every(function(n,t){return e.state.selectedRowKeys.indexOf(e.getRecordKey(n,t))>=0}):t.every(function(n,t){return e.state.selectedRowKeys.indexOf(e.getRecordKey(n,t))>=0})||t.every(function(n){return e.getCheckboxPropsByItem(n).defaultChecked}));var o=void 0;if("radio"===this.props.rowSelection.type)o={key:"selection-column",render:this.renderSelectionRadio,className:this.state.boxChecked?"idoll-table-selection-column idoll-table-selection-column-selected":"idoll-table-selection-column"};else{var l=t.every(function(n){return e.getCheckboxPropsByItem(n).disabled});o={key:"selection-column",title:f.default.createElement(v.default,{checked:a,disabled:l,onChange:this.handleSelectAllRow}),render:this.renderSelectionCheckBox,className:this.state.boxChecked?"idoll-table-selection-column idoll-table-selection-column-selected":"idoll-table-selection-column"}}n.some(function(e){return"left"===e.fixed||!0===e.fixed})&&(o.fixed="left"),n[0]&&"selection-column"===n[0].key?n[0]=o:n.unshift(o)}return n}},{key:"getColumnKey",value:function(e,n){return e.key||e.dataIndex||n}},{key:"getMaxCurrent",value:function(e){var n=this.state.pagination,t=n.current;return(t-1)*n.pageSize>=e?t-1:t}},{key:"isSortColumn",value:function(e){var n=this.state.sortColumn;return!(!e||!n)&&this.getColumnKey(n)===this.getColumnKey(e)}},{key:"renderColumnsDropdown",value:function(e){var n=this,t=this.state.sortOrder,a=this.getLocale();return e.map(function(e,o){var l=(0,r.default)({},e),i=n.getColumnKey(l,o),s=void 0,u=void 0;if(l.filters&&l.filters.length>0||l.filterDropdown){var d=n.state.filters[i]||[];s=f.default.createElement(y.default,{locale:a,column:l,selectedKeys:d,confirmFilter:n.handleFilter})}if(l.sorter){var c=n.isSortColumn(l);c&&(l.className=l.className||"",t&&(l.className+=" idoll-table-column-sort"));var p=c&&"ascend"===t,m=c&&"descend"===t;u=f.default.createElement("div",{className:"idoll-table-column-sorter"},f.default.createElement("span",{className:"idoll-table-column-sorter-up "+(p?"on":"off"),title:"↑",onClick:function(){return n.toggleSortOrder("ascend",l)}},f.default.createElement(C.default,{type:"caret-up"})),f.default.createElement("span",{className:"idoll-table-column-sorter-down "+(m?"on":"off"),title:"↓",onClick:function(){return n.toggleSortOrder("descend",l)}},f.default.createElement(C.default,{type:"caret-down"})))}return l.title=f.default.createElement("span",null,l.title,u,s),l})}},{key:"renderPagination",value:function(){if(!this.hasPagination())return null;var e="default",n=this.state.pagination;n.size?e=n.size:"middle"!==this.props.size&&"small"!==this.props.size||(e="small");var t=n.total||this.getLocalData().length;return t>0?f.default.createElement(b.default,(0,r.default)({},n,{className:this.props.prefixCls+"-pagination",onChange:this.handlePageChange,total:t,size:e,current:this.getMaxCurrent(t),onShowSizeChange:this.handleShowSizeChange})):null}},{key:"prepareParamsArguments",value:function(e){var n=e.pagination,t=e.filters,a={};return e.sortColumn&&e.sortOrder&&(a.column=e.sortColumn,a.order=e.sortOrder,a.field=e.sortColumn.dataIndex,a.columnKey=this.getColumnKey(e.sortColumn)),[n,t,a]}},{key:"findColumn",value:function(e){var n=this;return this.props.columns.filter(function(t){return n.getColumnKey(t)===e})[0]}},{key:"getCurrentPageData",value:function(){var e=this.getLocalData(),n=void 0,t=void 0,a=this.state;return this.hasPagination()?(t=a.pagination.pageSize,n=this.getMaxCurrent(a.pagination.total||e.length)):(t=Number.MAX_VALUE,n=1),(e.length>t||t===Number.MAX_VALUE)&&(e=e.filter(function(e,a){return a>=(n-1)*t&&a<n*t})),e}},{key:"getFlatData",value:function(){return(0,w.flatArray)(this.getLocalData())}},{key:"getFlatCurrentPageData",value:function(){return(0,w.flatArray)(this.getCurrentPageData())}},{key:"recursiveSort",value:function(e,n){var t=this,a=this.props.childrenColumnName;return e.sort(n).map(function(e){return e[a]?(0,r.default)({},e,(0,o.default)({},a,t.recursiveSort(e[a],n))):e})}},{key:"getLocalData",value:function(){var e=this,n=this.state,t=this.props.dataSource||[];t=t.slice(0);var a=this.getSorterFn();return a&&(t=this.recursiveSort(t,a)),n.filters&&(0,i.default)(n.filters).forEach(function(a){var o=e.findColumn(a);if(o){var l=n.filters[a]||[];0!==l.length&&(t=o.onFilter?t.filter(function(e){return l.some(function(n){return o.onFilter(n,e)})}):t)}}),t}},{key:"render",value:function(){var e,n=this,t=this.props,l=t.style,i=t.className,s=(0,a.default)(t,["style","className"]),u=this.getCurrentPageData(),d=this.renderRowSelection(),c=this.props.expandedRowRender&&!1!==this.props.expandIconAsCell,p=this.getLocale(),m=(0,x.default)((e={},(0,o.default)(e,"idoll-table-"+this.props.size,!0),(0,o.default)(e,"idoll-table-bordered",this.props.bordered),(0,o.default)(e,"idoll-table-empty",!u.length),e));d=(d=this.renderColumnsDropdown(d)).map(function(e,t){var a=(0,r.default)({},e);return a.key=n.getColumnKey(a,t),a});var v=f.default.createElement(h.default,(0,r.default)({},s,{data:u,columns:d,className:m,expandIconColumnIndex:d[0]&&"selection-column"===d[0].key?1:0,expandIconAsCell:c,emptyText:function(){return p.emptyText}})),g=this.hasPagination()&&u&&0!==u.length?"idoll-table-with-pagination":"idoll-table-without-pagination",y=this.props.loading?g+" idoll-table-spin-holder":"";return v=f.default.createElement(k.default,{className:y,spinning:this.props.loading},v),f.default.createElement("div",{className:i+" clearfix",style:l},v,this.renderPagination())}}]),n}(f.default.Component);R.propTypes={dataSource:m.default.array,prefixCls:m.default.string,useFixedHeader:m.default.bool,rowSelection:m.default.object,className:m.default.string,size:m.default.string,loading:m.default.bool,bordered:m.default.bool,onChange:m.default.func,locale:m.default.object},R.defaultProps={dataSource:[],prefixCls:"idoll-table",useFixedHeader:!1,rowSelection:null,className:"",size:"large",loading:!1,bordered:!1,indentSize:20,onChange:I,locale:{},rowKey:"key",childrenColumnName:"children"},R.contextTypes={idollLocale:m.default.object};var _=function(){var e=this;this.handleFilter=function(n,t){var a=e.props,s=(0,r.default)({},e.state.pagination),u=(0,r.default)({},e.state.filters,(0,o.default)({},e.getColumnKey(n),t)),d=a.columns.map(function(n){return e.getColumnKey(n)});(0,i.default)(u).forEach(function(e){d.indexOf(e)<0&&delete u[e]}),a.pagination&&(s.current=1,s.onChange(s.current));var c={selectionDirty:!1,pagination:s},p=(0,r.default)({},u);e.getFilteredValueColumns().forEach(function(n){var t=e.getColumnKey(n);t&&delete p[t]}),(0,i.default)(p).length>0&&(c.filters=p),a.pagination&&"current"in a.pagination&&(c.pagination=(0,r.default)({},s,{current:e.state.pagination.current})),e.setState(c,function(){a.onChange.apply(a,(0,l.default)(e.prepareParamsArguments((0,r.default)({},e.state,{selectionDirty:!1,filters:u,pagination:s}))))})},this.handleSelect=function(n,t,a){var o=a.target.checked;e.setState({boxChecked:a.target.checked});var l=e.state.selectionDirty?[]:e.getDefaultSelection(),i=e.state.selectedRowKeys.concat(l),r=e.getRecordKey(n,t);o?i.push(e.getRecordKey(n,t)):i=i.filter(function(e){return r!==e}),e.setState({selectionDirty:!0}),e.setSelectedRowKeys(i,{selectWay:"onSelect",record:n,checked:o})},this.handleRadioSelect=function(n,t,a){var o=a.target.checked,l=e.state.selectionDirty?[]:e.getDefaultSelection(),i=e.state.selectedRowKeys.concat(l);i=[e.getRecordKey(n,t)],e.setState({selectionDirty:!0}),e.setSelectedRowKeys(i,{selectWay:"onSelect",record:n,checked:o})},this.handleSelectAllRow=function(n){var t=n.target.checked,a=e.getFlatCurrentPageData(),o=e.state.selectionDirty?[]:e.getDefaultSelection(),l=e.state.selectedRowKeys.concat(o),i=a.filter(function(n){return!e.getCheckboxPropsByItem(n).disabled}).map(function(n,t){return e.getRecordKey(n,t)}),r=[];t?i.forEach(function(e){l.indexOf(e)<0&&(l.push(e),r.push(e))}):i.forEach(function(e){l.indexOf(e)>=0&&(l.splice(l.indexOf(e),1),r.push(e))}),e.setState({selectionDirty:!0}),e.setSelectedRowKeys(l,{selectWay:"onSelectAll",checked:t,changeRowKeys:r})},this.handlePageChange=function(n){var t,a=e.props,o=(0,r.default)({},e.state.pagination);o.current=n||(o.current||1),o.onChange(o.current);var i={selectionDirty:!1,pagination:o};a.pagination&&"current"in a.pagination&&(i.pagination=(0,r.default)({},o,{current:e.state.pagination.current})),e.setState(i),(t=e.props).onChange.apply(t,(0,l.default)(e.prepareParamsArguments((0,r.default)({},e.state,{selectionDirty:!1,pagination:o}))))},this.renderSelectionRadio=function(n,t,a){var o=e.getRecordKey(t,a),l=e.getCheckboxPropsByItem(t),i=void 0;return i=e.state.selectionDirty?e.state.selectedRowKeys.indexOf(o)>=0:e.state.selectedRowKeys.indexOf(o)>=0||e.getDefaultSelection().indexOf(o)>=0,f.default.createElement("span",{onClick:T},f.default.createElement(g.default,{disabled:l.disabled,onChange:function(n){return e.handleRadioSelect(t,o,n)},value:o,checked:i}))},this.renderSelectionCheckBox=function(n,t,a){var o=e.getRecordKey(t,a),l=void 0;l=e.state.selectionDirty?e.state.selectedRowKeys.indexOf(o)>=0:e.state.selectedRowKeys.indexOf(o)>=0||e.getDefaultSelection().indexOf(o)>=0;var i=e.getCheckboxPropsByItem(t);return f.default.createElement("span",{onClick:T},f.default.createElement(v.default,{checked:l,disabled:i.disabled,onChange:function(n){return e.handleSelect(t,o,n)}}))},this.handleShowSizeChange=function(n,t){var a,o=e.state.pagination;o.onShowSizeChange(n,t);var i=(0,r.default)({},o,{pageSize:t,current:n});e.setState({pagination:i}),(a=e.props).onChange.apply(a,(0,l.default)(e.prepareParamsArguments((0,r.default)({},e.state,{pagination:i}))))}};n.default=R},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(82)),o=v(t(12)),l=v(t(5)),i=v(t(7)),r=v(t(3)),s=v(t(6)),u=v(t(1)),d=t(40),c=v(d),p=v(t(176)),f=v(t(21)),m=v(t(85)),h=v(t(130));function v(e){return e&&e.__esModule?e:{default:e}}var g=function(e){var n=e.onClick,t=e.children;return u.default.createElement("div",{className:"idoll-table-filter-dropdown",onClick:n},t)},y=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.setSelectedKeys=function(e){var n=e.selectedKeys;t.setState({selectedKeys:n})},t.handleClearFilters=function(){t.setState({selectedKeys:[]},t.handleConfirm)},t.handleConfirm=function(){t.setState({visible:!1}),t.confirmFilter()},t.onVisibleChange=function(e){t.setState({visible:e}),e||t.confirmFilter()},t.handleMenuItemClick=function(e){if(!(e.keyPath.length<=1)){var n=t.state.keyPathOfSelectedItem;t.state.selectedKeys.indexOf(e.key)>=0?delete n[e.key]:n[e.key]=e.keyPath,t.setState({keyPathOfSelectedItem:n})}},t.state={selectedKeys:e.selectedKeys,keyPathOfSelectedItem:{},visible:!1},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentWillReceiveProps",value:function(e){this.setState({selectedKeys:e.selectedKeys})}},{key:"confirmFilter",value:function(){this.state.selectedKeys!==this.props.selectedKeys&&this.props.confirmFilter(this.props.column,this.state.selectedKeys)}},{key:"renderMenuItem",value:function(e){var n=this.props.column,t=!("filterMultiple"in n)||n.filterMultiple;return u.default.createElement(d.Item,{key:e.value},t?u.default.createElement(m.default,{checked:this.state.selectedKeys.indexOf(e.value.toString())>=0}):u.default.createElement(h.default,{checked:this.state.selectedKeys.indexOf(e.value.toString())>=0}),u.default.createElement("span",null,e.text))}},{key:"renderMenus",value:function(e){var n=this;return e.map(function(e){if(e.children&&e.children.length>0){var t=n.state.keyPathOfSelectedItem,o=(0,a.default)(t).some(function(n){return t[n].indexOf(e.value)>=0})?"idoll-dropdown-submenu-contain-selected":"";return u.default.createElement(d.SubMenu,{title:e.text,className:o,key:e.value.toString()},e.children.map(function(e){return n.renderMenuItem(e)}))}return n.renderMenuItem(e)})}},{key:"render",value:function(){var e=this.props,n=e.column,t=e.locale,a=!("filterMultiple"in n)||n.filterMultiple,o=n.filterDropdown?n.filterDropdown:u.default.createElement(g,null,u.default.createElement(c.default,{multiple:a,onClick:this.handleMenuItemClick,prefixCls:"idoll-dropdown-menu",onSelect:this.setSelectedKeys,onDeselect:this.setSelectedKeys,selectedKeys:this.state.selectedKeys},this.renderMenus(n.filters)),u.default.createElement("div",{className:"idoll-table-filter-dropdown-btns"},u.default.createElement("a",{className:"idoll-table-filter-dropdown-link confirm",onClick:this.handleConfirm},t.filterConfirm),u.default.createElement("a",{className:"idoll-table-filter-dropdown-link clear",onClick:this.handleClearFilters},t.filterReset))),l=this.props.selectedKeys.length>0?"idoll-table-filter-selected":"";return u.default.createElement(p.default,{trigger:["click"],overlay:o,visible:this.state.visible,onVisibleChange:this.onVisibleChange},u.default.createElement(f.default,{title:t.filterTitle,type:"filter",className:l}))}}]),n}(u.default.Component);y.defaultProps={handleFilter:function(){},column:null},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(2),l=(a=o)&&a.__esModule?a:{default:a};n.flatArray=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"children",t=[];return function e(a){a.forEach(function(a){var o=(0,l.default)({},a);delete o[n],t.push(o),a[n]&&a[n].length>0&&e(a[n])})}(e),t}},function(e,n,t){"use strict";t(22),t(1201),t(378),t(123),t(533),t(545),t(544)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(2)),o=g(t(25)),l=g(t(9)),i=g(t(13)),r=g(t(12)),s=g(t(5)),u=g(t(7)),d=g(t(3)),c=g(t(6)),p=g(t(1)),f=g(t(8)),m=g(t(578)),h=g(t(0));t(1203);var v=g(t(21));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function n(){return(0,s.default)(this,n),(0,d.default)(this,(n.__proto__||(0,r.default)(n)).apply(this,arguments))}return(0,c.default)(n,e),(0,u.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,r=n.children,s=n.pending,u=n.pendingDot,d=n.reverse,c=n.className,h=(0,i.default)(n,["prefixCls","children","pending","pendingDot","reverse","className"]),g="boolean"==typeof s?null:s,y=(0,f.default)((e={},(0,l.default)(e,t,!0),(0,l.default)(e,t+"-pending",!!s),(0,l.default)(e,t+"-reverse",!!d),(0,l.default)(e,c,c),e)),b=s?p.default.createElement(m.default,{pending:!!s,dot:u||p.default.createElement(v.default,{type:"loading"})},g):null,C=(d?[b].concat((0,o.default)(p.default.Children.toArray(r).reverse())):[].concat((0,o.default)(p.default.Children.toArray(r)),[b])).filter(function(e){return!!e}),k=p.default.Children.count(C),x=t+"-item-last",w=p.default.Children.map(C,function(e,n){return p.default.cloneElement(e,{className:(0,f.default)([e.props.className,!d&&s?n===k-2?x:"":n===k-1?x:""])})});return p.default.createElement("ul",(0,a.default)({},h,{className:y}),w)}}]),n}(p.default.Component);y.defaultProps={prefixCls:"idoll-timeline",reverse:!1},y.proprType={prefixCls:h.default.string,children:h.default.node,pending:h.default.node,className:h.default.string},n.default=y},function(e,n,t){"use strict";t(175),t(1204)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,o=t(1206),l=(a=o)&&a.__esModule?a:{default:a};n.default=l.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(13)),i=h(t(12)),r=h(t(5)),s=h(t(7)),u=h(t(3)),d=h(t(6)),c=h(t(1)),p=t(0),f=h(t(8)),m=h(t(21));function h(e){return e&&e.__esModule?e:{default:e}}t(1207);var v=function(e){function n(){return(0,r.default)(this,n),(0,u.default)(this,(n.__proto__||(0,i.default)(n)).apply(this,arguments))}return(0,d.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,i=n.icon,r=n.title,s=n.size,u=n.ghost,d=n.className,p=(0,l.default)(n,["prefixCls","icon","title","size","ghost","className"]),h={large:"lg",small:"sm"}[s]||"",v=i?c.default.createElement(m.default,{type:i,className:t+"-icon"}):c.default.createElement("i",{className:t+"-default"}),g=(0,f.default)((e={},(0,o.default)(e,t,!0),(0,o.default)(e,t+"-"+h,h),(0,o.default)(e,t+"-background-ghost",u),(0,o.default)(e,d,d),e));return c.default.createElement("div",(0,a.default)({},p,{className:g}),v,c.default.createElement("span",null,r))}}]),n}(c.default.Component);v.defaultProps={prefixCls:"idoll-title",ghost:!1,title:"标题"},v.propTypes={icon:p.PropTypes.string,title:p.PropTypes.string,className:p.PropTypes.string},n.default=v},function(e,n,t){"use strict";t(22),t(1208)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=p(t(2)),o=p(t(12)),l=p(t(5)),i=p(t(7)),r=p(t(3)),s=p(t(6)),u=p(t(1)),d=t(100),c=p(d);function p(e){return e&&e.__esModule?e:{default:e}}t(1210);var f=function(e){function n(){return(0,l.default)(this,n),(0,r.default)(this,(n.__proto__||(0,o.default)(n)).apply(this,arguments))}return(0,s.default)(n,e),(0,i.default)(n,[{key:"render",value:function(){var e=this.props,n=e.prefixCls,t=e.className,o=e.children,l=this.props.checkable;return u.default.createElement(c.default,(0,a.default)({},this.props,{className:t,checkable:l?u.default.createElement("span",{className:n+"-checkbox-inner"}):l}),o)}}]),n}(u.default.Component);f.TreeNode=d.TreeNode,f.defaultProps={prefixCls:"idoll-tree",checkable:!1,showIcon:!1},n.default=f},function(e,n,t){"use strict";t(22),t(1211),t(123)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=C(t(2)),o=C(t(25)),l=C(t(9)),i=C(t(12)),r=C(t(5)),s=C(t(7)),u=C(t(3)),d=C(t(6)),c=C(t(1)),p=C(t(0)),f=C(t(8)),m=C(t(1213)),h=C(t(1223)),v=C(t(579)),g=C(t(125)),y=C(t(118)),b=C(t(580));function C(e){return e&&e.__esModule?e:{default:e}}t(1224);var k=function(e){function n(e){(0,r.default)(this,n);var t=(0,u.default)(this,(n.__proto__||(0,i.default)(n)).call(this,e));x.call(t),(0,g.default)(!("notFoundContent"in e||"searchPlaceholder"in e),"Transfer[notFoundContent] and Transfer[searchPlaceholder] will be removed, please use Transfer[locale] instead.");var a=e.selectedKeys,o=void 0===a?[]:a,l=e.targetKeys,s=void 0===l?[]:l;return t.state={leftFilter:"",rightFilter:"",sourceSelectedKeys:o.filter(function(e){return-1===s.indexOf(e)}),targetSelectedKeys:o.filter(function(e){return s.indexOf(e)>-1})},t}return(0,d.default)(n,e),(0,s.default)(n,[{key:"componentWillReceiveProps",value:function(e){var n=this.state,t=n.sourceSelectedKeys,a=n.targetSelectedKeys;if((e.targetKeys!==this.props.targetKeys||e.dataSource!==this.props.dataSource)&&(this.separatedDataSource=null,!e.selectedKeys)){var o=e.dataSource,l=e.targetKeys,i=void 0===l?[]:l,r=[],s=[];o.forEach(function(e){var n=e.key;t.includes(n)&&!i.includes(n)&&r.push(n),a.includes(n)&&i.includes(n)&&s.push(n)}),this.setState({sourceSelectedKeys:r,targetSelectedKeys:s})}if(e.selectedKeys){var u=e.targetKeys||[];this.setState({sourceSelectedKeys:e.selectedKeys.filter(function(e){return!u.includes(e)}),targetSelectedKeys:e.selectedKeys.filter(function(e){return u.includes(e)})})}}},{key:"separateDataSource",value:function(e){if(this.separatedDataSource)return this.separatedDataSource;var n=e.dataSource,t=e.rowKey,a=e.targetKeys,o=void 0===a?[]:a,l=[],i=new Array(o.length);return n.forEach(function(e){t&&(e.key=t(e));var n=o.indexOf(e.key);-1!==n?i[n]=e:l.push(e)}),this.separatedDataSource={leftDataSource:l,rightDataSource:i},this.separatedDataSource}},{key:"handleSelectChange",value:function(e,n){var t=this.state,a=t.sourceSelectedKeys,o=t.targetSelectedKeys,l=this.props.onSelectChange;l&&("left"===e?l(n,o):l(a,n))}},{key:"getTitles",value:function(e){var n=this.props;return n.titles?n.titles:e.titles}},{key:"getSelectedKeysName",value:function(e){return"left"===e?"sourceSelectedKeys":"targetSelectedKeys"}},{key:"render",value:function(){return c.default.createElement(y.default,{componentName:"Transfer",defaultLocale:b.default.Transfer},this.renderTransfer)}}]),n}(c.default.Component);k.List=m.default,k.Operation=h.default,k.Search=v.default,k.defaultProps={dataSource:[],render:function(){},locale:{},showSearch:!1},k.propTypes={prefixCls:p.default.string,disabled:p.default.bool,dataSource:p.default.array,render:p.default.func,targetKeys:p.default.array,onChange:p.default.func,height:p.default.number,style:p.default.object,listStyle:p.default.object,operationStyle:p.default.object,className:p.default.string,titles:p.default.array,operations:p.default.array,showSearch:p.default.bool,filterOption:p.default.func,searchPlaceholder:p.default.string,notFoundContent:p.default.node,locale:p.default.object,body:p.default.func,footer:p.default.func,rowKey:p.default.func,lazy:p.default.oneOfType([p.default.object,p.default.bool])};var x=function(){var e=this;this.moveTo=function(n){var t=e.props,a=t.targetKeys,o=void 0===a?[]:a,i=t.dataSource,r=void 0===i?[]:i,s=t.onChange,u=e.state,d=u.sourceSelectedKeys,c=u.targetSelectedKeys,p=("right"===n?d:c).filter(function(e){return!r.some(function(n){return!(e!==n.key||!n.disabled)})}),f="right"===n?p.concat(o):o.filter(function(e){return-1===p.indexOf(e)}),m="right"===n?"left":"right";e.setState((0,l.default)({},e.getSelectedKeysName(m),[])),e.handleSelectChange(m,[]),s&&s(f,n,p)},this.moveToLeft=function(){return e.moveTo("left")},this.moveToRight=function(){return e.moveTo("right")},this.handleSelectAll=function(n,t,a){var i=e.state[e.getSelectedKeysName(n)]||[],r=t.map(function(e){return e.key}),s=i.filter(function(e){return-1===r.indexOf(e)}),u=[].concat((0,o.default)(i));r.forEach(function(e){-1===u.indexOf(e)&&u.push(e)});var d=a?s:u;e.handleSelectChange(n,d),e.props.selectedKeys||e.setState((0,l.default)({},e.getSelectedKeysName(n),d))},this.handleLeftSelectAll=function(n,t){return e.handleSelectAll("left",n,t)},this.handleRightSelectAll=function(n,t){return e.handleSelectAll("right",n,t)},this.handleFilter=function(n,t){e.setState((0,l.default)({},n+"Filter",t.target.value)),e.props.onSearchChange&&e.props.onSearchChange(n,t)},this.handleLeftFilter=function(n){return e.handleFilter("left",n)},this.handleRightFilter=function(n){return e.handleFilter("right",n)},this.handleClear=function(n){e.setState((0,l.default)({},n+"Filter",""))},this.handleLeftClear=function(){return e.handleClear("left")},this.handleRightClear=function(){return e.handleClear("right")},this.handleSelect=function(n,t,a){var i=e.state,r=i.sourceSelectedKeys,s=i.targetSelectedKeys,u=[].concat("left"===n?(0,o.default)(r):(0,o.default)(s)),d=u.indexOf(t.key);d>-1&&u.splice(d,1),a&&u.push(t.key),e.handleSelectChange(n,u),e.props.selectedKeys||e.setState((0,l.default)({},e.getSelectedKeysName(n),u))},this.handleLeftSelect=function(n,t){return e.handleSelect("left",n,t)},this.handleRightSelect=function(n,t){return e.handleSelect("right",n,t)},this.handleScroll=function(n,t){var a=e.props.onScroll;a&&a(n,t)},this.handleLeftScroll=function(n){return e.handleScroll("left",n)},this.handleRightScroll=function(n){return e.handleScroll("right",n)},this.getLocale=function(n){var t={};return"notFoundContent"in e.props&&(t.notFoundContent=e.props.notFoundContent),"searchPlaceholder"in e.props&&(t.searchPlaceholder=e.props.searchPlaceholder),(0,a.default)({},n,t,e.props.locale)},this.renderTransfer=function(n){var t=e.props,o=t.prefixCls,l=void 0===o?"idoll-transfer":o,i=t.className,r=t.disabled,s=t.operations,u=void 0===s?[]:s,d=t.showSearch,p=t.body,v=t.footer,g=t.style,y=t.listStyle,b=t.operationStyle,C=t.filterOption,k=t.render,x=t.lazy,w=e.getLocale(n),S=e.state,I=S.leftFilter,T=S.rightFilter,P=S.sourceSelectedKeys,M=S.targetSelectedKeys,R=e.separateDataSource(e.props),_=R.leftDataSource,N=R.rightDataSource,B=M.length>0,E=P.length>0,D=(0,f.default)(i,l,r&&l+"-disabled"),O=(0,f.default)(l+"-operation"),F=e.getTitles(w);return c.default.createElement("div",{className:D,style:g},c.default.createElement(m.default,(0,a.default)({prefixCls:l+"-list",titleText:F[0],dataSource:_,filter:I,filterOption:C,style:y,checkedKeys:P,handleFilter:e.handleLeftFilter,handleClear:e.handleLeftClear,handleSelect:e.handleLeftSelect,handleSelectAll:e.handleLeftSelectAll,render:k,showSearch:d,body:p,footer:v,lazy:x,onScroll:e.handleLeftScroll,disabled:r},w)),c.default.createElement(h.default,{className:O,rightActive:E,rightArrowText:u[0],moveToRight:e.moveToRight,leftActive:B,leftArrowText:u[1],moveToLeft:e.moveToLeft,style:b,disabled:r}),c.default.createElement(m.default,(0,a.default)({prefixCls:l+"-list",titleText:F[1],dataSource:N,filter:T,filterOption:C,style:y,checkedKeys:M,handleFilter:e.handleRightFilter,handleClear:e.handleRightClear,handleSelect:e.handleRightSelect,handleSelectAll:e.handleRightSelectAll,render:k,showSearch:d,body:p,footer:v,lazy:x,onScroll:e.handleRightScroll,disabled:r},w)))}};n.default=k},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=y(t(9)),o=y(t(12)),l=y(t(5)),i=y(t(7)),r=y(t(3)),s=y(t(6)),u=y(t(1)),d=y(t(11)),c=y(t(8)),p=y(t(27)),f=y(t(181)),m=y(t(85)),h=y(t(579)),v=y(t(1214)),g=y(t(1222));function y(e){return e&&e.__esModule?e:{default:e}}function b(){}var C=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.handleSelect=function(e){var n=t.props.checkedKeys.some(function(n){return n===e.key});t.props.handleSelect(e,!n)},t.handleFilter=function(e){if(t.props.handleFilter(e),!e.target.value)return!1;t.triggerScrollTimer=window.setTimeout(function(){var e=d.default.findDOMNode(t).querySelectorAll("idoll-transfer-list-content")[0];e&&(0,g.default)(e,"scroll")},0),t.fixIERepaint()},t.handleClear=function(){t.props.handleClear(),t.fixIERepaint()},t.matchFilter=function(e,n){var a=t.props,o=a.filter,l=a.filterOption;return l?l(o,n):e.indexOf(o)>=0},t.renderItem=function(e){var n,a=t.props.render,o=(void 0===a?b:a)(e),l=(n=o)&&!u.default.isValidElement(n)&&"[object Object]"===Object.prototype.toString.call(n);return{renderedText:l?o.value:o,renderedEl:l?o.label:o}},t.saveNotFoundRef=function(e){t.notFoundNode=e},t.state={mounted:!1},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentDidMount",value:function(){var e=this;this.timer=window.setTimeout(function(){e.setState({mounted:!0})},0)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timer),clearTimeout(this.triggerScrollTimer),clearTimeout(this.fixIERepainTimer)}},{key:"shouldComponentUpdate",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return f.default.shouldComponentUpdate.apply(this,n)}},{key:"getCheckStatus",value:function(e){var n=this.props.checkedKeys;return 0===n.length?"none":e.every(function(e){return n.indexOf(e.key)>=0})?"all":"part"}},{key:"fixIERepaint",value:function(){var e=this;if(!document.documentMode&&!/Edge/.test(navigator.userAgent))return!1;this.fixIERepainTimer=window.setTimeout(function(){e.notFoundNode&&(e.notFoundNode.className=e.notFoundNode.className)},0)}},{key:"render",value:function(){var e=this,n=this.props,t=n.prefixCls,o=n.dataSource,l=n.titleText,i=n.checkedKeys,r=n.lazy,s=n.disabled,d=n.body,f=n.footer,g=n.showSearch,y=n.style,b=n.filter,C=n.searchPlaceholder,k=n.notFoundContent,x=n.itemUnit,w=n.itemsUnit,S=n.onScroll,I=f&&f(this.props),T=d&&d(this.props),P=(0,c.default)(t,(0,a.default)({},t+"-with-footer",!!I)),M=[],R=[],_=o.map(function(n){var a=e.renderItem(n),o=a.renderedText,l=a.renderedEl;if(b&&b.trim()&&!e.matchFilter(o,n))return null;R.push(n),n.disabled||M.push(n);var d=i.indexOf(n.key)>=0;return u.default.createElement(v.default,{disabled:s,key:n.key,item:n,lazy:r,renderedText:o,renderedEl:l,checked:d,prefixCls:t,onClick:e.handleSelect})}),N=o.length>1?w:x,B=g?u.default.createElement("div",{className:t+"-body-search-wrapper"},u.default.createElement(h.default,{prefixCls:t+"-search",onChange:this.handleFilter,handleClear:this.handleClear,placeholder:C,value:b})):null,E=T||u.default.createElement("div",{className:(0,c.default)(g?t+"-body "+t+"-body-with-search":t+"-body")},B,u.default.createElement(p.default,{component:"ul",componentProps:{onScroll:S},className:t+"-content",transitionName:this.state.mounted?t+"-content-item-heightlight":"",transitionLeave:!1},_),u.default.createElement("div",{className:t+"-body-not-found",ref:this.saveNotFoundRef},k)),D=I?u.default.createElement("div",{className:t+"-footer"},I):null,O=this.getCheckStatus(M),F="all"===O,L=u.default.createElement(m.default,{ref:"checkbox",disabled:s,checked:F,indeterminate:"part"===O,onChange:function(){return e.props.handleSelectAll(M,F)}});return u.default.createElement("div",{className:P,style:y},u.default.createElement("div",{className:t+"-header"},L,u.default.createElement("span",{className:t+"-header-selected"},u.default.createElement("span",null,(i.length>0?i.length+"/":"0/")+R.length," ",N),u.default.createElement("span",{className:t+"-header-title"},l))),E,D)}}]),n}(u.default.Component);C.defaultProps={dataSource:[],titleText:"",showSearch:!1,render:b,lazy:{}},n.default=C},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(12)),i=h(t(5)),r=h(t(7)),s=h(t(3)),u=h(t(6)),d=h(t(1)),c=h(t(8)),p=h(t(181)),f=h(t(1215)),m=h(t(85));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"shouldComponentUpdate",value:function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];return p.default.shouldComponentUpdate.apply(this,n)}},{key:"render",value:function(){var e,n=this.props,t=n.renderedText,l=n.renderedEl,i=n.item,r=n.lazy,s=n.checked,u=n.disabled,p=n.prefixCls,h=n.onClick,v=(0,c.default)((e={},(0,o.default)(e,p+"-content-item",!0),(0,o.default)(e,p+"-content-item-disabled",u||i.disabled),e)),g=void 0;"string"!=typeof t&&"number"!=typeof t||(g=String(t));var y=d.default.createElement("li",{className:v,title:g,onClick:u||i.disabled?void 0:function(){return h(i)}},d.default.createElement(m.default,{checked:s,disabled:u||i.disabled}),d.default.createElement("span",null,l)),b=null;if(r){var C=(0,a.default)({height:40,offset:500,throttle:0,debounce:!1},r);b=d.default.createElement(f.default,C,y)}else b=y;return b}}]),n}(d.default.Component);n.default=v},,,,,,,,function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){if("createEvent"in document){var t=document.createEvent("HTMLEvents");t.initEvent(n,!1,!0),e.dispatchEvent(t)}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=d(t(59));function d(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){var e=this.props,n=e.disabled,t=e.moveToLeft,a=e.moveToRight,o=e.leftArrowText,l=void 0===o?"":o,i=e.rightArrowText,r=void 0===i?"":i,d=e.leftActive,c=e.rightActive,p=e.className,f=e.style;return s.default.createElement("div",{className:p,style:f},s.default.createElement("div",{className:n||!c?"disabled-icon":""},s.default.createElement(u.default,{shape:"circle",type:"primary",disabled:n||!c,onClick:a,icon:"right"},r)),s.default.createElement("div",{className:n||!d?"disabled-icon":""},s.default.createElement(u.default,{shape:"circle",type:"primary",disabled:n||!d,onClick:t,icon:"left"},l)))}}]),n}(s.default.Component);n.default=c},function(e,n,t){"use strict";t(22),t(1225),t(123),t(239),t(84)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=h(t(2)),o=h(t(9)),l=h(t(12)),i=h(t(5)),r=h(t(7)),s=h(t(3)),u=h(t(6)),d=h(t(1)),c=t(1349),p=h(c),f=h(t(8)),m=h(t(21));function h(e){return e&&e.__esModule?e:{default:e}}t(1229);var v=function(e){function n(){return(0,i.default)(this,n),(0,s.default)(this,(n.__proto__||(0,l.default)(n)).apply(this,arguments))}return(0,u.default)(n,e),(0,r.default)(n,[{key:"render",value:function(){var e,n=this.props,t=this.props,l=t.size,i=t.className,r=t.combobox,s=t.notFoundContent,u=t.prefixCls,c=(0,f.default)((e={},(0,o.default)(e,u+"-lg","large"===l),(0,o.default)(e,u+"-sm","small"===l),(0,o.default)(e,i,!!i),e)),h=this.context.antLocale;h&&h.Select&&(s=s||h.Select.notFoundContent),r&&(s=null);var v=n.treeCheckable;v&&(v=d.default.createElement("span",{className:u+"-tree-checkbox-inner"}));var g=d.default.createElement(m.default,{type:"close-circle-o",className:u+"-picker-clear"}),y=d.default.createElement(m.default,{type:"close",className:u+"-remove-icon"});return d.default.createElement(p.default,(0,a.default)({},this.props,{treeCheckable:v,removeIcon:y,clearIcon:g,className:c,notFoundContent:s}))}}]),n}(d.default.Component);v.TreeNode=c.TreeNode,v.SHOW_ALL=c.SHOW_ALL,v.SHOW_PARENT=c.SHOW_PARENT,v.SHOW_CHILD=c.SHOW_CHILD,v.defaultProps={prefixCls:"idoll-select",transitionName:"slide-up",choiceTransitionName:"zoom",showSearch:!1,dropdownClassName:"idoll-select-tree-dropdown"},n.default=v},,,function(e,n,t){"use strict";t(22),t(1230),t(173),t(123)},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=g(t(9)),o=g(t(12)),l=g(t(5)),i=g(t(7)),r=g(t(3)),s=g(t(6)),u=g(t(2)),d=g(t(1)),c=g(t(1353)),p=g(t(1232)),f=g(t(580)),m=g(t(118)),h=g(t(1233)),v=g(t(8));function g(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function n(e){(0,l.default)(this,n);var t=(0,r.default)(this,(n.__proto__||(0,o.default)(n)).call(this,e));return t.onStart=function(e){var n=void 0,a=t.state.fileList.concat();(n=function(e){return{lastModified:e.lastModified,lastModifiedDate:e.lastModifiedDate,name:e.filename||e.name,size:e.size,type:e.type,uid:e.uid,response:e.response,error:e.error,percent:0,originFileObj:e}}(e)).status="uploading",a.push(n),t.onChange({file:n,fileList:a}),window.FormData||t.autoUpdateProgress(0,n)},t.onSuccess=function(e,n){t.clearProgressTimer();try{"string"==typeof e&&(e=JSON.parse(e))}catch(e){}var a=t.state.fileList,o=(0,h.default)(n,a);o&&(o.status="done",o.response=e,t.onChange({file:(0,u.default)({},o),fileList:a}))},t.onProgress=function(e,n){var a=t.state.fileList,o=(0,h.default)(n,a);o&&(o.percent=e.percent,t.onChange({event:e,file:(0,u.default)({},o),fileList:t.state.fileList}))},t.onError=function(e,n,a){t.clearProgressTimer();var o=t.state.fileList,l=(0,h.default)(a,o);l&&(l.error=e,l.response=n,l.status="error",t.onChange({file:(0,u.default)({},l),fileList:o}))},t.handleManualRemove=function(e){t.upload.abort(e),e.status="removed","onRemove"in t.props?t.props.onRemove(e):t.handleRemove(e)},t.onChange=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];"fileList"in t.props||!n||t.setState({fileList:e.fileList});var a=t.props.onChange;a&&a(e)},t.onFileDrop=function(e){t.setState({dragState:e.type})},t.beforeUpload=function(e,n){if(!t.props.beforeUpload)return!0;var a=t.props.beforeUpload(e,n);return!1!==a&&(!a||!a.then||a)},t.saveUpload=function(e){t.upload=e},t.renderUploadList=function(e){var n=t.props,a=n.showUploadList,o=n.listType,l=n.onPreview,i=a.showRemoveIcon,r=a.showPreviewIcon;return d.default.createElement(p.default,{listType:o,items:t.state.fileList,onPreview:l,onRemove:t.handleManualRemove,showRemoveIcon:i,showPreviewIcon:r,locale:(0,u.default)({},e,t.props.locale)})},t.state={fileList:t.props.fileList||t.props.defaultFileList||[],dragState:"drop"},t}return(0,s.default)(n,e),(0,i.default)(n,[{key:"componentWillUnmount",value:function(){this.clearProgressTimer()}},{key:"autoUpdateProgress",value:function(e,n){var t,a=this,o=(t=.1,function(e){var n=e;return n>=.98?n:(n+=t,(t-=.01)<.001&&(t=.001),100*n)}),l=0;this.clearProgressTimer(),this.progressTimer=setInterval(function(){l=o(l),a.onProgress({percent:l},n)},200)}},{key:"removeFile",value:function(e){var n=this.state.fileList,t=(0,h.default)(e,n),a=n.indexOf(t);return-1!==a?(n.splice(a,1),n):null}},{key:"handleRemove",value:function(e){var n=this.removeFile(e);n&&this.onChange({file:e,fileList:n})}},{key:"componentWillReceiveProps",value:function(e){"fileList"in e&&this.setState({fileList:e.fileList||[]})}},{key:"clearProgressTimer",value:function(){clearInterval(this.progressTimer)}},{key:"render",value:function(){var e,n=this.props,t=n.prefixCls,o=void 0===t?"":t,l=n.className,i=n.showUploadList,r=n.listType,s=n.type,p=n.disabled,h=n.children,g=(0,u.default)({onStart:this.onStart,onError:this.onError,onProgress:this.onProgress,onSuccess:this.onSuccess},this.props,{beforeUpload:this.beforeUpload});delete g.className;var y=i?d.default.createElement(m.default,{componentName:"Upload",defaultLocale:f.default.Upload},this.renderUploadList):null;if("drag"===s){var b,C=(0,v.default)(o,(b={},(0,a.default)(b,o+"-drag",!0),(0,a.default)(b,o+"-drag-uploading",this.state.fileList.some(function(e){return"uploading"===e.status})),(0,a.default)(b,o+"-drag-hover","dragover"===this.state.dragState),(0,a.default)(b,o+"-disabled",p),b));return d.default.createElement("span",{className:l},d.default.createElement("div",{className:C,onDrop:this.onFileDrop,onDragOver:this.onFileDrop,onDragLeave:this.onFileDrop},d.default.createElement(c.default,(0,u.default)({},g,{ref:this.saveUpload,className:o+"-btn"}),d.default.createElement("div",{className:o+"-drag-container"},h))),y)}var k=(0,v.default)(o,(e={},(0,a.default)(e,o+"-select",!0),(0,a.default)(e,o+"-select-"+r,!0),(0,a.default)(e,o+"-disabled",p),e)),x=d.default.createElement("div",{className:k,style:{display:h?"":"none"}},d.default.createElement(c.default,(0,u.default)({},g,{ref:this.saveUpload})));return"picture-card"===r?d.default.createElement("span",{className:l},y,x):d.default.createElement("span",{className:l},x,y)}}]),n}(d.default.Component);y.Dragger=function(e){return d.default.createElement(y,(0,u.default)({},e,{type:"drag",style:{height:e.height,width:e.width}}))},y.defaultProps={prefixCls:"idoll-upload",type:"select",multiple:!1,action:"",data:{},accept:"",onChange:function(){},beforeUpload:function(){return!0},showUploadList:!0,listType:"text",className:"",disabled:!1},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=v(t(9)),o=v(t(2)),l=v(t(12)),i=v(t(5)),r=v(t(7)),s=v(t(3)),u=v(t(6)),d=v(t(1)),c=v(t(27)),p=v(t(21)),f=v(t(555)),m=v(t(69)),h=v(t(8));function v(e){return e&&e.__esModule?e:{default:e}}var g="idoll-upload",y=function(e){function n(){var e,t,a,o;(0,i.default)(this,n);for(var r=arguments.length,u=Array(r),d=0;d<r;d++)u[d]=arguments[d];return t=a=(0,s.default)(this,(e=n.__proto__||(0,l.default)(n)).call.apply(e,[this].concat(u))),a.handleClose=function(e){a.props.onRemove(e)},a.handlePreview=function(e,n){if(a.props.onPreview)return n.preventDefault(),a.props.onPreview(e)},o=t,(0,s.default)(a,o)}return(0,u.default)(n,e),(0,r.default)(n,[{key:"componentDidUpdate",value:function(){var e=this;"picture"!==this.props.listType&&"picture-card"!==this.props.listType||this.props.items.forEach(function(n){"undefined"!=typeof document&&"undefined"!=typeof window&&window.FileReader&&window.File&&n.originFileObj instanceof File&&void 0===n.thumbUrl&&(n.thumbUrl="",function(e,n){var t=new FileReader;t.onloadend=function(){return n(t.result)},t.readAsDataURL(e)}(n.originFileObj,function(t){n.thumbUrl=t,e.forceUpdate()}))})}},{key:"render",value:function(){var e,n=this,t=this.props.items.map(function(e){var t,l=void 0,i=d.default.createElement(p.default,{type:"paper-clip"});"picture"!==n.props.listType&&"picture-card"!==n.props.listType||(i=d.default.createElement("a",{className:g+"-list-item-thumbnail",onClick:function(t){return n.handlePreview(e,t)},href:e.url,target:"_blank"},d.default.createElement("img",{src:e.thumbUrl||e.url,alt:e.name}))),"picture-card"===n.props.listType&&"uploading"===e.status&&(i=d.default.createElement(p.default,{className:g+"-list-item-thumbnail",type:"picture"})),"uploading"===e.status&&(l=d.default.createElement("div",{className:g+"-list-item-progress"},d.default.createElement(f.default,(0,o.default)({type:"picture-card"===n.props.listType?"circle":"line",width:"picture-card"===n.props.listType?80:null},n.props.progressAttr,{percent:Math.floor(e.percent),status:"error"===e.status?"exception":"active"}))));var r=(0,h.default)((t={},(0,a.default)(t,g+"-list-item",!0),(0,a.default)(t,g+"-list-item-"+e.status,!0),t));return d.default.createElement("div",{className:r,key:e.uid},d.default.createElement("div",{className:g+"-list-item-info"},i,e.url?"error"===e.status?d.default.createElement(m.default,{title:e.response||"Server Error 500"},d.default.createElement("a",{href:e.url,target:"_blank",className:g+"-list-item-name",onClick:function(t){return n.handlePreview(e,t)}},d.default.createElement(p.default,{type:"picture"===n.props.listType?null:"pro2-clip"}),d.default.createElement("span",null,e.name),d.default.createElement(p.default,{type:"done"===e.status?"check":""}))):d.default.createElement("a",{href:e.url,target:"_blank",className:g+"-list-item-name",onClick:function(t){return n.handlePreview(e,t)}},d.default.createElement(p.default,{type:"picture"===n.props.listType?null:"pro2-clip"}),d.default.createElement("span",null,e.name),d.default.createElement(p.default,{type:"done"===e.status?"check":""})):"error"===e.status?d.default.createElement(m.default,{title:e.response||"Server Error 500"},d.default.createElement("a",{href:"",target:"_blank",className:g+"-list-item-name",onClick:function(t){return n.handlePreview(e,t)}},d.default.createElement(p.default,{type:"picture"===n.props.listType?null:"pro2-clip"}),d.default.createElement("span",null,e.name),d.default.createElement(p.default,{type:""}))):d.default.createElement("span",{className:g+"-list-item-name",onClick:function(t){return n.handlePreview(e,t)}},d.default.createElement(p.default,{type:"picture"===n.props.listType?null:"pro2-clip"}),d.default.createElement("span",null,e.name),d.default.createElement(p.default,{type:"check"}))),"picture-card"===n.props.listType&&"uploading"!==e.status?d.default.createElement("span",null,d.default.createElement("a",{href:e.url,target:"_blank",style:{pointerEvents:e.url?"":"none"},onClick:function(t){return n.handlePreview(e,t)}},d.default.createElement(p.default,{type:"eye"})),d.default.createElement(p.default,{type:"delete",onClick:function(){return n.handleClose(e)}})):d.default.createElement(p.default,{type:"close",onClick:function(){return n.handleClose(e)}}),l)}),l=(0,h.default)((e={},(0,a.default)(e,g+"-list",!0),(0,a.default)(e,g+"-list-"+this.props.listType,!0),e));return d.default.createElement("div",{className:l},d.default.createElement(c.default,{transitionName:"fade"},t))}}]),n}(d.default.Component);y.defaultProps={listType:"text",items:[],progressAttr:{strokeWidth:3,status:"active"}},n.default=y},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t=e.uid?"byUid":"byName";return n.filter(function(n){return"byName"===t?n.name===e.name:n.uid===e.uid})[0]}},function(e,n,t){"use strict";t(22),t(1235)},function(e,n,t){},function(e,n,t){"use strict";t(1237)},function(e,n,t){},function(e,n,t){e.exports=t.p+"500e0151baed0ce7305e4acbb94aaf6d.png"},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=[{title:"超大文字H1",description:"建议用法：适用于超大屏幕，Banner文案，适度使用。",size:"38px",basic:[{name:"基本属性",fontSize:"Font-size : 38px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 46px",MarginTop:"margin-top: 56px"}]},{title:"标题文字H2",description:"建议用法：适用于空状态和功能介绍，顶级标题。",size:"30px",basic:[{name:"基本属性",fontSize:"Font-size : 30px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 38px",MarginTop:"margin-top: 48px"}]},{title:"超大文字H3",description:"建议用法：适用于页面标题，每页只用一次。",size:"24px",basic:[{name:"基本属性",fontSize:"Font-size : 24px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 32px",MarginTop:"margin-top: 40px"}]},{title:"超大文字H4",description:"建议用法：适用于标识关键功能的标题，模块标题。",size:"20px",basic:[{name:"基本属性",fontSize:"Font-size : 20px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"28px",MarginTop:"margin-top: 32px"}]},{title:"标题文字H5",description:"建议用法：适用于段落和字段组标题。",size:"16px",basic:[{name:"基本属性",fontSize:"Font-size : 16px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 24px",MarginTop:"margin-top: 24px"}]},{title:"标题文字H6",description:"建议用法：适用于层级较深的标题，或突出显示重要信息，表格的标题。",size:"14px",basic:[{name:"基本属性",fontSize:"Font-size : 14px",fontWeight:"Font-weight ： 500 / Medium",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 22px",MarginTop:"margin-top: 24px"}]},{title:"正文文字（大号）",description:"建议用法：适用于大尺寸的组件中的文本，比如按钮、进度条等。",size:"16px",basic:[{name:"基本属性",fontSize:"Font-size : 16px",fontWeight:"Font-weight ： 400 / Regular",color:"#000000",opacity:"0.6"}],ui:[{name:"UI属性",lineHeight:"Line-height : 22px",MarginTop:"margin-top: 16px"}]},{title:"正文文字（主字号）",description:"建议用法：适用于正文文字。",size:"14px",basic:[{name:"基本属性",fontSize:"Font-size : 14px",fontWeight:"Font-weight ： 400 / Regular",color:"#000000",opacity:"0.8"}],ui:[{name:"UI属性",lineHeight:"Line-height : 22px",MarginTop:"margin-top: 24px"}]},{title:"正文字体（小号）",description:"建议用法：适用于表单字段下的帮助文本和应用程序中的辅助支持文本，应谨慎使用。",size:"12px",basic:[{name:"基本属性",fontSize:"Font-size : 12px",fontWeight:"Font-weight ： 400 / Regular",color:"#000000",opacity:"0.6"}],ui:[{name:"UI属性",lineHeight:"Line-height : 20px",MarginTop:"margin-top: 8px"}]},{title:"段落文字P",description:"建议用法：适用于常规段落文字。",size:"14px",basic:[{name:"基本属性",fontSize:"Font-size : 14px",fontWeight:"Font-weight ： 400 / Regular",color:"#000000",opacity:"0.6"}],ui:[{name:"UI属性",lineHeight:"Line-height : 22px",MarginTop:"margin-top: 24px",LetterSpacing:"0.5px"}]}]},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=d(t(188));function d(e){return e&&e.__esModule?e:{default:e}}t(1241);var c=function(e){function n(e){(0,o.default)(this,n);var t=(0,i.default)(this,(n.__proto__||(0,a.default)(n)).call(this,e));return t.state={reverse:!0},t}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement(u.default,null,s.default.createElement(u.default.Item,null,s.default.createElement("h2",null,"1.0.0"),s.default.createElement("p",null,"2018-10-12"),s.default.createElement("p",null,"🐞 修复 Avatar 图标不能垂直居中的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。")),s.default.createElement(u.default.Item,null,s.default.createElement("h2",null,"主要变化"),s.default.createElement("p",null,"全新的色彩系统，组件主色由『#108EE9』改为『#1890FF』，新主色我们称之为『拂晓蓝』。"),s.default.createElement("p",null,"全新的视觉样式和组件尺寸，更现代更美观。"),s.default.createElement("p",null,"基础字体大小由 12px 增大到 14px。"),s.default.createElement("p",null,"默认语言由中文改为英文。"),s.default.createElement("p",null,"全面支持 React 16。"),s.default.createElement("p",null," 新的 Divider 组件。"),s.default.createElement("p",null,"新增 30 个图标。")),s.default.createElement(u.default.Item,null,s.default.createElement("h2",null,"1.0.0"),s.default.createElement("p",null,"2018-10-12"),s.default.createElement("p",null,"🐞 修复 Avatar 图标不能垂直居中的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"),s.default.createElement("p",null,"🐞 修复会导致 Button 中的图标显示变小的问题。"))))}}]),n}(s.default.Component);n.default=c},function(e,n,t){"use strict";t(1242)},function(e,n,t){},function(e,n,t){e.exports=t.p+"c9d4b53bac04857d63b7f06fc4c2063d.png"},function(e,n,t){},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=t(44);function d(e){return e&&e.__esModule?e:{default:e}}t(99);var c=[{title:"Primary",value:"#13B886",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#13B886",color:"#ffffff"},{title:"Black",value:"#000000",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#000000",color:"#ffffff"},{title:"White",value:"#ffffff",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#ffffff",color:"#000000"}],p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("h2",{className:"idoll-color-h3"},"主色（Primary Colors)"),s.default.createElement("p",{className:"idoll-color-p"},"DBox 的主要色板由绿色、黑色和白色组成。这些颜色存在于整个系统的所有页面之中。其中，Emeriald Green（宝石绿） 是我们的品牌色，寓意创新、活力、价值。"),s.default.createElement(u.Row,{gutter:16},c.map(function(e,n){return s.default.createElement(u.Col,{span:6,key:n},s.default.createElement("dl",{className:"idoll-color-item "},s.default.createElement("dt",{className:"idoll-color-item-title",style:{backgroundColor:e.value,color:e.color}},e.title,s.default.createElement("span",{className:"idoll-color-item-title-value"},e.value)),s.default.createElement("dd",{className:"idoll-color-item-desc"},e.description)))})),s.default.createElement(u.Row,{gutter:48},s.default.createElement("h3",{className:"idoll-color-main-title"},"推荐主色"),s.default.createElement(u.Col,{span:10},s.default.createElement("span",{className:"idoll-color-recommend1"},"#FF5F3F"),s.default.createElement("span",{className:"idoll-color-recommend2"},"#FF9933"),s.default.createElement("span",{className:"idoll-color-recommend3"},"#666699"),s.default.createElement("span",{className:"idoll-color-recommend4"},"#549FFF")),s.default.createElement(u.Col,{span:10},s.default.createElement("span",{className:"idoll-color-recommend1"},"#FF7457"),s.default.createElement("span",{className:"idoll-color-recommend2"},"#FF9966"),s.default.createElement("span",{className:"idoll-color-recommend3"},"#13B886"),s.default.createElement("span",{className:"idoll-color-recommend4"},"#336699"))))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=t(44);function d(e){return e&&e.__esModule?e:{default:e}}t(99);var c=[{title:"Success",value:"#3CCB69",description:"用于成功状态和信息提示和反馈。",color:"#ffffff"},{title:"Warning",value:"#F9AA29",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",color:"#ffffff"},{title:"Error",value:"#F44336",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",color:"#ffffff"}],p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("h2",{className:"idoll-color-h3"},"功能色（Functional Colors）"),s.default.createElement("p",{className:"idoll-color-p"},"DBox 的功能色由绿色、黄色、红色组成，每种颜色都是有目的性的选择，以便在产品中提供有意义的反馈，且遵从用户对颜色的基本了解和认知习惯。"),s.default.createElement(u.Row,{gutter:16},c.map(function(e,n){return s.default.createElement(u.Col,{span:6,key:n},s.default.createElement("dl",{className:"idoll-color-item "},s.default.createElement("dt",{className:"idoll-color-item-title",style:{backgroundColor:e.value,color:e.color}},e.title,s.default.createElement("span",{className:"idoll-color-item-title-value"},e.value)),s.default.createElement("dd",{className:"idoll-color-item-desc"},e.description)))})))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=t(44);function d(e){return e&&e.__esModule?e:{default:e}}t(99);var c=[{title:"TableHeader",value:"#FAFAFA",description:"用于表格的标题行背景。",bgColor:"#FAFAFA",color:"#000000"},{title:"Background",value:"#F8F8F8",description:"用于页面级的背景。",bgColor:"#F8F8F8",color:"#000000"},{title:"Divider",value:"#F5F5F5",description:"用于分割线。",bgColor:"#F5F5F5",color:"#000000"},{title:"Border",value:"#E2E2E2",description:"用于边框，含实线和虚线。",bgColor:"#E2E2E2",color:"#000000"},{title:"Disable_Text",value:"#000000 20%",description:"用于禁用文字的颜色，图标置灰。",bgColor:"rgba(0,0,0,.2)",color:"#ffffff"},{title:"Secondary_Text",value:"#000000 40%",description:"用于次要文字颜色，图标默认颜色。（注：图标默认颜色比文字默认颜色低一个层级，弱化装饰元素）",bgColor:"rgba(0,0,0,.4)",color:"#ffffff"},{title:"Body_Text",value:"#000000 60%",description:"用于默认文字颜色，图标Hover颜色。",bgColor:"rgba(0,0,0,.6)",color:"#ffffff"},{title:"Title_Text",value:"#000000 80%",description:"用于标题文字的颜色，图标Pressed颜色。",bgColor:"rgba(0,0,0,.8)",color:"#ffffff"},{title:"DisableText",value:"#FFFFFF 40%",description:"用于禁用文字颜色，图标置灰。",bgColor:"rgba(255,255,255,.4)",color:"#000000"},{title:"Secondary",value:"#FFFFFF 60%",description:"用于次要文字颜色，图标默认颜色。",bgColor:"rgba(255,255,255,.6)",color:"#000000"},{title:"Body",value:"#FFFFFF 80%",description:"用于主要（默认）文字颜色，图标Hover颜色。",bgColor:"rgba(255,255,255,.8)",color:"#000000"},{title:"Title",value:"#FFFFFF",description:"用于标题文字颜色，图标Pressed颜色。",bgColor:"rgba(255,255,255,1)",color:"#000000"}],p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("h2",{className:"idoll-color-h3"},"中性色（Neutral Colors）"),s.default.createElement("p",{className:"idoll-color-p"},"DBox 的中性色是具有不同程度的饱和度和透明度的无色彩组成，通常用于文本界面和不需要用户过多关注的特定信息的展示。"),s.default.createElement(u.Row,{gutter:16},c.map(function(e,n){return s.default.createElement(u.Col,{span:6,key:n},s.default.createElement("dl",{className:"idoll-color-item "},s.default.createElement("dt",{className:"idoll-color-item-title",style:{backgroundColor:e.bgColor,color:e.color}},e.title,s.default.createElement("span",{className:"idoll-color-item-title-value"},e.value)),s.default.createElement("dd",{className:"idoll-color-item-desc"},e.description)))})))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=t(44);function d(e){return e&&e.__esModule?e:{default:e}}t(99);var c=[{title:"Disabled",value:"#F8F9FC",description:"用于不可用状态组件的颜色（白底）。",color:"#000000"},{title:"Navbar",value:"#2F323B",description:"用于导航栏的默认背景色。",color:"#ffffff"}],p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("h2",{className:"idoll-color-h3"},"其他颜色（Other Colors）"),s.default.createElement("p",{className:"idoll-color-p"},"DBox 的其他颜色是除主色和中性色之外有色彩的颜色，目前包括禁用色和导航条背景。"),s.default.createElement(u.Row,{gutter:16},c.map(function(e,n){return s.default.createElement(u.Col,{span:6,key:n},s.default.createElement("dl",{className:"idoll-color-item "},s.default.createElement("dt",{className:"idoll-color-item-title",style:{backgroundColor:e.value,color:e.color}},e.title,s.default.createElement("span",{className:"idoll-color-item-title-value"},e.value)),s.default.createElement("dd",{className:"idoll-color-item-desc"},e.description)))})))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=d(t(12)),o=d(t(5)),l=d(t(7)),i=d(t(3)),r=d(t(6)),s=d(t(1)),u=t(44);function d(e){return e&&e.__esModule?e:{default:e}}t(99);var c=[{title:"Small",value:"0 8 16px 0",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#ffffff",color:"#000000",shadow:"0px 2px 8px 0px rgba(0,0,0,0.1)"},{title:"Large",value:"0px 8px 16px 0px",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#ffffff",color:"#000000",shadow:"0px 8px 16px 0px rgba(0,0,0,0.1)"},{title:"Button",value:"0px 2px 8px 0px",description:"用于主要操作和按钮，链接，重要信息突出显示、以及进度指示和身份验证等场景。",bgColor:"#13B886",color:"#ffffff",shadow:"0px 2px 8px 0px rgba(19,184,134,0.2)"}],p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement("h2",{className:"idoll-color-h3"},"阴影（Shadows）"),s.default.createElement("p",{className:"idoll-color-p"},"DBox 的投影规范了 3 种场景，Small、Large、Button，根据实际情况分别取用，基本能满足所有场景。为减少样式冗余，没有按方向细分。"),s.default.createElement(u.Row,{gutter:16},c.map(function(e,n){return s.default.createElement(u.Col,{span:6,key:n},s.default.createElement("dl",{className:"idoll-color-item "},s.default.createElement("dt",{className:"idoll-color-item-title-shadow",style:{backgroundColor:e.bgColor,color:e.color,boxShadow:e.shadow}},e.title,s.default.createElement("span",{className:"idoll-color-item-title-value"},e.value)),s.default.createElement("dd",{className:"idoll-color-item-desc"},e.description)))})))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=c(t(12)),o=c(t(5)),l=c(t(7)),i=c(t(3)),r=c(t(6)),s=c(t(1)),u=t(44),d=c(t(21));function c(e){return e&&e.__esModule?e:{default:e}}t(1251);var p=function(e){function n(){return(0,o.default)(this,n),(0,i.default)(this,(n.__proto__||(0,a.default)(n)).apply(this,arguments))}return(0,r.default)(n,e),(0,l.default)(n,[{key:"render",value:function(){return s.default.createElement(u.Row,{type:"flex",justify:"space-between",align:"middle",className:"prevNextNav"},s.default.createElement(u.Col,null,s.default.createElement("a",{className:"prevPage",href:"javascript:;"},s.default.createElement(d.default,{type:"pro-left",className:"prevIcon"}),s.default.createElement("span",null,"上一页"))),s.default.createElement(u.Col,null,s.default.createElement("a",{className:"prevPage"},s.default.createElement("span",null,"下一页"),s.default.createElement(d.default,{type:"pro-right",className:"prevIcon prevNext"}))))}}]),n}(s.default.Component);n.default=p},function(e,n,t){"use strict";t(1252)},function(e,n,t){},function(e,n,t){e.exports={description:"",displayName:"Color",methods:[],doclets:{},examples:t(1254)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(426)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Color$0 = require('./index.jsx');\nconst Color = Color$0.default || Color$0;",o);e.exports=[{type:"markdown",content:"颜色同字体一样也是构成设计体系的感知性设计模式要素，而清晰有效的感知性设计模式是构筑品牌差异化的重要手段。"},{type:"code",content:"import { Color } from 'dbox-ui';\n\n<Color />",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Grid",examples:t(1256)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(44)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Grid$0 = require('./index.jsx');\nconst Grid = Grid$0.default || Grid$0;",o);e.exports=[{type:"markdown",content:"为在屏幕上和谐一致的定位元素提供依据，24栅格系统有助于提升页面的秩序感和体验。\n\n#### **基本栅格布局**"},{type:"code",content:"import { Row, Col } from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst RowSpace = {\n  marginBottom: '20px'\n}\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Row style={RowSpace}>\n          <Col span={12}>\n            <div style={RowDemoStyle} >col-12</div>\n          </Col>\n          <Col span={12}>\n            <div style={evenColor} >col-12</div>\n          </Col>\n        </Row>\n        <Row style={RowSpace}>\n          <Col span={8}>\n            <div style={RowDemoStyle} >col-8</div>\n          </Col>\n          <Col span={8}>\n            <div style={evenColor} >col-8</div>\n          </Col>\n          <Col span={8}>\n            <div style={RowDemoStyle} >col-8</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={6}>\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={6}>\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={6}>\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={6}>\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **拥有间隔的栅格**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nclass GridView extends React.Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={6}>\n          <div style={RowDemoStyle} >col-6</div>\n        </Col>\n        <Col span={6}>\n          <div style={evenColor} >col-6</div>\n        </Col>\n        <Col span={6}>\n          <div style={RowDemoStyle} >col-6</div>\n        </Col>\n        <Col span={6}>\n          <div style={evenColor} >col-6</div>\n        </Col>\n      </Row>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可以左右偏移的栅格**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst RowSpace = {\n  marginBottom: '20px'\n}\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Row style={RowSpace}>\n          <Col span={6} offset={6}>\n            <div style={RowDemoStyle}>col-6 col-offset-6</div>\n          </Col>\n          <Col span={6} offset={6}>\n            <div style={evenColor} >col-6 col-offset-6</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8} offset={4}>\n            <div style={RowDemoStyle}>col-8 col-offset-4</div>\n          </Col>\n          <Col span={8} offset={4}>\n            <div style={evenColor} >col-8 col-offset-4</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可排序的栅格**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\n\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col span={16} push={8}>\n            <div style={RowDemoStyle}>col-6 col-push-8</div>\n          </Col>\n          <Col span={8} pull={16}>\n            <div style={evenColor} >col-6 col-pull-16</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Flex布局水平对齐**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst headDemo = {\n  margin: '30px 0 10px 0'\n}\nconst alignDemo = {\n      height: '80px',\n      backgroundColor: '#f5f5f5'\n    }\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <h5 style={headDemo}>左对齐</h5>\n        <Row type='flex' justify='start' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>右对齐</h5>\n        <Row type='flex' justify='end' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>居中对齐</h5>\n        <Row type='flex' justify='center' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>两端对齐</h5>\n        <Row type='flex' justify='space-between' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>每个项目两端间隔相等</h5>\n        <Row type='flex' justify='space-around' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Flex布局垂直对齐**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst headDemo = {\n  margin: '30px 0 10px 0'\n}\nconst alignDemo = {\n      height: '80px',\n      backgroundColor: '#f5f5f5'\n    }\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <h5 style={headDemo}>垂直分布在顶部</h5>\n        <Row type='flex' justify='center' align='top' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>垂直分布在中间</h5>\n        <Row type='flex' justify='center' align='middle' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n        <h5 style={headDemo}>垂直分布在低部</h5>\n        <Row type='flex' justify='center' align='bottom' style={alignDemo}>\n          <Col span={4} >\n            <div style={RowDemoStyle}>col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={RowDemoStyle} >col-6</div>\n          </Col>\n          <Col span={4} >\n            <div style={evenColor} >col-6</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Flex排序**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\n const alignDemo = {\n  height: '80px',\n  backgroundColor: '#f5f5f5'\n}\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Row type='flex' justify='space-around' align='middle' style={alignDemo}>\n          <Col span={4} order={4}>\n            <div style={RowDemoStyle} >col-order1</div>\n          </Col>\n          <Col span={4} order={3}>\n            <div style={evenColor} >col-order2</div>\n          </Col>\n          <Col span={4} order={2}>\n            <div style={RowDemoStyle} >col-order3</div>\n          </Col>\n          <Col span={4} order={1}>\n            <div style={evenColor} >col-order4</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义栅格布局**"},{type:"code",content:"import {Row, Col} from 'dbox-ui';\n\nconst RowDemoStyle = {\n  backgroundColor: '#13B886',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst evenColor = {\n  backgroundColor: ' #3CCB69',\n  padding: '10px 0',\n  textAlign: 'center',\n  fontSize: '16px',\n  color: '#fff'\n}\nconst alignDemo = {\n  height: '80px',\n  backgroundColor: '#f5f5f5'\n}\nclass GridView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Row style={alignDemo} type='flex' align='middle'>\n          <Col xs={4} sm={12} md={14} lg={2} xl={12}>\n            <div style={RowDemoStyle}>col-12 </div>\n          </Col>\n          <Col xs={20} sm={12} md={4} lg={22} xl={12}>\n            <div style={evenColor} >col-12</div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n<GridView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Row**\n\n| 参数      | 说明                                                                    | 类型     | 默认值     |\n| ------- | --------------------------------------------------------------------- | ------ | ------- |\n| gutter  | 栅格间隔                                                                  | number | 0       |\n| type    | 布局模式，可选 `flex`，现代浏览器下有效                                               | string |         |\n| align   | flex 布局下的垂直对齐方式：`top` `middle` `bottom`                               | string | `top`   |\n| justify | flex 布局下的水平排列方式：`start` `end` `center` `space-around` `space-between` | string | `start` |\n\n#### **Col**\n\n| 参数     | 说明                                | 类型               | 默认值 |\n| ------ | --------------------------------- | ---------------- | --- |\n| span   | 栅格占位格数，为 0 时相当于 `display: none`   | number           | -   |\n| order  | 栅格顺序，`flex` 布局模式下有效               | number           | 0   |\n| offset | 栅格左侧的间隔格数，间隔内不可以有栅格               | number           | 0   |\n| push   | 栅格向右移动格数                          | number           | 0   |\n| pull   | 栅格向左移动格数                          | number           | 0   |\n| xs     | `<768px` 响应式栅格，可为栅格数或一个包含其他属性的对象  | number or object | -   |\n| sm     | `≥768px` 响应式栅格，可为栅格数或一个包含其他属性的对象  | number or object | -   |\n| md     | `≥992px` 响应式栅格，可为栅格数或一个包含其他属性的对象  | number or object | -   |\n| lg     | `≥1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number or object | -   |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={description:"",methods:[],displayName:"Icon",doclets:{},examples:t(1258)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(21)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Icon$0 = require('./index.jsx');\nconst Icon = Icon$0.default || Icon$0;",o);e.exports=[{type:"markdown",content:"有含义的矢量图形，每一个图标打倒一个敌人。\n\n#### **图标的命名规范**\n\n我们为每个图标赋予了语义化的命名，命名规则如下:\n\n-   实心和描线图标保持同名，用 `-o` 来区分，比如 `question-circle`(实心) 和 `question-circle-o`(描线)；\n\n-   命名顺序：`[icon名]-[形状可选]-[描线与否]-[方向可选]`。\n\n#### **如何使用**\n\n使用 `<Icon />` 标签声明组件，指定图标对应的 type 属性，示例代码如下:"},{type:"code",content:'<Icon type="home" style={{fontSize: 18}} />',settings:{},evalInContext:l},{type:"markdown",content:'最终会渲染为：\n\n```html\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idoll-icon idoll-icon-${type}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>\n```\n\n#### **图标列表**\n\n#### **一. 方向性图标**'},{type:"code",content:"import {Icon} from 'dbox-ui';\nconst icons1 = ['arrows-alt', 'backspace', 'backward', 'caret-down','caret-left', 'caret-right', 'caret-up', 'down', 'forward', 'fullscreen-exit','fullscreen', 'left','left-circle-o', 'menu-fold', 'menu-unfold','redo', 'reply-all','reply','right','right-circle-o','shrink','swap-horiz','swap-vert','undo','up','zoom-out'];\nclass IconView extends React.Component {\n  render() {\n    return (\n      icons1.map(function(val,index){\n      return <li key={val}><Icon type={val}  /><span>{val}</span></li>})\n    )\n  }\n}\n<IconView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **二. 提示建议性图标**"},{type:"code",content:"import {Icon} from 'dbox-ui';\nconst icons2 = ['bars','block','check','check-circle-o','check-circle','checkbox-blank-o', 'checkbox-checked','checkbox-indeterminate','close-circle','close-circle-o','close','delete','done',\n'error-circle-o','error-circle','filter','help-circle-o','help-circle','history', 'info-circle-o','info-circle', 'list','loading','menu','more','plus_box','plus-circle-o',\n'plus-circle','plus','radio-checked','radio-unchecked','refresh','remove-circle-o','remove-circle','remove','search','warning-o','warning'];\n\nclass IconView extends React.Component {\n  render() {\n    return (\n      icons2.map(function(val,index){\n      return <li key={val}><Icon type={val}  /><span>{val}</span></li>})\n    )\n  }\n}\n<IconView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **三. 网站通用图标**"},{type:"code",content:"import {Icon} from 'dbox-ui';\nconst icons4 = ['account-circle-o','account-circle','achievement','appstore-o','assessment','bank-o','bank','book','calendar','chart','clear','clip','clock-o','cloud-download','cloud-upload','cloud','computer','copy','copyright','creditcard','dashboard','download','edit','email','equalizer','explore','eye_close','eye','file','flag','folder','home','hourglass','image','link-off','link','lock','logout','message','notifications','phone','platform','sad','setting','share','smile','star-half','star-o','star','tag','thumb-down','thumb-up','tool','trophy','unlock','upload','user-add','user-group','user','verified','voice','volume-down','volume-mute','volume-off','volume-up','wallet','widgets'];\n\nclass IconView extends React.Component {\n  render() {\n    return (\n      icons4.map(function(val,index){\n      return <li key={val}><Icon type={val}  /><span>{val}</span></li>})\n    )\n  }\n}\n<IconView />",settings:{},evalInContext:l},{type:"markdown",content:"<style>\nli {\n  list-style:none;\n  float:left;\n  width: 25%;\n  font-size:18px;\n  height: 100px;\n  text-align:center;\n  transition: all .2s;\n}\nli:hover i {\n  color: #13B886;\n  transition: all .2s;\n  font-size:32px\n}\nli:hover span {\n  font-size:14px;\n  transition: all .2s;\n}\nli i,li span {\n  display:block;\n}\n\n</style>"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Layout",examples:t(1260)}},function(e,n,t){var a={"dbox-ui":t(18),"dbox-ui/menu":t(129),react:t(1),"./index.jsx":t(400)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Layout$0 = require('./index.jsx');\nconst Layout = Layout$0.default || Layout$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n\\-提供常用网页布局\n\n#### **基础布局**"},{type:"code",content:"import {Layout} from 'dbox-ui';\nconst Header = Layout.Header;\nconst Content = Layout.Content;\nconst Footer = Layout.Footer;\nconst Sider = Layout.Sider;\n<div className='layout_temp'>\n\t<Layout>\n\t\t<Header>头部</Header>\n\t\t<Content>内容</Content>\n\t\t<Footer>底部</Footer>\n\t</Layout>\n\t<br />\n  <Layout>\n    <Header>头部</Header>\n    <Layout>\n      <Sider style={{ lineHight: '20vh' }}>侧边栏</Sider>\n      <Content>内容</Content>\n    </Layout>\n    <Footer>底部</Footer>\n  </Layout>\n\t<br />\n   <Layout>\n    <Sider>侧边栏</Sider>\n    <Layout>\n      <Header>头部</Header>\n      <Content style={{ height: '100%' }}>内容</Content>\n      <Footer>底部</Footer>\n    </Layout>\n  </Layout>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **顶部导航**\n\n顺应了从上至下的正常浏览顺序，方便浏览信息；适用于导航较少，页面篇幅较长的网站。"},{type:"code",content:"import{Menu, Breadcrumb, Layout} from 'dbox-ui';\nimport{SubMenu, MenuItem} from 'dbox-ui/menu';\nconst Header = Layout.Header;\nconst Content = Layout.Content;\nconst Footer = Layout.Footer;\nconst Sider = Layout.Sider;\nclass LayoutView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 'platform'\n    }\n    this.handleClick = this.handleClick.bind(this)\n  };\n  handleClick (e) {\n    this.setState({\n      current: e.key,\n    })\n  }\n  render() {\n  return (\n\t<Layout className='layout-horizontal'>\n\t  <Header>\n\t    <div className='logo'><div>LOGO</div></div>\n\t    <Menu\n\t      onClick={this.handleClick}\n\t      selectedKeys={[this.state.current]}\n\t      mode='horizontal'\n\t      theme='dark'\n\t>\n\t      <Menu.Item key='1'><div>首页</div></Menu.Item>\n\t      <Menu.Item key='2'><div>工作台</div></Menu.Item>\n\t      <SubMenu key='sub1' title={<div>订单中心</div>}>\n\t        <Menu.Item key='3'>子菜单一</Menu.Item>\n\t        <Menu.Item key='4'>子菜单二</Menu.Item>\n\t        <Menu.Item key='5'>子菜单三</Menu.Item>\n\t        <Menu.Item key='6'>子菜单四</Menu.Item>\n\t      </SubMenu>\n\t      <Menu.Item indexkey='tool'>\n\t        <a href='https://www.baidu.com' target='_blank'><div>配置管理</div></a>\n\t      </Menu.Item>\n\t    </Menu>\n\t  </Header>\n\t  <Breadcrumb>\n\t    <Breadcrumb.Item>首页</Breadcrumb.Item>\n\t    <Breadcrumb.Item><a href='javascript:void(0);'>订单中心</a></Breadcrumb.Item>\n\t    <Breadcrumb.Item>子菜单</Breadcrumb.Item>\n\t  </Breadcrumb>\n\t  <Content>\n\t    <div className='content'>内容</div>\n\t  </Content>\n\t</Layout>\n  )\n}\n}\n<LayoutView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **侧边导航-面包屑**\n\n搭配传统面包屑的侧边导航，提高导航可见性，方便页面之间切换，常用于中后台网站。"},{type:"code",content:"import{Menu, Breadcrumb, Avatar, Icon, Dropdown, Layout} from 'dbox-ui';\nimport{SubMenu, MenuItem} from 'dbox-ui/menu';\nconst Header = Layout.Header;\nconst Content = Layout.Content;\nconst Footer = Layout.Footer;\nconst Sider = Layout.Sider;\nconst DropdownNormal = Dropdown.DropdownNormal;\nconst menu = (\n  <Menu theme='light'>\n    <Menu.Item key='2'><a href='https://www.baidu.com' target='_blank'>Alvin</a></Menu.Item>\n    <Menu.Item key='3'><a href='https://www.baidu.com' target='_blank'>Dbox</a></Menu.Item>\n    <Menu.Item key='4'><a href='https://www.baidu.com' target='_blank'>Idoll</a></Menu.Item>\n  </Menu>\n)\nclass LayoutView extends React.Component {\n  constructor(props) {\n    super(props);\n    const panes = [\n      { title: <Icon type='home' />, content: '首页', key: '7' }\n    ];\n    this.state = {\n      current: 'home',\n      flag: false,\n      openKeys: ['item_1'],\n      modeMenu: 'inline',\n      mode: 'top',\n      panes,\n      activeKey: panes[0].key\n    }\n    this.handleClickBread = this.handleClickBread.bind(this)\n    this.changeModel = this.changeModel.bind(this)\n    this.onOpenChange = this.onOpenChange.bind(this)\n    this.inlineMenu = this.inlineMenu.bind(this)\n  };\n  handleClickBread (e) {\n    this.setState({\n      current: e.key,\n    })\n  }\n  changeModel () {\n    this.setState({\n      modeMenu: !this.state.flag ? 'vertical' : 'inline',\n      flag: !this.state.flag,\n      openKeys: [],\n    })\n  }\n  onOpenChange (openKeys) {\n    const latestOpenKey = openKeys.find(i => this.state.openKeys.indexOf(i) === -1);\n      this.setState({\n        openKeys: latestOpenKey ? [latestOpenKey] : [],\n      });\n  }\n  inlineMenu () {\n    if (this.state.flag) {\n      return <Menu\n        onClick={this.handleClickBread}\n        defaultSelectedKeys={['7']}\n        mode={this.state.modeMenu}\n>\n        <Menu.Item key='7'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n        <SubMenu key='item_1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n          <Menu.Item key='8'>子菜单一</Menu.Item>\n          <Menu.Item key='9'>子菜单二</Menu.Item>\n          <Menu.Item key='10'>子菜单三</Menu.Item>\n          <Menu.Item key='11'>子菜单四</Menu.Item>\n        </SubMenu>\n        <SubMenu key='item_2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n          <Menu.Item key='12'>子菜单五</Menu.Item>\n          <Menu.Item key='13'>子菜单六</Menu.Item>\n          <Menu.Item key='14'>子菜单七</Menu.Item>\n          <Menu.Item key='15'>子菜单八</Menu.Item>\n        </SubMenu>\n        <SubMenu key='item_3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n          <Menu.Item key='16'>子菜单九</Menu.Item>\n          <Menu.Item key='17'>子菜单十</Menu.Item>\n          <Menu.Item key='18'>子菜单十一</Menu.Item>\n          <Menu.Item key='19'>子菜单十二</Menu.Item>\n        </SubMenu>\n      </Menu>\n    } else {\n      return <Menu\n        onClick={this.handleClickBread}\n        defaultSelectedKeys={['7']}\n        openKeys={this.state.openKeys}\n        onOpenChange={this.onOpenChange}\n        mode={this.state.modeMenu}\n>\n        <Menu.Item key='7'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n        <SubMenu key='item_1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n          <Menu.Item key='8'>子菜单一</Menu.Item>\n          <Menu.Item key='9'>子菜单二</Menu.Item>\n          <Menu.Item key='10'>子菜单三</Menu.Item>\n          <Menu.Item key='11'>子菜单四</Menu.Item>\n        </SubMenu>\n        <SubMenu key='item_2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n          <Menu.Item key='12'>子菜单五</Menu.Item>\n          <Menu.Item key='13'>子菜单六</Menu.Item>\n          <Menu.Item key='14'>子菜单七</Menu.Item>\n          <Menu.Item key='15'>子菜单八</Menu.Item>\n        </SubMenu>\n        <SubMenu key='item_3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n          <Menu.Item key='16'>子菜单九</Menu.Item>\n          <Menu.Item key='17'>子菜单十</Menu.Item>\n          <Menu.Item key='18'>子菜单十一</Menu.Item>\n          <Menu.Item key='19'>子菜单十二</Menu.Item>\n        </SubMenu>\n      </Menu>\n    }\n  }\n  render() {\n  return (\n    <div className='layout-inlineNav'>\n      <Layout>\n        <Sider >\n          <div className={this.state.flag ? 'miniLogo' : 'logo'}><div>LOGO</div></div>\n          {this.inlineMenu()}\n          <Icon type={this.state.flag ? 'right-circle-o' : 'left-circle-o'} onClick={this.changeModel} />\n        </Sider>\n        <Layout>\n          <Header style={{height: '56px'}} >\n            <Icon type='message' />\n            <Avatar size='small' style={{ marginRight: 47 }} src='https://images.pexels.com/users/avatars/26735/lisa-fotios-223.jpeg?w=60&h=60&fit=crop&crop=faces' alt='DBox' />\n            <DropdownNormal overlay={menu} type='caret-down' trigger={['hover']} >\n              Alvin\n            </DropdownNormal>\n          </Header>\n          <Breadcrumb>\n            <Breadcrumb.Item>首页</Breadcrumb.Item>\n            <Breadcrumb.Item><a href='javascript:void(0);'>订单中心</a></Breadcrumb.Item>\n            <Breadcrumb.Item>子菜单</Breadcrumb.Item>\n          </Breadcrumb>\n          <Content>\n            <div className='content'>内容</div>\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  )\n}\n}\n<LayoutView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **侧边导航-Tab页**\n\n用Tab页签代替面包屑的侧边导航，提高常用页面切换的灵活性。"},{type:"code",content:"import{Menu, Breadcrumb, Avatar, Tabs, Icon, Dropdown, Layout} from 'dbox-ui';\nimport{SubMenu, MenuItem} from 'dbox-ui/menu';\nconst TabPane = Tabs.TabPane;\nconst Header = Layout.Header;\nconst Content = Layout.Content;\nconst Footer = Layout.Footer;\nconst Sider = Layout.Sider;\nconst DropdownNormal = Dropdown.DropdownNormal;\nconst menu = (\n  <Menu theme='light'>\n    <Menu.Item key='2'><a href='https://www.baidu.com' target='_blank'>Alvin</a></Menu.Item>\n    <Menu.Item key='3'><a href='https://www.baidu.com' target='_blank'>Dbox</a></Menu.Item>\n    <Menu.Item key='4'><a href='https://www.baidu.com' target='_blank'>Idoll</a></Menu.Item>\n  </Menu>\n)\nconst array = [];\nclass LayoutView extends React.Component {\n  constructor(props) {\n    super(props);\n    const panes = [\n      { title: <Icon type='home' />, content: '首页', key: '27' }\n    ];\n    this.state = {\n      openKeys: ['sub1'],\n      flag: false,\n      current: 'platform',\n      modeMenu: 'inline',\n      mode: 'top',\n      panes,\n      activeKey: panes[0].key\n    }\n    this.handleClickTabs = this.handleClickTabs.bind(this)\n    this.changeModel = this.changeModel.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.onEdit = this.onEdit.bind(this)\n    this.add = this.add.bind(this)\n    this.remove = this.remove.bind(this)\n    this.onOpenChange = this.onOpenChange.bind(this)\n    this.inlineMenu = this.inlineMenu.bind(this)\n  };\n  onOpenChange (openKeys) {\n    const latestOpenKey = openKeys.find(i => this.state.openKeys.indexOf(i) === -1);\n      this.setState({\n        openKeys: latestOpenKey ? [latestOpenKey] : [],\n      });\n  }\n  handleClickTabs (e) {\n    array.push(...e.keyPath)\n    this.setState({\n      current: e.key,\n      activeKey: e.key\n    });\n    if (this.state.panes.findIndex(i => i.key === e.key) !== -1) {\n      return false\n    } else {\n      this.add(e.key, e.item.props.title)\n    }\n    console.log(array)\n  }\n  changeModel () {\n    this.setState({\n      modeMenu: !this.state.flag ? 'vertical' : 'inline',\n      flag: !this.state.flag,\n      openKeys: [],\n    })\n  }\n  onChange (activeKey) {\n    const id = array.indexOf(activeKey) + 1\n    this.setState({ activeKey, openKeys: [array[id]] });\n  }\n  onEdit (targetKey, action) {\n    this[action](targetKey);\n  }\n  add (key, title) {\n    const panes = this.state.panes;\n    const activeKey = key;\n    panes.push({ title: title, content: title, key: activeKey });\n    this.setState({panes, activeKey});\n  }\n  remove (targetKey) {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    const id = array.indexOf(activeKey) + 1\n    this.setState({\n      panes,\n      activeKey,\n      openKeys: [array[id]]});\n  }\n  inlineMenu () {\n    if (this.state.flag) {\n      return <Menu\n        onClick={this.handleClickTabs}\n        defaultSelectedKeys={['27']}\n        selectedKeys={[this.state.activeKey]}\n        mode={this.state.modeMenu}\n>\n        <Menu.Item title='首页' key='27'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n        <SubMenu key='sub1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n          <Menu.Item title='子菜单一' key='28'>子菜单一</Menu.Item>\n          <Menu.Item title='子菜单二' key='29'>子菜单二</Menu.Item>\n          <Menu.Item title='子菜单三' key='30'>子菜单三</Menu.Item>\n          <Menu.Item title='子菜单四' key='31'>子菜单四</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n          <Menu.Item title='子菜单五' key='32'>子菜单五</Menu.Item>\n          <Menu.Item title='子菜单六' key='33'>子菜单六</Menu.Item>\n          <Menu.Item title='子菜单七' key='34'>子菜单七</Menu.Item>\n          <Menu.Item title='子菜单八' key='35'>子菜单八</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n          <Menu.Item title='子菜单九' key='36'>子菜单九</Menu.Item>\n          <Menu.Item title='子菜单十' key='37'>子菜单十</Menu.Item>\n          <Menu.Item title='子菜单十一' key='38'>子菜单十一</Menu.Item>\n          <Menu.Item title='子菜单十二' key='39'>子菜单十二</Menu.Item>\n        </SubMenu>\n      </Menu>\n    } else {\n      return <Menu\n        onClick={this.handleClickTabs}\n        defaultSelectedKeys={['27']}\n        selectedKeys={[this.state.activeKey]}\n        openKeys={this.state.openKeys}\n        onOpenChange={this.onOpenChange}\n        mode={this.state.modeMenu}\n>\n        <Menu.Item title='首页' key='27'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n        <SubMenu key='sub1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n          <Menu.Item title='子菜单一' key='28'>子菜单一</Menu.Item>\n          <Menu.Item title='子菜单二' key='29'>子菜单二</Menu.Item>\n          <Menu.Item title='子菜单三' key='30'>子菜单三</Menu.Item>\n          <Menu.Item title='子菜单四' key='31'>子菜单四</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n          <Menu.Item title='子菜单五' key='32'>子菜单五</Menu.Item>\n          <Menu.Item title='子菜单六' key='33'>子菜单六</Menu.Item>\n          <Menu.Item title='子菜单七' key='34'>子菜单七</Menu.Item>\n          <Menu.Item title='子菜单八' key='35'>子菜单八</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n          <Menu.Item title='子菜单九' key='36'>子菜单九</Menu.Item>\n          <Menu.Item title='子菜单十' key='37'>子菜单十</Menu.Item>\n          <Menu.Item title='子菜单十一' key='38'>子菜单十一</Menu.Item>\n          <Menu.Item title='子菜单十二' key='39'>子菜单十二</Menu.Item>\n        </SubMenu>\n      </Menu>\n    }\n  }\n  render() {\n  return (\n    <div className='layout-inlineNav inlineTabs'>\n      <Layout>\n        <Sider >\n          <div className={this.state.flag ? 'miniLogo' : 'logo'}><div>LOGO</div></div>\n          {this.inlineMenu()}\n          <Icon type={this.state.flag ? 'right-circle-o' : 'left-circle-o'} onClick={this.changeModel} />\n        </Sider>\n        <Layout>\n          <Header style={{height: '56px'}} >\n            <Icon type='message' />\n            <Avatar size='small' src='https://images.pexels.com/users/avatars/26735/lisa-fotios-223.jpeg?w=60&h=60&fit=crop&crop=faces' alt='DBox' />\n            <DropdownNormal overlay={menu} type='caret-down' trigger={['hover']} >\n              Alvin\n            </DropdownNormal>\n          </Header>\n          <Content>\n            <Tabs hideAdd onChange={this.onChange} activeKey={this.state.activeKey} type='editable-card' onEdit={this.onEdit}>\n              {this.state.panes.map(pane => <TabPane closable={pane.key === '27' ? false : 'true'} tab={pane.title} key={pane.key}>{pane.content}</TabPane>)}\n            </Tabs>\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  )\n}\n}\n<LayoutView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\nLayout\n\n| 参数        | 说明                                   | 类型      | 默认值 |\n| --------- | ------------------------------------ | ------- | --- |\n| className | 容器 className                         | string  | -   |\n| hasSider  | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | boolean | -   |\n| style     | 样式                                   | object  | -   |\n\n\\-具体API可参考使用的组件API"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={description:"",displayName:"Typography",methods:[],doclets:{},examples:t(1262)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(425)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Typography$0 = require('./index.jsx');\nconst Typography = Typography$0.default || Typography$0;",o);e.exports=[{type:"markdown",content:"字体是产品界面设计中感知性设计模式的要素之一，是设计模式可视化的内容和完成工作的主要方式，科学有序的字体系统可以有效提升产品的阅读体验。因此我们在进行大量的尝试和研究对比主流设计体系之后，制定出一套（以下）系统字体来处理 DBox 产品中所有标准字体，以确保使用 DBox 设计体系产出的产品或系统具有阅读清晰、层次分明和性能良好的特点。"},{type:"code",content:"import {Typography} from 'dbox-ui';\n\n<Typography />",settings:{noeditor:!0},evalInContext:l},{type:"code",content:"import { BackTop } from 'dbox-ui';\n\n<BackTop visibilityHeight={10}/>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Affix",examples:t(1264)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(171)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Affix$0 = require('./index.jsx');\nconst Affix = Affix$0.default || Affix$0;",o);e.exports=[{type:"markdown",content:"将元素固定在特定区域，一般用于导航栏或反馈按钮。\n\n#### **固定在顶部**"},{type:"code",content:"import { Affix, Button } from 'dbox-ui';\n\nclass AffixView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      top: 30,\n    }\n  }\n  render() {\n    return (\n      <Affix offsetTop={this.state.top} ref='box_affix'>\n        <Button  >距离顶部30px触发</Button>\n      </Affix>\n    )\n  }\n}\n<AffixView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **固定在底部**"},{type:"code",content:"import { Affix, Button } from 'dbox-ui';\n\nconst AffixView = () => {\n  return (\n    <Affix offsetBottom={0} onChange={affixed => console.log(affixed)}>\n      <Button >距离底部0px触发</Button>\n    </Affix>\n  )\n}\n<AffixView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **固定在容器**"},{type:"code",content:"import { Affix, Button } from 'dbox-ui';\n\nclass AffixView extends React.Component{\n  render() {\n    return (\n      <div ref={(node) => { this.container = node; }}>\n        <div style={{backgroundColor: '#dedede', padding: '10px 0'}}>\n          <Affix target={() => this.container}>\n            <Button type=\"primary\">\n                固定在容器的顶部\n            </Button>\n          </Affix>\n        </div>\n      </div>\n    )\n  }\n}\n<AffixView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 成员           | 说明                                         | 类型                | 默认值          |\n| ------------ | ------------------------------------------ | ----------------- | ------------ |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发                           | number            |              |\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发                           | number            |              |\n| target       | 设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | () => HTMLElement | () => window |\n| onChange     | 固定状态改变时触发的回调函数                             | Function(affixed) | 无            |\n\n**注意：**`Affix` 内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接设置 `Affix` 为绝对定位："},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Breadcrumb",examples:t(1266)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(249)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Breadcrumb$0 = require('./index.jsx');\nconst Breadcrumb = Breadcrumb$0.default || Breadcrumb$0;",o);e.exports=[{type:"markdown",content:"帮助用户查看当前所处的位置。\n\n#### **基本用法**"},{type:"code",content:"import { Breadcrumb } from 'dbox-ui';\nclass BreadcrumbView extends React.Component {\n  render() {\n    return (\n      <Breadcrumb>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item><a href='javascript:void(0);'>个人中心</a></Breadcrumb.Item>\n        <Breadcrumb.Item>设置</Breadcrumb.Item>\n      </Breadcrumb>\n    )\n  }\n}\n<BreadcrumbView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **带图标的**"},{type:"code",content:"import { Breadcrumb, Icon } from 'dbox-ui';\n\nclass BreadcrumbView extends React.Component {\n  render() {\n    return (\n      <Breadcrumb>\n        <Breadcrumb.Item href='#'>\n          <Icon type='home' />\n        </Breadcrumb.Item>\n        <Breadcrumb.Item href='#'>\n          <Icon type='user' />\n          <span>点击</span>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>\n          点击\n        </Breadcrumb.Item>\n      </Breadcrumb>\n    )\n  }\n}\n<BreadcrumbView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义分隔符**"},{type:"code",content:"import { Breadcrumb } from 'dbox-ui';\n\nclass BreadcrumbView extends React.Component {\n  render() {\n    return (\n      <Breadcrumb separator='>'>\n        <Breadcrumb.Item>首页</Breadcrumb.Item>\n        <Breadcrumb.Item><a href='javascript:void(0);'>个人中心</a></Breadcrumb.Item>\n        <Breadcrumb.Item>设置</Breadcrumb.Item>\n      </Breadcrumb>\n    )\n  }\n}\n<BreadcrumbView />",settings:{},evalInContext:l},{type:"markdown",content:'#### **API**\n\n| 参数        | 说明     | 类型                | 默认值 |\n| --------- | ------ | ----------------- | --- |\n| separator | 分隔符自定义 | string\\\\ReactNode | \'/\' |\n\n#### **与browserHistory配合**\n\n```html\nimport { Link } from \'react-router\';\n\nconst routes = [{\n  path: \'index\',\n  breadcrumbName: \'首页\'\n}, {\n  path: \'first\',\n  breadcrumbName: \'一级面包屑\'\n}, {\n  path: \'second\',\n  breadcrumbName: \'当前页面\'\n}];\nfunction itemRender(route, params, routes, paths) {\n  const last = routes.indexOf(route) === routes.length - 1;\n  return last ? <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{route.breadcrumbName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> : &lt;Link to={paths.join(\'/\')}>{route.breadcrumbName}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>;\n}\n\nreturn <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Breadcrumb</span> <span class="token attr-name">itemRender</span><span class="token attr-value"><span class="token punctuation">=</span>{itemRender}</span> <span class="token attr-name">routes</span><span class="token attr-value"><span class="token punctuation">=</span>{routes}/</span><span class="token punctuation">></span></span>;\n```'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Dropdown",examples:t(1268)}},function(e,n,t){var a={"dbox-ui":t(18),"dbox-ui/menu":t(129),react:t(1),"./index.jsx":t(176)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Dropdown$0 = require('./index.jsx');\nconst Dropdown = Dropdown$0.default || Dropdown$0;",o);e.exports=[{type:"markdown",content:"##### **概述**\n\n使用下拉菜单从一组选项中选择一个或多个选项，下拉菜单中的选项一般为5-15个\n\n##### **基本用法**\n\n只允许用户选择单个选项，其中按钮提供文字按钮和默认按钮两种样式。触发对象可以是链接、按钮等各种元素。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst DropdownButton = Dropdown.DropdownButton;\nconst DropdownNormal = Dropdown.DropdownNormal;\nconst menu2 = (\n      <Menu theme = 'light' onClick={handleMenu1Click}>\n        <MenuItem key='2.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n        <MenuItem key='2.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n        <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n      </Menu>\n    );\nconst menu1 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleButtonClick(e) {\n  console.info('click left button', e);\n};\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\n<div>\n\t<DropdownNormal overlay={menu2} type='caret-down' trigger={['hover']} >\n\t  下拉菜单\n\t</DropdownNormal>\n\t<Dropdown overlay={menu1} trigger={['hover']} onClick={this.handleButtonClick}>\n\t  <Button>\n\t  默认菜单\n\t  </Button>\n\t</Dropdown>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **常用类型**\n\n通过 type 属性可设置下拉菜单按钮的样式。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst DropdownButton = Dropdown.DropdownButton;\nconst DropdownNormal = Dropdown.DropdownNormal;\nconst menu4 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'><Icon type='bars' />操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'><Icon type='bars' />操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'><Icon type='bars' />操作选项</a></MenuItem>\n  </Menu>\n);\nconst menu2 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='2.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nconst menu = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleButtonClick(e) {\n  console.info('click left button', e);\n};\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\n<div>\n    <Dropdown overlay={menu4} trigger={['hover']} onClick={handleButtonClick}>\n      <Button>\n        默认菜单\n      </Button>\n    </Dropdown>\n    <Dropdown overlay={menu4} trigger={['hover']} onClick={handleButtonClick}>\n      <Button style={{marginLeft: '50px', marginRight: '50px' }} type='primary'>\n        主要菜单\n      </Button>\n    </Dropdown>\n    <Dropdown overlay={menu4} trigger={['hover']} onClick={handleButtonClick}>\n      <Button type='secondary'>\n        次要菜单\n      </Button>\n    </Dropdown>\n    <DropdownButton  style={{marginLeft: '50px', marginRight: '50px' }} disabled overlay={menu4} trigger={['hover']} onClick={handleButtonClick}>\n      禁用菜单\n    </DropdownButton>\n    <DropdownNormal overlay={menu2} type='caret-down' trigger={['hover']} >\n      文本菜单\n    </DropdownNormal>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **组合使用**\n\n在一组按钮中可放置一个Dropdown按钮，常置于最右侧。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst ButtonGroup = Button.Group;\nconst DropdownButton = Dropdown.DropdownButton;const menu1 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\n\n<ButtonGroup className='ButtonGroup'>\n  <Button>\n    操作一\n  </Button>\n  <Button>\n    操作二\n  </Button>\n  <DropdownButton style={{float: 'none'}} overlay={menu1} trigger={['hover']}>\n  操作三\n  </DropdownButton>\n</ButtonGroup>",settings:{},evalInContext:l},{type:"markdown",content:"##### **三种尺寸**\n\n通过 size 属性设置为 large small 来控制大、小尺寸，默认尺寸为中。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst DropdownButton = Dropdown.DropdownButton;\nconst menu2 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='2.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\n<div>\n\t<DropdownButton size='small' overlay={menu2} trigger={['hover']}>\n      默认菜单\n    </DropdownButton>\n    <DropdownButton style={{marginLeft: '50px', marginRight: '50px' }} overlay={menu2} trigger={['hover']}>\n      默认菜单\n    </DropdownButton>\n    <DropdownButton size='large' overlay={menu2} trigger={['hover']}>\n      默认菜单\n    </DropdownButton>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **弹出位置**\n\n通过 placement 属性来设置弹框弹出位置，支持6个方向。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst menu = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\n<div>\n\t<Dropdown overlay={menu} placement='topLeft'>\n      <Button>上左</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement='topCenter'>\n      <Button  style={{marginLeft: 25, marginRight: 25}}>上中</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement='topRight'>\n      <Button>上右</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement='bottomLeft'>\n      <Button  style={{marginLeft: 25, marginRight: 25}}>下左</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement='bottomCenter'>\n      <Button>下中</Button>\n    </Dropdown>\n    <Dropdown overlay={menu} placement='bottomRight'>\n      <Button style={{marginLeft: 25}}>下右</Button>\n    </Dropdown>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **触发方式**\n\n通过 trigger 属性设置为 hover click 来控制触发方式，默认鼠标移入触发弹框。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst DropdownNormal = Dropdown.DropdownNormal;\nconst menu = (\n  <Menu theme = 'light'onClick={handleMenu1Click}>\n    <MenuItem key='1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nconst menu2 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='2.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\nfunction handleButtonClick(e) {\n  console.info('click left button', e);\n};\n<div>\n\t<DropdownNormal overlay={menu2} type='caret-down' trigger={['click']} >\n      点击下拉菜单\n    </DropdownNormal>\n    <Dropdown overlay={menu} trigger={['hover']} onClick={handleButtonClick}>\n      <Button>\n      hover默认菜单\n      </Button>\n    </Dropdown>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **触发事件**\n\n点击菜单触发相应事件，用户可以通过相应的菜单项 key 进行不同的操作。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst menu = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='2.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n  </Menu>\n);\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};\nonVisibleChangeBtn = (visible) => {\nconsole.log(`按钮菜单发生了变化====>${visible}`)\n};\nfunction handleButtonClick(e) {\n  console.info('click left button', e);\n};\n<Dropdown overlay={menu} trigger={['hover']} onVisibleChange={this.onVisibleChangeBtn} onClick={handleButtonClick}>\n  <Button>\n  hover默认菜单\n  </Button>\n</Dropdown>",settings:{},evalInContext:l},{type:"markdown",content:"##### **多级菜单**\n\n弹出框里的菜单支持多级传入。"},{type:"code",content:"import {Icon, Button, Dropdown, Menu} from 'dbox-ui'\nimport { MenuItem, SubMenu} from 'dbox-ui/menu';\nconst menu1 = (\n  <Menu theme = 'light' onClick={handleMenu1Click}>\n    <MenuItem key='1.1'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <MenuItem key='1.2'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    <SubMenu title='子菜单'>\n      <MenuItem key='2.3'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n      <MenuItem key='2.4'><a href='https://www.baidu.com' target='_blank'>操作选项</a></MenuItem>\n    </SubMenu>\n  </Menu>\n)\nfunction handleMenu1Click(e) {\n  console.info('click', e);\n};const DropdownButton = Dropdown.DropdownButton;\n<DropdownButton placement='bottomLeft' overlay={menu1} trigger={['hover']}>\n  默认菜单\n</DropdownButton>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 参数              | 说明                          | 类型                                                                                  | 默认值          |\n| --------------- | --------------------------- | ----------------------------------------------------------------------------------- | ------------ |\n| trigger         | 触发下拉的行为                     | ['click'] or ['hover']                                                              | ['hover']    |\n| placement       | 菜单弹出位置                      | string (`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`) | `bottomLeft` |\n| overlay         | 菜单                          | Menu                                                                                | -            |\n| disabled        | 菜单是否禁用搭配按钮一起使用并放置于按钮身上      | `boolean`                                                                           | false        |\n| visible         | 菜单是否显示                      | Bool                                                                                | 无            |\n| onVisibleChange | 菜单显示状态改变时调用，参数为 { visible } | Function                                                                            | -            |\n\n#### **DropdownButton**\n\n| 参数        | 说明                      | 类型                                                                                  | 默认值          |\n| --------- | ----------------------- | ----------------------------------------------------------------------------------- | ------------ |\n| type      | 按钮类型，和 `Button` 一致      | String                                                                              | -            |\n| onClick   | 点击左侧按钮的回调，和 `Button` 一致 | Function                                                                            | -            |\n| trigger   | 触发下拉的行为                 | ['click'] or ['hover']                                                              | ['hover']    |\n| overlay   | 菜单                      | `Menu`                                                                              | -            |\n| disabled  | 菜单是否禁用                  | `boolean`                                                                           | false        |\n| visible   | 菜单是否显示                  | Bool                                                                                | 无            |\n| placement | 菜单弹出位置                  | string (`bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`) | `bottomLeft` |\n| size      | 按钮菜单大小和Button一致         | string (`large` `small`)                                                            | -            |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Menu",examples:t(1270)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(129)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Menu$0 = require('./index.jsx');\nconst Menu = Menu$0.default || Menu$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n提供导航的功能菜单。\n\n#### **顶部导航**\n\n广泛适用的顶部导航。通过 theme 属性设置为 light dark 切换主题模式。"},{type:"code",content:"import {Menu} from 'dbox-ui';\nconst SubMenu = Menu.SubMenu;\nclass MenuView extends React.Component {\n  constructor(props) {\n    super(props);\n\t  this.state = {\n\t    current: 'home'\n\t  }\n\t  this.handleClick = this.handleClick.bind(this)\n  };\n  handleClick (e) {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  render() {\n  return (\n    <Menu\n      onClick={this.handleClick}\n      selectedKeys={[this.state.current]}\n      mode='horizontal'\n      theme='dark'\n    >\n      <Menu.Item key='home'>首页</Menu.Item>\n      <Menu.Item key='platform' disabled>工作台</Menu.Item>\n      <SubMenu key='bars' title={<span>订单中心</span>}>\n        <Menu.Item key='1'>子菜单一</Menu.Item>\n        <Menu.Item key='2'>子菜单二</Menu.Item>\n        <Menu.Item key='3'>子菜单三</Menu.Item>\n        <Menu.Item key='4'>子菜单四</Menu.Item>\n      </SubMenu>\n      <Menu.Item key='tool'>\n        <a href='https://www.baidu.com' target='_blank' rel='noopener noreferrer'>配置管理</a>\n      </Menu.Item>\n    </Menu>\n  )\n}\n}\n<MenuView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **手风琴菜单**\n\n每次只打开一个菜单，其他菜单自动收起，使菜单简洁聚焦，同时避免同时展开多个菜单，导致侧边导航文字溢出。"},{type:"code",content:"import {Menu, Icon} from 'dbox-ui';\nconst SubMenu = Menu.SubMenu;\nconst\trootSubmenuKeys = ['sub_1', 'sub_2', 'sub3_'];\nclass MenuView extends React.Component {\n  constructor(props) {\n    super(props);\n\t  this.state = {\n      openKeys: ['sub_1'],\n\t    current: 'home'\n\t  }\n\t  this.onOpenChange = this.onOpenChange.bind(this)\n  };\n  onOpenChange (value) {\n    const latestOpenKey = value.find(key => this.state.openKeys.indexOf(key) === -1);\n      this.setState({\n        openKeys: latestOpenKey ? [latestOpenKey] : [],\n      });\n  }\n  render() {\n  return (\n        <Menu\n          onClick={this.handleClick}\n          defaultSelectedKeys={['55']}\n          openKeys={this.state.openKeys}\n          onOpenChange={this.onOpenChange}\n          mode='inline'\n        >\n          <Menu.Item key='55'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n          <SubMenu key='sub_1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n            <Menu.Item key='56'>子菜单一</Menu.Item>\n            <Menu.Item key='57'>子菜单二</Menu.Item>\n            <Menu.Item key='58'>子菜单三</Menu.Item>\n            <Menu.Item key='59'>子菜单四</Menu.Item>\n          </SubMenu>\n          <SubMenu key='sub_2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n            <Menu.Item key='60'>子菜单五</Menu.Item>\n            <Menu.Item key='61'>子菜单六</Menu.Item>\n            <Menu.Item key='62'>子菜单七</Menu.Item>\n            <Menu.Item key='63'>子菜单八</Menu.Item>\n          </SubMenu>\n          <SubMenu key='sub_3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n            <Menu.Item key='64'>子菜单九</Menu.Item>\n            <Menu.Item key='65'>子菜单十</Menu.Item>\n            <Menu.Item key='66'>子菜单十一</Menu.Item>\n            <Menu.Item key='67'>子菜单十二</Menu.Item>\n          </SubMenu>\n        </Menu>\n  )\n}\n}\n<MenuView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **内嵌侧栏导航**\n\n垂直导航的基本使用，支持展开/收起。"},{type:"code",content:"import {Menu, Switch, Icon} from 'dbox-ui';\nconst SubMenu = Menu.SubMenu;\nclass MenuView extends React.Component {\n  constructor(props) {\n    super(props);\n\t  this.state = {\n      current: 'home',\n      mode: 'inline',\n\t  }\n\t  this.handleClick = this.handleClick.bind(this)\n\t  this.changeMode = this.changeMode.bind(this)\n  };\n  handleClick (e) {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  changeMode (value) {\n    this.setState({\n      mode: value ? 'vertical' : 'inline',\n    });\n  }\n  render() {\n  return (\n    <div>\n      <Switch\n        onChange={this.changeMode}\n        type='primary'\n        checkedChildren='折叠'\n        unCheckedChildren='展开'\n      />\n      <br />\n      <Menu\n        onClick={this.handleClick}\n        defaultSelectedKeys={['5']}\n        mode={this.state.mode}\n      >\n      <Menu.Item key='5'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n      <SubMenu key='sub1' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n        <Menu.Item key='6'>子菜单一</Menu.Item>\n        <Menu.Item key='7'>子菜单二</Menu.Item>\n        <Menu.Item key='8'>子菜单三</Menu.Item>\n        <Menu.Item key='9'>子菜单四</Menu.Item>\n      </SubMenu>\n      <SubMenu key='sub2' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n        <Menu.Item key='10'>子菜单五</Menu.Item>\n        <Menu.Item key='11'>子菜单六</Menu.Item>\n        <Menu.Item key='12'>子菜单七</Menu.Item>\n        <Menu.Item key='13'>子菜单八</Menu.Item>\n      </SubMenu>\n      <SubMenu key='sub3' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n        <Menu.Item key='14'>子菜单九</Menu.Item>\n        <Menu.Item key='15'>子菜单十</Menu.Item>\n        <Menu.Item key='16'>子菜单十一</Menu.Item>\n        <Menu.Item key='17'>子菜单十二</Menu.Item>\n      </SubMenu>\n    </Menu>\n  </div>\n  )\n}\n}\n<MenuView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **动态侧栏导航**\n\n支持两种主题切换,垂直导航的基本使用，支持展开/收起。"},{type:"code",content:"import {Menu, Switch, Icon} from 'dbox-ui';\nconst SubMenu = Menu.SubMenu;\nclass MenuView extends React.Component {\n  constructor(props) {\n    super(props);\n\t  this.state = {\n\t  \tcurrent: 'platform',\n      theme: 'light',\n\t    mode: 'inline',\n\t  }\n\t  this.handleClick = this.handleClick.bind(this)\n\t  this.changeMode = this.changeMode.bind(this)\n\t  this.changeTheme = this.changeTheme.bind(this)\n  };\n   handleClick (e) {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  }\n  changeTheme (value) {\n    this.setState({\n      theme: value ? 'light' : 'dark',\n    })\n  }\n  changeMode (value) {\n    this.setState({\n      mode: value ? 'vertical' : 'inline',\n    });\n  }\n  render() {\n  return (\n\t<div>\n      <Switch\n        checked={this.state.theme === 'light'}\n        onChange={this.changeTheme}\n        checkedChildren='浅色'\n        unCheckedChildren='深色'\n      />\n      <Switch\n      \tonChange={this.changeMode}\n      \ttype='primary'\n        checkedChildren='折叠'\n        unCheckedChildren='展开'\n      \t/>\n      <br />\n      <Menu\n        theme={this.state.theme}\n        onClick={this.handleClick}\n        mode={this.state.mode}\n        defaultSelectedKeys={['21']}\n        defaultOpenKeys={['sub11']}\n      >\n        <Menu.Item key='21'><div><Icon type='home' /><span>首页</span></div></Menu.Item>\n        <SubMenu key='sub11' title={<div><Icon type='platform' /><span>工作台</span></div>}>\n          <Menu.Item key='22'>子菜单五</Menu.Item>\n          <Menu.Item key='23'>子菜单六</Menu.Item>\n          <Menu.Item key='24'>子菜单七</Menu.Item>\n          <Menu.Item key='25'>子菜单八</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub12' title={<div><Icon type='bars' /><span>订单中心</span></div>}>\n          <Menu.Item key='26'>子菜单九</Menu.Item>\n          <Menu.Item key='27'>子菜单十</Menu.Item>\n          <Menu.Item key='28'>子菜单十一</Menu.Item>\n          <Menu.Item key='29'>子菜单十二</Menu.Item>\n        </SubMenu>\n        <SubMenu key='sub13' title={<div><Icon type='tool' /><span>配置管理</span></div>}>\n          <Menu.Item key='30'>子菜单九</Menu.Item>\n          <Menu.Item key='31'>子菜单十</Menu.Item>\n          <Menu.Item key='32'>子菜单十一</Menu.Item>\n          <Menu.Item key='33'>子菜单十二</Menu.Item>\n        </SubMenu>\n      </Menu>\n\t</div>\n  )\n}\n}\n<MenuView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Menu**\n\n| 参数                  | 说明                       | 类型                                                        | 默认值        |\n| ------------------- | ------------------------ | --------------------------------------------------------- | ---------- |\n| defaultOpenKeys     | 初始展开的 SubMenu 菜单项 key 数组 |                                                           |            |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组          | string\\[]                                                 |            |\n| forceSubMenuRender  | 在子菜单展示之前就渲染进 DOM         | boolean                                                   | false      |\n| mode                | 菜单类型，现在支持垂直、水平、和内嵌模式三种   | string: `vertical` `vertical-right` `horizontal` `inline` | `vertical` |\n| multiple            | 是否允许多选                   | boolean                                                   | false      |\n| openKeys            | 当前展开的 SubMenu 菜单项 key 数组 | string\\[]                                                 |            |\n| selectable          | 是否允许选中                   | boolean                                                   | true       |\n| selectedKeys        | 当前选中的菜单项 key 数组          | string\\[]                                                 |            |\n| style               | 根节点样式                    | object                                                    |            |\n| subMenuCloseDelay   | 用户鼠标离开子菜单后关闭延时，单位：秒      | number                                                    | 0.1        |\n| subMenuOpenDelay    | 用户鼠标进入子菜单后开启延时，单位：秒      | number                                                    | 0          |\n| theme               | 主题颜色                     | string: `light` `dark`                                    | `dark`     |\n| onClick             | 点击 MenuItem 调用此函数        | function({ item, key, keyPath })                          | -          |\n| onDeselect          | 取消选中时调用，仅在 multiple 生效   | function({ item, key, selectedKeys })                     | -          |\n| onOpenChange        | SubMenu 展开/关闭的回调         | function(openKeys: string\\[])                             | noop       |\n| onSelect            | 被选中时调用                   | function({ item, key, selectedKeys })                     | 无          |\n\n> More options in [rc-menu](https://github.com/react-component/menu#api)\n\n#### **Menu.Item**\n\n| 参数       | 说明         | 类型      | 默认值   |\n| -------- | ---------- | ------- | ----- |\n| disabled | 是否禁用       | boolean | false |\n| key      | item 的唯一标志 | string  |       |\n\n#### **Menu.SubMenu**\n\n| 参数           | 说明      | 类型                          | 默认值   |\n| ------------ | ------- | --------------------------- | ----- |\n| children     | 子菜单的菜单项 | Array&lt;MenuItem/SubMenu>  |       |\n| disabled     | 是否禁用    | boolean                     | false |\n| key          | 唯一标志    | string                      |       |\n| title        | 子菜单项值   | string/ReactNode            |       |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) |       |\n\n#### **Menu.ItemGroup**\n\n| 参数       | 说明     | 类型               | 默认值 |\n| -------- | ------ | ---------------- | --- |\n| children | 分组的菜单项 | MenuItem\\[]      |     |\n| title    | 分组标题   | string/ReactNode |     |\n\n#### **Menu.Divider**\n\n菜单项分割线，只用在弹出菜单内。"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Pagination",examples:t(1272)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(128)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Pagination$0 = require('./index.jsx');\nconst Pagination = Pagination$0.default || Pagination$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n当数据量较多时，使用分页可以帮助快速移动，常见于列表、表格、搜索结果和目录\n\n##### **基础分页**\n\n较简单的基础用法，不设置 defaultPageSize 时默认为每页10条数据；通过 total 可以设置总条数。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination defaultCurrent={1} total={50}></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **更多分页**\n\n页数过多时自动折叠。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination defaultCurrent={6} total={500}></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **改变每页显示条数目**\n\n通过 defaultPageSize 设置每页显示的条数。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination defaultCurrent={1} defaultPageSize={11} pageSizeOptions={['11', '21', '31', '41']} total={50} showSizeChanger></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **跳转分页**\n\n添加 showQuickJumper 设置快速页面跳转。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination defaultCurrent={2} total={500} showQuickJumper></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **迷你分页**\n\n较小的分页器，可通过 showSizeChanger showQuickJumper showTotal={showTotal} 来控制是否\n显示每页显示的条数、跳转和总条数。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\nfunction showTotal(total) {\n  return `总 ${total} 条`;\n}\n<div>\n\t<Pagination size='small' total={50}></Pagination>\n\t<br />\n   <Pagination size='small' total={50} showSizeChanger showQuickJumper></Pagination>\n   <br />\n   <Pagination size='small' total={50} showTotal={showTotal}></Pagination>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **简洁翻页**\n\n通过 simple 设置简洁分页器，常用户弹出框中。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination simple defaultCurrent={2} total={500}></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **包含总数**\n\n与表格搭配较常用的分页器。"},{type:"code",content:"import {Pagination} from 'dbox-ui';\n<Pagination showTotal={(total) => (`总 ${total} 条`)} defaultCurrent={2} total={5000} pageSize={50} showQuickJumper></Pagination>",settings:{},evalInContext:l},{type:"markdown",content:"##### **Pagination**\n\n| 参数               | 说明                                         | 类型                                                                   | 默认值                        |\n| ---------------- | ------------------------------------------ | -------------------------------------------------------------------- | -------------------------- |\n| current          | 当前页数与defaultCurrent同时存在会覆盖defaultCurrent   | number                                                               | -                          |\n| defaultCurrent   | 默认的当前页数                                    | number                                                               | 1                          |\n| defaultPageSize  | 默认的每页条数                                    | number                                                               | 10                         |\n| itemRender       | 用于自定义页码的结构，可用于优化SEO                        | (page，type:'page'/'prev'/'next', originalElement) => React.ReactNode | -                          |\n| pageSize         | 每页条数与defaultPageSize同时存在会覆盖defaultPageSize | number                                                               | -                          |\n| showQuickJumper  | 是否可以快速跳转至某页                                | boolean                                                              | false                      |\n| showSizeChanger  | 是否可以改变pageSize                             | boolean                                                              | false                      |\n| pageSizeOptions  | 改变showSizeChanger的默认值搭配defaultPageSize使用   | Array                                                                | `['10', '20', '30', '40']` |\n| showTotal        | 用于显示数据总量和当前数据顺序                            | Function(total, range)                                               | -                          |\n| simple           | 当添加该属性时，显示为简单分页                            | boolean                                                              | -                          |\n| size             | 当为`small`时，是小尺寸分页                          | string                                                               | -                          |\n| total            | 数据总数                                       | number                                                               | 0                          |\n| showTitle        | 展示页码hover时显示的title值                        | boolean                                                              | true                       |\n| showLessItems    | 显示较少的页码项                                   | boolean                                                              | false                      |\n| onChange         | 页码改变的回调，参数是改变后的页码及每页条数                     | Function(page, pageSize)                                             | noop                       |\n| onShowSizeChange | pageSize 变化的回调                             | Function(current, size)                                              | noop                       |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Steps",examples:t(1274)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(411)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Steps$0 = require('./index.jsx');\nconst Steps = Steps$0.default || Steps$0;",o);e.exports=[{type:"markdown",content:"用于指导用户完成跨多个屏幕的流程和操作，或引导用户按照流程完成任务的导航。\n\n#### **基本用法**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst StepsView = () => {\n  return(\n    <Steps current={1} >\n      <Steps.Step title='提交完成' description='这里是一段描述文字，最多不超过两行' />\n      <Steps.Step title='正在处理' description='这里是一段描述文字，最多不超过两行' />\n      <Steps.Step title='等待处理' description='这里是一段描述文字，最多不超过两行' />\n      <Steps.Step title='完成' description='这里是一段描述文字，最多不超过两行' />\n    </Steps>\n    )\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **小尺寸**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst StepsView = () => {\n  return (\n    <Steps size='small' current={2}>\n      <Steps.Step title='示例文字' />\n      <Steps.Step title='示例文字' />\n      <Steps.Step title='等待处理' />\n      <Steps.Step title='完成' />\n    </Steps>\n  )\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **点状步骤条**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst StepsView = () => {\n  return (\n    <Steps progressDot current={1}>\n      <Steps.Step title='步骤一' description='这里是一段描述性文字' />\n      <Steps.Step title='步骤二' description='这里是一段描述性文字' />\n      <Steps.Step title='步骤三' description='这里是一段描述性文字' />\n      <Steps.Step title='步骤四' description='这里是一段描述性文字' />\n    </Steps>\n  )\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **带popover点状步骤条**"},{type:"code",content:"import { Steps, Popover } from 'dbox-ui';\n\nconst customDot = (dot, {status, index}) => (\n  <Popover content={<span>步骤： {index} 状态: {status}</span>}>{dot}</Popover>\n);\nclass StepsView extends React.Component {\n  render() {\n    return (\n      <div>\n        <Steps progressDot={ customDot }  current={1}>\n          <Steps.Step title='步骤一' description='这是一段描述文字' />\n          <Steps.Step title='步骤二' description='这是一段描述文字' />\n          <Steps.Step title='步骤三' description='这是一段描述文字' />\n          <Steps.Step title='步骤四' description='这是一段描述文字' />\n      </Steps>\n      </div>\n    )\n  }\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可步骤切换**"},{type:"code",content:"import { Steps, Button } from 'dbox-ui';\n\nconst Step = Steps.Step;\nconst steps = [\n  {title: '提交完成', content: '这里是一段描述文字，最多不超过两行'},\n  {title: '正在处理', content: '这里是一段描述文字，最多不超过两行'},\n  {title: '等待处理', content: '这里是一段描述文字，最多不超过两行'},\n]\nconst stepsContent = {\n  marginTop: '16px',\n  border: '1px dashed #e9e9e9',\n  borderRadius: '6px',\n  backgroundColor: '#fafafa',\n  minHeight: '200px',\n  paddingTop: '80px',\n  textAlign: 'center'\n}\nconst stepsAction = {\n  marginTop: '24px'\n}\nclass StepsView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 0\n    }\n  }\n   next() {\n    const current = this.state.current + 1;\n    this.setState({current});\n  }\n   prev() {\n    const current = this.state.current - 1;\n    this.setState({current});\n  }\n  render() {\n  const {current} = this.state;\n  return (\n    <div>\n      <Steps progressDot current={current}>\n        {steps.map(item => <Step key={item.title} title={item.title} />)}\n      </Steps>\n      <div style={stepsContent} >{steps[current].content}</div>\n      <div style={stepsAction} >\n          {\n            current < steps.length - 1 && <Button type='primary' onClick={() => this.next()} >下一步</Button>\n          }\n          {\n            current === steps.length - 1 && <Button type='primary' onClick={() => Message.success('处理完成啦！')}>完成</Button>\n          }\n          {\n            current > 0 && <Button style={{ marginLeft: 8 }} onClick={() => this.prev()} >上一步</Button>\n          }\n        </div>\n    </div>\n  )\n}\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **步骤运行错误**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst Step = Steps.Step;\nclass StepsView extends React.Component {\n  render() {\n    return (\n      <Steps current={1} status='error'>\n        <Step title='步骤一' description='这里是一段描述性文字' />\n        <Step title='步骤二' description='这里是一段描述性文字' />\n        <Step title='步骤三' description='这里是一段描述性文字' />\n      </Steps>\n    )\n  }\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **竖直方向步骤条**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst Step = Steps.Step;\nclass StepsView extends React.Component {\n  render() {\n    return (\n      <Steps direction='vertical' current={1} >\n        <Step title='步骤一' description='这里是一段描述性文字' />\n        <Step title='步骤二' description='这里是一段描述性文字' />\n        <Step title='步骤三' description='这里是一段描述性文字' />\n      </Steps>\n    )\n  }\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **竖直方向小尺寸步骤条**"},{type:"code",content:"import { Steps } from 'dbox-ui';\n\nconst Step = Steps.Step;\nclass StepsView extends React.Component {\n  render() {\n    return (\n      <Steps direction='vertical' current={1} size='small' >\n        <Step title='步骤一' description='这里是一段描述性文字' />\n        <Step title='步骤二' description='这里是一段描述性文字' />\n        <Step title='步骤三' description='这里是一段描述性文字' />\n      </Steps>\n    )\n  }\n}\n<StepsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Steps**\n\n整体步骤条\n\n| 参数             | 说明                              | 类型     | 默认值        |\n| -------------- | ------------------------------- | ------ | ---------- |\n| current        | 指定当前步骤                          | number | 0          |\n| direction      | 指定步骤条方向(可选horizontal 、vertical) | string | horizontal |\n| labelPlacement | 指定标签放置位置，可选（vertical）放图标放图标下面   | string | horizontal |\n| progressDot    |                                 |        |            |\n| size           | 指定大小，可选（default 、small）         | string | default    |\n| status         | 指定当前步骤的状态                       | string | process    |\n| initial        | 起始序号，从0开始计数                     | number | 0          |\n\n#### **Steps.Step**\n\n步骤条内的每一个步骤\n\n| 参数          | 说明         | 类型     | 默认值       |\n| ----------- | ---------- | ------ | --------- |\n| description | 步骤的详情描述，可选 | string | ReactNode |\n| icon        | 步骤图标的类型，可选 | string | ReactNode |\n| title       | 标题         | string | ReactNode |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"AutoComplete",examples:t(1276)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(243)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst AutoComplete$0 = require('./index.jsx');\nconst AutoComplete = AutoComplete$0.default || AutoComplete$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n需要自动完成时。\n\n#### **基本使用**\n\n通过 dataSource 设置自动完成的数据源。"},{type:"code",content:"import { AutoComplete } from 'dbox-ui';\nclass AutoCompleteDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n             dataSource: []\n        }\n        this.handleSearch = this.handleSearch.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n    }\n\n    handleSearch(value) {\n        let {dataSource} = this.state;\n        if (!value || value.indexOf('@') >= 0) {\n            dataSource = [];\n        } else {\n            dataSource = ['126.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n        }\n        this.setState({ dataSource });\n   }\n    onSelect(value){\n        console.log('onSelect', value);\n    }\n    render(){\n        const { dataSource } = this.state;\n        return(\n            <AutoComplete\n                dataSource={dataSource}\n                style={{ width: '200px' }}\n                onSelect={this.onSelect}\n                onSearch={this.handleSearch}\n                placeholder='请输入'\n            />\n        )\n    }\n}\n<AutoCompleteDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义选项**\n\n可以直接传 `AutoComplete.Option` 作为 `AutoComplete` 的 `children`，而非使用 `dataSource`。"},{type:"code",content:"import { AutoComplete } from 'dbox-ui';\nconst Option = AutoComplete.Option;\nclass AutoCompleteExamplDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n             dataSource: []\n        }\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSearch(value) {\n        let {dataSource} = this.state;\n        if (!value || value.indexOf('@') >= 0) {\n            dataSource = [];\n        } else {\n            dataSource = [\n                value,\n                value+value,\n                value+value+value,\n            ]\n        }\n        this.setState({ dataSource });\n   }\n\n    render(){\n        const { dataSource } = this.state;\n        const children = dataSource.map((email) => {\n            return <Option key={email}>{email}</Option>;\n        });\n        return(\n            <AutoComplete\n                style={{ width: '200px' }}\n                onSearch={this.handleSearch}\n                placeholder='请输入'\n            >\n            {children}\n            </AutoComplete>\n        )\n    }\n}\n<AutoCompleteExamplDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **不区分大小写**\n\n不区分大小写的 `AutoComplete`。"},{type:"code",content:"import { AutoComplete } from 'dbox-ui';\nclass AutoCompleteExamplDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            dataSource: ['shanghai', 'BeiJing', 'Shen zhen'],\n        }\n        this.filterOptionChange = this.filterOptionChange.bind(this);\n    }\n\n    filterOptionChange(inputValue, option) {\n        return option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1;\n    }\n\n\n    render(){\n        const { dataSource } = this.state;\n        return(\n           <AutoComplete\n            style={{ width: '200px' }}\n            dataSource={dataSource}\n            placeholder='输入小写 `b`'\n            filterOption={this.filterOptionChange}\n            />\n        )\n    }\n}\n<AutoCompleteExamplDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **查询模式-确定类目**\n\n查询模式: 确定类目 示例。"},{type:"code",content:"import { AutoComplete,Input,Icon } from 'dbox-ui';\nconst Option = AutoComplete.Option;\nconst OptGroup = AutoComplete.OptGroup;\nclass AutoCompleteExamplDemo extends React.Component {\n    constructor(){\n        super();\n        this.renderTitle = this.renderTitle.bind(this);\n    }\n    renderTitle(title) {\n      return (\n        <span>\n          {title}\n          <a\n            style={{ float: 'right' }}\n            href='https://www.google.com/search?q=react'\n            target='_blank'\n            rel='noopener noreferrer'\n          >更多\n          </a>\n        </span>\n      );\n    }\n    render(){\n        const dataSource = [{\n            title: '语言',\n            children: [{\n                title: 'react ',\n                count: 10000,\n            }, {\n                title: 'vue ',\n                count: 10600,\n            }, {\n                title: 'angular ',\n                count: 1222,\n            }],\n            }, {\n            title: '问题',\n            children: [{\n                title: 'react, vue, angular哪个好',\n                count: 60100,\n            }, {\n                title: '性能问题',\n                count: 30010,\n            }],\n        }];\n        const options = dataSource.map(group => (\n            <OptGroup\n                key={group.title}\n                label={this.renderTitle(group.title)}\n            >\n                {group.children.map(opt => (\n                <Option key={opt.title} value={opt.title}>\n                    {opt.title}\n                    <span className='certain-search-item-count'>{opt.count} 人 关注</span>\n                </Option>\n                ))}\n            </OptGroup>\n            )).concat([\n            <Option disabled key='all' className='show-all'>\n                <a\n                href='https://www.google.com/search?q=react'\n                target='_blank'\n                rel='noopener noreferrer'\n                >\n                查看所有结果\n                </a>\n            </Option>,\n        ]);\n        return(\n            <AutoComplete\n            style={{ width: '300px' }}\n            dataSource={options}\n            placeholder='请输入'\n            optionLabelProp='value'\n            >\n            <Input suffix={<Icon type='search' />} />\n        </AutoComplete>\n        )\n    }\n}\n<AutoCompleteExamplDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **查询模式-不确定类目**\n\n查询模式: 不确定类目 示例。"},{type:"code",content:"import { AutoComplete,Input,Icon } from 'dbox-ui';\nconst Option = AutoComplete.Option;\nconst OptGroup = AutoComplete.OptGroup;\nclass AutoCompleteExamplDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            dataSource:[]\n        }\n        this.handleSearch = this.handleSearch.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.getRandomInt = this.getRandomInt.bind(this);\n        this.renderOption = this.renderOption.bind(this);\n        this.searchResult = this.searchResult.bind(this);\n    }\n\n    handleSearch(value) {\n        this.setState({\n            dataSource: value ? this.searchResult(value) : [],\n        });\n    }\n\n    onSelect(value){\n        console.log('onSelect', value);\n    }\n\n    getRandomInt(max, min = 0){\n        return Math.floor(Math.random() * (max - min + 1)) + min; // eslint-disable-line no-mixed-operators\n    }\n\n\n   searchResult(query) {\n    return (new Array(this.getRandomInt(5))).join('.').split('.')\n      .map((item, idx) => ({\n        query,\n        category: `${query}${idx}`,\n        count: this.getRandomInt(200, 100),\n      }));\n  }\n\n    renderOption(item){\n        return (\n        <Option key={item.category} text={item.category}>\n            {item.query} 在\n            <a\n            href={`https://s.taobao.com/search?q=${item.query}`}\n            target='_blank'\n            rel='noopener noreferrer'\n            >\n            {item.category}\n            </a>\n            区块中\n            <span className='global-search-item-count'>约 {item.count} 个结果</span>\n        </Option>\n        );\n    }\n    render(){\n        const {dataSource} = this.state;\n        return(\n        <AutoComplete\n            className='global-search'\n            style={{ width: '300px' }}\n            dataSource={dataSource.map(this.renderOption)}\n            onSelect={this.onSelect}\n            onSearch={this.handleSearch}\n            placeholder='请输入'\n            optionLabelProp='text'\n        >\n            <Input suffix={<Icon type='search' />} />\n          </AutoComplete>\n        )\n    }\n}\n<AutoCompleteExamplDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **AutoComplete**\n\n| 参数                       | 说明                                                                                               | 类型                                                                                                            | 默认值         |\n| ------------------------ | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------- | ----------- |\n| allowClear               | 支持清除, 单选模式有效                                                                                     | boolean                                                                                                       | false       |\n| autoFocus                | 自动获取焦点                                                                                           | boolean                                                                                                       | false       |\n| backfill                 | 使用键盘选择选项的时候把选中项回填到输入框中                                                                           | boolean                                                                                                       | false       |\n| children (自动完成的数据源)      | 自动完成的数据源                                                                                         | React.ReactElement<OptionProps> / Array&lt;React.ReactElement<OptionProps>>                                   | -           |\n| children (自定义输入框)        | 自定义输入框                                                                                           | HTMLInputElement / HTMLTextAreaElement / React.ReactElement<InputProps>                                       | `<Input />` |\n| dataSource               | 自动完成的数据源                                                                                         | [DataSourceItemType](https://git.io/vMMKF)\\[]                                                                 |             |\n| defaultActiveFirstOption | 是否默认高亮第一个选项。                                                                                     | boolean                                                                                                       | true        |\n| defaultValue             | 指定默认选中的条目                                                                                        | string/string/\\[]/{ key: string, label: string/ReactNode }/Array&lt;{ key: string, label: string/ReactNode}>  | 无           |\n| disabled                 | 是否禁用                                                                                             | boolean                                                                                                       | false       |\n| filterOption             | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。 | boolean or function(inputValue, option)                                                                       | true        |\n| optionLabelProp          | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。                                | string                                                                                                        | `children`  |\n| placeholder              | 输入框提示                                                                                            | string                                                                                                        | -           |\n| value                    | 指定当前选中的条目                                                                                        | string/string/\\[]/{ key: string, label: string/ReactNode }/Array&lt;{ key: string, label: string/ReactNode }> | 无           |\n| onChange                 | 选中 option，或 input 的 value 变化时，调用此函数                                                              | function(value)                                                                                               | 无           |\n| onSearch                 | 搜索补全项的时候调用                                                                                       | function(value)                                                                                               | 无           |\n| onSelect                 | 被选中时调用，参数为选中项的 value 值                                                                           | function(value, option)                                                                                       | 无           |\n\n#### **方法**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| focus() | 获取焦点 |\n| blur()  | 移除焦点 |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Cascader",examples:t(1278)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(379)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Cascader$0 = require('./index.jsx');\nconst Cascader = Cascader$0.default || Cascader$0;",o);e.exports=[{type:"markdown",content:"级联选择器，用于在同一浮层中从一组关联的数据中进行选择。\n\n#### **基本使用**\n\n可通过设置 `options` 属性来展示数据,其中 `disabled` 字段可设置是否禁用。"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nconst basicDatas = [{\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n  }, {\n    value: '江苏',\n    label: '江苏',\n    children: [{\n      value: '南京',\n      label: '南京',\n      children: [{\n        value: '中华门',\n        label: '中华门',\n      }],\n    }],\n  }, {\n    value: '安徽',\n    label: '安徽',\n    disabled: true,\n    children: [{\n      value: '合肥',\n      label: '合肥',\n      children: [{\n        value: '三国',\n        label: '三国',\n      }],\n    }],\n  }];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n<Cascader options={basicDatas} onChange={onChange} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **默认值**\n\n可通过设置 `defaultValue` 属性用于展示默认值。"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nconst basicDatas = [{\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n  }, {\n    value: '江苏',\n    label: '江苏',\n    children: [{\n      value: '南京',\n      label: '南京',\n      children: [{\n        value: '中华门',\n        label: '中华门',\n      }],\n    }],\n  }, {\n    value: '安徽',\n    label: '安徽',\n    children: [{\n      value: '合肥',\n      label: '合肥',\n      children: [{\n        value: '三国',\n        label: '三国',\n      }],\n    }],\n  }];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n <Cascader defaultValue={['浙江', '杭州', '西湖']} options={basicDatas} onChange={onChange} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **移入展开**\n\n可通过设置 `expandTrigger` 属性为 `hover` 来移入展开下级菜单，点击完成选择。"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nconst basicDatas = [{\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n  }, {\n    value: '江苏',\n    label: '江苏',\n    children: [{\n      value: '南京',\n      label: '南京',\n      children: [{\n        value: '中华门',\n        label: '中华门',\n      }],\n    }],\n  }, {\n    value: '安徽',\n    label: '安徽',\n    children: [{\n      value: '合肥',\n      label: '合肥',\n      children: [{\n        value: '三国',\n        label: '三国',\n      }],\n    }],\n}];\n\nfunction displayRender(label) {\n    return label[label.length - 1];\n}\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n<Cascader\n    options={basicDatas}\n    expandTrigger='hover'\n    displayRender={displayRender}\n    onChange={onChange}\n/>",settings:{},evalInContext:l},{type:"markdown",content:"#### **尺寸**\n\n可通过设置 `size` 属性控制级联框的尺寸，默认为中。"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nconst basicDatas = [{\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n  }, {\n    value: '江苏',\n    label: '江苏',\n    children: [{\n      value: '南京',\n      label: '南京',\n      children: [{\n        value: '中华门',\n        label: '中华门',\n      }],\n    }],\n  }, {\n    value: '安徽',\n    label: '安徽',\n    children: [{\n      value: '合肥',\n      label: '合肥',\n      children: [{\n        value: '三国',\n        label: '三国',\n      }],\n    }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\n<div>\n    <Cascader size='small' options={basicDatas} onChange={onChange} /><br /><br />\n    <Cascader options={basicDatas} onChange={onChange} /><br /><br />\n    <Cascader size='large' options={basicDatas} onChange={onChange} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **动态加载选项**\n\n可通过设置 `loadData` 实现动态加载选项（注意：`loadData` 与 `showSearch` 无法一起使用。）"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nclass CascaderExample extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            text: '未选择',\n            loadDataOptions: [{\n                value: '浙江',\n                label: '浙江',\n                isLeaf: false,\n            }, {\n                value: '江苏',\n                label: '江苏',\n                isLeaf: false,\n            },\n            {\n                value: '上海',\n                label: '上海',\n                isLeaf: false,\n            }]\n        };\n        this.onChange = this.onChange.bind(this);\n        this.loadData = this.loadData.bind(this);\n    }\n\n    onChange(value, selectOptions){\n         this.setState({\n             text: selectOptions.map(o => o.label).join(',')\n         })\n    };\n\n    loadData(selectedOptions){\n        const targetOption = selectedOptions[selectedOptions.length - 1];\n        targetOption.loading = true;\n        setTimeout(() => {\n            targetOption.loading = false;\n            targetOption.children = [{\n              label: `${targetOption.label} 城市`,\n              value: '城市',\n            }, {\n              label: `${targetOption.label} 地名`,\n              value: '地名',\n            }];\n            this.setState({\n              options: [...this.state.loadDataOptions],\n            });\n        }, 1000)\n    }\n\n    render(){\n        return (\n            <Cascader\n                options={this.state.loadDataOptions}\n                loadData={this.loadData}\n                onChange={this.onChange}\n                changeOnSelect\n                />\n        )\n    }\n}\n<CascaderExample />",settings:{},evalInContext:l},{type:"markdown",content:"#### **搜索**\n\n可设置 `showSearch` 属性实现级联框中内容的搜索。"},{type:"code",content:"import { Cascader } from 'dbox-ui';\nconst searchData = [{\n    value: '上海',\n    label: '上海',\n    children: [{\n      value: '浦东新区',\n      label: '浦东新区',\n      children: [{\n        value: '外滩',\n        label: '外滩',\n      }, {\n        value: '唐镇',\n        label: '唐镇',\n        disabled: true,\n      }],\n    }],\n  }, {\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n}];\n\nfunction onChange(value) {\n  console.log(value);\n}\nfunction filter(inputValue, path) {\n    return (path.some(option => (option.label).toLowerCase().indexOf(inputValue.toLowerCase()) > -1));\n}\n<Cascader\n    options={searchData}\n    onChange={onChange}\n    showSearch={{ filter }}\n/>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Cascader**\n\n| 参数                   | 说明                                                     | 类型                                      | 默认值                          |\n| -------------------- | ------------------------------------------------------ | --------------------------------------- | ---------------------------- |\n| allowClear           | 是否支持清除                                                 | boolean                                 | true                         |\n| autoFocus            | 自动获取焦点                                                 | boolean                                 | false                        |\n| changeOnSelect       | 当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示                   | boolean                                 | false                        |\n| className            | 自定义类名                                                  | string                                  | -                            |\n| defaultValue         | 默认的选中项                                                 | string\\[]                               | \\[]                          |\n| disabled             | 禁用                                                     | boolean                                 | false                        |\n| displayRender        | 选择后展示的渲染函数                                             | `(label, selectedOptions) => ReactNode` | `label => label.join(' / ')` |\n| expandTrigger        | 次级菜单的展开方式，可选 'click' 和 'hover'                         | string                                  | 'click'                      |\n| getPopupContainer    | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。  | Function(triggerNode)                   | () => document.body          |\n| loadData             | 用于动态加载选项，无法与 `showSearch` 一起使用                         | `(selectedOptions) => void`             | -                            |\n| notFoundContent      | 当下拉列表为空时显示的内容                                          | string                                  | 'Not Found'                  |\n| options              | 可选项数据源                                                 | object                                  | -                            |\n| placeholder          | 输入框占位文本                                                | string                                  | '请选择'                        |\n| popupClassName       | 自定义浮层类名                                                | string                                  | -                            |\n| popupPlacement       | 浮层预设位置：`bottomLeft` `bottomRight` `topLeft` `topRight` | Enum                                    | `bottomLeft`                 |\n| popupVisible         | 控制浮层显隐                                                 | boolean                                 | -                            |\n| showSearch           | 在选择框中显示搜索框                                             | boolean                                 | false                        |\n| size                 | 输入框大小，可选 `large` `default` `small`                     | string                                  | `default`                    |\n| style                | 自定义样式                                                  | string                                  | -                            |\n| value                | 指定选中项                                                  | string\\[]                               | -                            |\n| onChange             | 选择完成后的回调                                               | `(value, selectedOptions) => void`      | -                            |\n| onPopupVisibleChange | 显示/隐藏浮层的回调                                             | `(value) => void`                       | -                            |\n\n`showSearch` 为对象时，其中的字段：\n\n| 参数              | 说明                                                                 | 类型                                      | 默认值 |\n| --------------- | ------------------------------------------------------------------ | --------------------------------------- | --- |\n| filter          | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false。 | `function(inputValue, path): boolean`   |     |\n| matchInputWidth | 搜索结果列表是否与输入框同宽                                                     | boolean                                 |     |\n| render          | 用于渲染 filter 后的选项                                                   | `function(inputValue, path): ReactNode` |     |\n| sort            | 用于排序 filter 后的选项                                                   | `function(a, b, inputValue)`            |     |\n\n#### **方法**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Checkbox",examples:t(1280)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(85)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Checkbox$0 = require('./index.jsx');\nconst Checkbox = Checkbox$0.default || Checkbox$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n在一组可选项中进行多项选择时；\n\n##### **通用多选框**\n\n可在选中和非选中之间切换"},{type:"code",content:"import {Checkbox} from 'dbox-ui';\n<Checkbox >\n  多选框\n</Checkbox>",settings:{},evalInContext:l},{type:"markdown",content:"##### **受控多选框**\n\n通过按钮控制多选框的属性"},{type:"code",content:"import {Checkbox, Button} from 'dbox-ui';\ninitialState = {\n      checked: false,\n      disabled: false\n    }\n  toggleChecked = (checked) => {\n    setState({ checked: !state.checked });\n  }\n  toggleDisabled = (disabled) => {\n    setState({ disabled: !state.disabled });\n  }\n  onChangeState = (e) => {\n    setState({\n      checked: !state.checked\n    });\n  }\n\n<div>\n\t<Checkbox onChange={this.onChangeState} checked={state.checked} disabled={state.disabled}>{`${state.checked ? 'Checked' : 'Unchecked'}-${state.disabled ? 'Disabled' : 'Enabled'}`}</Checkbox>\n\t<Button onClick={this.toggleChecked}>选中切换</Button>\n\n\t<Button onClick={this.toggleDisabled}>禁用切换</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **多选框全选**\n\n通过一个多选框来控制另一组多选框的选中状态"},{type:"code",content:"import {Checkbox} from 'dbox-ui';\nconst CheckboxGroup = Checkbox.CheckboxGroup;\nconst plainOptions = ['苹果', '梨', '桔子'];\nconst defaultCheckedList = ['苹果', '桔子'];\nconst options = [\n  { label: '苹果', value: '苹果' },\n  { label: '梨', value: '梨' },\n  { label: '桔子', value: '桔子' },\n];\ninitialState = {\n      checkedList: defaultCheckedList,\n      indeterminate: true,\n      checkAll: false,\n}\nonChange = (checkedList) => {\n    setState({\n      checkedList,\n      indeterminate: !!state.checkedList.length && (state.checkedList.length < plainOptions.length),\n      checkAll: state.checkedList.length === plainOptions.length\n    })\n  }\n onCheckAllChange = (e) => {\n    setState({\n      checkedList: e.target.checked ? plainOptions : [],\n      indeterminate: false,\n      checkAll: e.target.checked\n    })\n  }\n<div>\n          <Checkbox indeterminate={state.indeterminate} checked={state.checkAll} onChange={this.onCheckAllChange}>\n            选择所有选项\n          </Checkbox>\n          <CheckboxGroup options={plainOptions} value={state.checkedList} onChange={this.onChange} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **多选框组**\n\n多个多选框形成的多选框组合"},{type:"code",content:"import {Checkbox} from 'dbox-ui';\nconst optionsWithDisabled = [\n  { label: '苹果', value: '苹果' },\n  { label: '梨', value: '梨' },\n  { label: '桔子', value: '桔子', disabled: false },\n];\nconst options = [\n  { label: '苹果', value: '苹果' },\n  { label: '梨', value: '梨' },\n  { label: '桔子', value: '桔子' },\n];\nconst plainOptions = ['苹果', '梨', '桔子'];\nconst CheckboxGroup = Checkbox.CheckboxGroup;\n<div>\n\t<CheckboxGroup options={plainOptions} defaultValue={['苹果']} />\n   <br />\n   <CheckboxGroup options={options} defaultValue={['梨']} />\n   <br />\n   <CheckboxGroup options={optionsWithDisabled} disabled defaultValue={['梨']} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **多选框不可用**\n\n通过disabled控制多选框的可操作属性"},{type:"code",content:"import {Checkbox} from 'dbox-ui';\n<div>\n\t<Checkbox defaultChecked={false} disabled >不可操作</Checkbox>\n   <Checkbox defaultChecked disabled >不允许操作</Checkbox>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"### Checkbox\n\n| 参数             | 说明                          | 类型                | 默认值   |\n| -------------- | --------------------------- | ----------------- | ----- |\n| autoFocus      | 自动获取焦点                      | boolean           | false |\n| checked        | 指定当前是否选中                    | boolean           | false |\n| defaultChecked | 初始是否选中                      | boolean           | false |\n| disabled       | 失效状态                        | boolean           | false |\n| indeterminate  | 设置 indeterminate 状态，只负责样式控制 | boolean           | false |\n| onChange       | 变化时回调函数                     | Function(e:Event) | -     |\n| onClick        | 点击时回调函数                     | Function(e:Event) | -     |\n\n### CheckboxGroup\n\n| 参数           | 说明      | 类型                     | 默认值   |\n| ------------ | ------- | ---------------------- | ----- |\n| defaultValue | 默认选中的选项 | string\\[]              | \\[]   |\n| options      | 指定可选项   | string\\[]              | \\[]   |\n| value        | 指定选中的选项 | string\\[]              | \\[]   |\n| disabled     | 整组失效    | boolean                | false |\n| onChange     | 变化时回调函数 | Function(checkedValue) | -     |\n\n## 方法\n\n### Checkbox\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n<style>.idoll-steps{margin-bottom: 10px}</style>"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"DatePicker",examples:t(1282)}},function(e,n,t){var a={"dbox-ui":t(18),moment:t(10),react:t(1),"./index.jsx":t(381)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst DatePicker$0 = require('./index.jsx');\nconst DatePicker = DatePicker$0.default || DatePicker$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n当用户需要一个日期(年、月、日、时、分、秒)，可以点击标准输入框，弹出日期面板进行选择。\n\n#### **基本用法**"},{type:"code",content:"import { DatePicker } from 'dbox-ui';\n\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\n\nonPanelChange = (value, mode) => {\n  console.log('onPanelChange', value, mode);\n}\nonChange = (date, dateString) => {\n  console.log('onChange', date, dateString);\n}\nonOk = () => {\n  console.log('OK')\n}\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <DatePicker onPanelChange={this.onPanelChange} />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <MonthPicker onChange={this.onChange} placeholder='请选择月份' />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <RangePicker onChange={this.onChange} onOk={onOk} />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种大小**"},{type:"code",content:"import { Radio, DatePicker } from 'dbox-ui';\n\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\n\nclass DatePickerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: 'default',\n    }\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.onOk = this.onOk.bind(this);\n  }\n  handleSizeChange(e) {\n    this.setState({ size: e.target.value });\n  }\n  onOk() {\n    console.log('OK')\n  }\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <RadioGroup value={size} onChange={this.handleSizeChange}>\n          <RadioButton value='large'>大尺寸</RadioButton>\n          <RadioButton value='default'>默认</RadioButton>\n          <RadioButton value='small'>小尺寸</RadioButton>\n        </RadioGroup>\n        <br /><br />\n        <div style={{ marginBottom: 15 }}>\n          <DatePicker size={size} />\n        </div>\n        <div style={{ marginBottom: 15 }}>\n          <MonthPicker size={size} />\n        </div>\n        <div style={{ marginBottom: 15 }}>\n          <RangePicker size={size} onOk={this.onOk} />\n        </div>\n      </div>\n    )\n  }\n}\n<DatePickerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **禁用**"},{type:"code",content:"import { DatePicker } from 'dbox-ui';\nimport moment from 'moment';\n\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\nconst dateFormat = 'YYYY-MM-DD';\n\nonOk = () => {\n  console.log('OK')\n}\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <DatePicker defaultValue={moment('2015-06-06', dateFormat)} disabled />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <MonthPicker defaultValue={moment('2015-06', 'YYYY-MM')} disabled />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <RangePicker\n      onOk={this.onOk}\n      disabled\n      defaultValue={[moment('2015-06-06', dateFormat), moment('2015-06-06', dateFormat)]} />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **日期格式**"},{type:"code",content:"import { DatePicker } from 'dbox-ui';\nimport moment from 'moment';\n\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\nconst dateFormat1 = 'YYYY/MM/DD';\nconst dateFormat = 'YYYY-MM-DD';\nconst monthFormat = 'YYYY/MM';\n\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <DatePicker defaultValue={moment('2015/01/01', dateFormat1)} format={dateFormat1} />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <MonthPicker defaultValue={moment('2015/01', monthFormat)} format={monthFormat} />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <RangePicker\n      defaultValue={[moment('2015/01/01', dateFormat1), moment('2015/01/01', dateFormat1)]}\n      format={dateFormat1}\n    />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **日期时间选择**"},{type:"code",content:"import { DatePicker } from 'dbox-ui';\n\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\n\nonChange = (date, dateString) => {\n  console.log('onChange', date, dateString);\n}\nonOk = () => {\n  console.log('OK')\n}\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <DatePicker\n      showTime\n      format='YYYY-MM-DD HH:mm:ss'\n      placeholder='请选择时间'\n      onChange={this.onChange}\n      onOk={this.onOk}\n    />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <RangePicker\n      showTime={{ format: 'HH:mm' }}\n      format='YYYY-MM-DD HH:mm'\n      placeholder={['开始时间', '结束时间']}\n      onChange={this.onChange}\n      onOk={this.onOk}\n    />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **不可选择日期和时间**"},{type:"code",content:"import { DatePicker } from 'dbox-ui';\nimport moment from 'moment';\n\nconst RangePicker = DatePicker.RangePicker;\nconst MonthPicker = DatePicker.MonthPicker;\nconst WeekPicker = DatePicker.WeekPicker;\n\ndisabledDate = (current) => {\n  // Can not select days before today and today\n  return current && current < moment().endOf('day');\n}\nrange = (start, end) => {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\ndisabledRangeTime = (_, type) => {\n  if (type === 'start') {\n    return {\n      disabledHours: () => this.range(0, 60).splice(4, 20),\n      disabledMinutes: () => this.range(30, 60),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n    return {\n      disabledHours: () => this.range(0, 60).splice(20, 4),\n      disabledMinutes: () => this.range(0, 31),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <DatePicker\n      format='YYYY-MM-DD HH:mm:ss'\n      disabledDate={this.disabledDate}\n      disabledTime={this.disabledRangeTime}\n      showTime\n    />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <MonthPicker disabledDate={this.disabledDate} placeholder='请选择月份' />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <RangePicker\n      onOk={this.onOk}\n      disabledDate={this.disabledDate}\n      disabledTime={this.disabledRangeTime}\n      showTime={{\n        hideDisabledOptions: true,\n        defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('11:59:59', 'HH:mm:ss')],\n      }}\n      format='YYYY-MM-DD HH:mm:ss'\n    />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n以下API为DatePIcker、MonthPicker、RangePicker、WeekPicker共享API\n\n| 参数           | 说明                                         | 类型                               | 默认值            |     |\n| ------------ | ------------------------------------------ | -------------------------------- | -------------- | --- |\n| allowClear   | 是否显示清除按钮                                   | boolean                          | true           |     |\n| autoFocus    | 自动获取焦点                                     | boolean                          | false          |     |\n| className    | 选择器 className                              | string                           | ''             |     |\n| disabled     | 禁用                                         | boolean                          | false          |     |\n| disabledDate | 不可选择的日期                                    | (currentDate: moment) => boolean | 无              |     |\n| open         | 控制弹层是否展开                                   | boolean                          | -              |     |\n| placeholder  | 输入框提示文字                                    | string                           | RangePicker\\[] | -   |\n| size         | 输入框大小，large 高度为 40px，small 为 24px，默认是 32px | string                           | 无              |     |\n| style        | 自定义输入框样式                                   | object                           | {}             |     |\n| onOpenChange | 弹出日历和关闭日历的回调                               | function(status)                 | 无              |     |\n| suffixIcon   | 自定义的选择框后缀图标                                | ReactNode                        | -              |     |\n\n#### **共同的方法**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n#### **DatePicker**\n\n| 参数                    | 说明                                         | 类型                                         | 默认值                |              |\n| --------------------- | ------------------------------------------ | ------------------------------------------ | ------------------ | ------------ |\n| defaultValue          | 默认日期                                       | moment                                     | 无                  |              |\n| defaultPickerValue    | 默认面板日期                                     | moment                                     | 无                  |              |\n| format                | 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 moment.js | string                                     | string\\[]          | \"YYYY-MM-DD\" |\n| showTime              | 增加时间选择功能                                   | Object , boolean                           | TimePicker Options |              |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒                            | moment                                     | moment()           |              |\n| showToday             | 是否展示“今天”按钮                                 | boolean                                    | true               |              |\n| value                 | 日期                                         | moment                                     | 无                  |              |\n| onChange              | 时间发生变化的回调                                  | function(date: moment, dateString: string) | 无                  |              |\n| onPanelChange         | 日期面板变化时的回调                                 | function(value, mode)                      | -                  |              |\n\n#### **MonthPicker**\n\n| 参数                 | 说明                     | 类型                                         | 默认值       |\n| ------------------ | ---------------------- | ------------------------------------------ | --------- |\n| defaultValue       | 默认日期                   | moment                                     | 无         |\n| defaultPickerValue | 默认面板日期                 | moment                                     | 无         |\n| format             | 展示的日期格式，配置参考 moment.js | string                                     | \"YYYY-MM\" |\n| value              | 日期                     | moment                                     | 无         |\n| onChange           | 时间发生变化的回调，发生在用户选择时间时   | function(date: moment, dateString: string) | -         |\n\n#### **RangePicker**\n\n| 参数                    | 说明                       | 类型                                                           | 默认值                   |                    |\n| --------------------- | ------------------------ | ------------------------------------------------------------ | --------------------- | ------------------ |\n| defaultValue          | 默认日期                     | moment\\[]                                                    | 无                     |                    |\n| defaultPickerValue    | 默认面板日期                   | moment\\[]                                                    | 无                     |                    |\n| disabledTime          | 不可选择的时间(需结合showTime一起使用) | function(dates: moment, moment, partial: 'start'             | 'end')                | 无                  |\n| showTime              | 增加时间选择功能                 | Object                                                       | boolean               | TimePicker Options |\n| format                | 展示的日期格式                  | string                                                       | \"YYYY-MM-DD HH:mm:ss\" |                    |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒          | moment\\[]                                                    | moment() , moment()   |                    |\n| value                 | 日期                       | moment\\[]                                                    | 无                     |                    |\n| onCalendarChange      | 待选日期发生变化的回调              | function(dates: moment, moment, dateStrings: string, string) | 无                     |                    |\n| onChange              | 日期范围发生变化的回调              | function(dates: moment, moment, dateStrings: string, string) | 无                     |                    |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Form",examples:t(1284)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(386)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Form$0 = require('./index.jsx');\nconst Form = Form$0.default || Form$0;",o);e.exports=[{type:"markdown",content:"用于可配置校验规则的数据提交，输入数据包含输入框、单选框、多选框、日期选择框、下拉框等元素。\n\n#### **登录框**"},{type:"code",content:"import { Form,Input,Icon,Checkbox,Button } from 'dbox-ui';\nconst FormItem = Form.Item;\n\nclass LoginForm extends React.Component {\n  constructor(){\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('输入框中的内容 ', values);\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} style={{width: '300px'}}>\n        <FormItem>\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: '请输入用户名!' }],\n          })(\n            <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"用户名\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: '请输入密码!' }],\n          })(\n            <Input prefix={<Icon type=\"unlock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"密码\" />\n          )}\n        </FormItem>\n        <FormItem>\n          {\n            getFieldDecorator('remember', {\n              valuePropName: 'checked',\n              initialValue: true,\n            })(\n              <Checkbox>记住我</Checkbox>\n            )\n          }\n          <a href=\"\" style={{float: 'right'}}>忘记密码</a> <br />\n        </FormItem>\n        <Button type=\"primary\" htmlType=\"submit\" style={{width: '100%',margin: 0}}>\n            登录\n        </Button>\n        <br />\n        或者 <a href=\"\">注册</a>\n      </Form>\n    );\n  }\n}\n\nconst WrappedLoginForm = Form.create()(LoginForm);\n<WrappedLoginForm />",settings:{},evalInContext:l},{type:"markdown",content:"#### **注册**"},{type:"code",content:"import { Form,Select,Input,Cascader,Checkbox,Button } from 'dbox-ui';\nconst FormItem = Form.Item;\nconst residences = [{\n  value: 'shanghai',\n  label: '上海',\n  children: [{\n    value: 'pudongxinqu',\n    label: '浦东新区',\n    children: [{\n      value: 'dongfangminzhu',\n      label: '东方明珠',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: '江苏',\n  children: [{\n    value: 'nanjing',\n    label: '南京',\n    children: [{\n      value: 'xuanwuhu',\n      label: '玄武湖',\n    }],\n  }],\n}];\nclass RegistrationForm extends React.Component {\n\n  constructor(){\n    super();\n    this.validateToNextPassword = this.validateToNextPassword.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.compareToFirstPassword = this.compareToFirstPassword.bind(this);\n    this.handleConfirmBlur = this.handleConfirmBlur.bind(this);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n  }\n\n\n  validateToNextPassword(rule, value, callback){\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  compareToFirstPassword(rule, value, callback){\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('两次密码输入不一致!');\n    } else {\n      callback();\n    }\n  }\n\n  handleConfirmBlur(e){\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n\n\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('提交表单内容: ', values);\n      }\n    });\n  }\n\n  render(){\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    return(\n      <Form onSubmit={this.handleSubmit} style={{width: '600px'}}>\n        <FormItem\n          {...formItemLayout}\n          label=\"邮箱\"\n        >\n          {getFieldDecorator('email', {\n            rules: [{\n              type: 'email', message: '输入项不符合邮箱格式!',\n            }, {\n              required: true, message: '请输入你的邮箱账号!',\n            }],\n          })(\n            <Input placeholder=\"请输入邮箱账号\"/>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"密码\"\n        >\n          {getFieldDecorator('password', {\n            rules: [{\n              required: true, message: '请输入您的密码!',\n            }, {\n              validator: this.validateToNextPassword,\n            }],\n          })(\n            <Input type=\"password\" placeholder=\"请输入密码\"/>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"确认密码\"\n        >\n          {getFieldDecorator('confirm', {\n            rules: [{\n              required: true, message: '请输入您的确认密码!',\n            }, {\n              validator: this.compareToFirstPassword,\n            }],\n          })(\n            <Input type=\"password\" onBlur={this.handleConfirmBlur} placeholder=\"请输入确认密码\"/>\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              别名\n            </span>\n          )}\n        >\n          {getFieldDecorator('nickname')(\n            <Input placeholder=\"选填\"/>\n          )}\n        </FormItem>\n\n         <FormItem\n          {...formItemLayout}\n          label=\"地址\"\n        >\n          {getFieldDecorator('residence', {\n            initialValue: ['shanghai', 'pudongxinqu', 'dongfangminzhu'],\n            rules: [{ type: 'array', required: true, message: '请选择地址!' }],\n          })(\n            <Cascader options={residences} />\n          )}\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label=\"手机号码\"\n        >\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: '请输入您的手机号码!' }],\n          })(\n            <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n          )}\n        </FormItem>\n\n        <FormItem {...tailFormItemLayout}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>I have read the <a href=\"\">agreement</a></Checkbox>\n          )}\n        </FormItem>\n\n         <FormItem {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">注册</Button>\n        </FormItem>\n      </Form>\n    )\n  }\n}\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n<WrappedRegistrationForm />",settings:{},evalInContext:l},{type:"markdown",content:"#### **高级搜索**"},{type:"code",content:"import { Form,Row,Col,DatePicker,Input,Cascader,Button,Icon } from 'dbox-ui';\nconst FormItem = Form.Item;\nconst {RangePicker} = DatePicker;\n\nconst labelValue = [\n  {\n    key: 'name',\n    value: '姓名',\n    type: 'input'\n  },{\n    key: 'phone',\n    value: '手机号',\n    type: 'input'\n  },{\n    key: 'account',\n    value: '账号',\n    type: 'input'\n  },{\n    key: 'address',\n    value: '地址',\n    type: 'cascader'\n  },{\n    key: 'degree',\n    value: '学位',\n    type: 'input'\n  },{\n    key: 'card',\n    value: '身份证号',\n    type: 'input'\n  },{\n    key: 'date',\n    value: '起止日期',\n    type: 'date'\n  }\n];\n\nconst searchData = [{\n    value: '上海',\n    label: '上海',\n    children: [{\n      value: '浦东新区',\n      label: '浦东新区',\n      children: [{\n        value: '外滩',\n        label: '外滩',\n      }, {\n        value: '唐镇',\n        label: '唐镇',\n        disabled: true,\n      }],\n    }],\n  }, {\n    value: '浙江',\n    label: '浙江',\n    children: [{\n      value: '杭州',\n      label: '杭州',\n      children: [{\n        value: '西湖',\n        label: '西湖',\n      }],\n    }],\n}];\n\nconst idollFormStyle = {\n  padding: '24px',\n  background: '#fbfbfb',\n  border: '1px solid #d9d9d9',\n  borderRadius: '6px',\n}\nclass AdvancedSearchForm extends React.Component {\n  constructor(){\n    super();\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.getFields = this.getFields.bind(this);\n    this.onCascaderChange = this.onCascaderChange.bind(this);\n    this.loadData = this.loadData.bind(this);\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onOk = this.handleOnOk.bind(this);\n    this.getInputElement = this.getInputElement.bind(this);\n    this.getFormItem = this.getFormItem.bind(this);\n    this.state = {\n      expand: false,\n      text: '未选择',\n      loadDataOptions: [{\n          value: '浙江',\n          label: '浙江',\n          isLeaf: false,\n      }, {\n          value: '江苏',\n          label: '江苏',\n          isLeaf: false,\n      },{\n          value: '上海',\n          label: '上海',\n          isLeaf: false,\n      }]\n    };\n\n  }\n\n  onCascaderChange(value, selectOptions){\n    this.setState({\n        text: selectOptions.map(o => o.label).join(',')\n    })\n  };\n\n  loadData(selectedOptions){\n      const targetOption = selectedOptions[selectedOptions.length - 1];\n      targetOption.loading = true;\n      setTimeout(() => {\n          targetOption.loading = false;\n          targetOption.children = [{\n            label: `${targetOption.label} 城市`,\n            value: '城市',\n          }, {\n            label: `${targetOption.label} 地名`,\n            value: '地名',\n          }];\n          this.setState({\n            options: [...this.state.loadDataOptions],\n          });\n      }, 1000)\n  }\n\n  onDateChange(date, dateString){\n    console.log('onDateChange', date, dateString);\n  }\n\n  handleOnOk(){\n    console.log('OK')\n  }\n\n  getInputElement(type) {\n    switch(type){\n      case  'input' : return <Input placeholder='请输入'/>;\n      case 'cascader': return <Cascader\n                options={this.state.loadDataOptions}\n                loadData={this.loadData}\n                onChange={this.onCascaderChange}\n                changeOnSelect\n                />;\n      case 'date': return <RangePicker onChange={this.onDateChange} onOk={this.handleOnOk} />;\n      default: return <Input placeholder='请输入'/>;\n    }\n  }\n\n  getFormItem(i,count) {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const formItemLayout2 = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 17 },\n      },\n    };\n    if(labelValue[i].type === 'date') {\n      return (\n        <Col span={10} key={i} style={{ display: i < count ? 'block' : 'none' }} >\n          <FormItem label={labelValue[i].value} {...formItemLayout2} style={{ display: 'flex',marginLeft: '4px'}}>\n            {getFieldDecorator(`${labelValue[i].key}`, {\n              rules: [{\n                required: true,\n                message: '不能为空!',\n              }],\n            })(\n              this.getInputElement(labelValue[i].type)\n            )}\n          </FormItem>\n        </Col>\n      )\n    } else {\n      return (\n        <Col span={8} key={i} style={{ display: i < count ? 'block' : 'none' }} >\n          <FormItem label={labelValue[i].value} {...formItemLayout} style={{ display: 'flex'}}>\n            {getFieldDecorator(`${labelValue[i].key}`, {\n              rules: [{\n                required: true,\n                message: '不能为空!',\n              }],\n            })(\n              this.getInputElement(labelValue[i].type)\n            )}\n          </FormItem>\n        </Col>\n      )\n    }\n  }\n\n  getFields() {\n    const count = this.state.expand ? 7 : 6;\n    const children = [];\n    for (let i = 0; i < 7; i++) {\n      children.push(this.getFormItem(i,count));\n    }\n    return children;\n  }\n\n  handleSearch(e){\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      values.date =  [values.date[0].format('YYYY-MM-DD'), values.date[1].format('YYYY-MM-DD')];\n      console.log('表单提交内容: ', values);\n    });\n  }\n\n  handleReset(){\n    this.props.form.resetFields();\n  }\n\n  toggle(){\n    const { expand } = this.state;\n    this.setState({ expand: !expand });\n  }\n\n  render(){\n\n    return (\n      <Form\n        style={idollFormStyle}\n        onSubmit={this.handleSearch}\n      >\n        <Row gutter={24}>{this.getFields()}</Row>\n\n        <Row>\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Button type=\"primary\" htmlType=\"submit\">查询</Button>\n            <Button style={{ marginLeft: 8 }} onClick={this.handleReset}>\n              清除\n            </Button>\n            <a style={{ marginLeft: 8, fontSize: 12 }} onClick={this.toggle}>\n              {this.state.expand ? <span> 收起 <Icon type= 'up'/></span>: <span> 更多 <Icon type= 'down'/> </span>}\n            </a>\n          </Col>\n        </Row>\n      </Form>\n    )\n  }\n}\n\nconst WrappedAdvancedSearchForm = Form.create()(AdvancedSearchForm);\n<WrappedAdvancedSearchForm />",settings:{},evalInContext:l},{type:"markdown",content:"#### **紧凑型表单**"},{type:"code",content:"import { Form,Row,Col,Select,DatePicker,Input,Button } from 'dbox-ui';\nconst FormItem = Form.Item;\nconst {Option} = Select;\nconst {RangePicker} = DatePicker;\nclass CompactSearchForm extends React.Component {\n  constructor(){\n    super();\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.onDateChange = this.onDateChange.bind(this);\n    this.handleOnOk = this.handleOnOk.bind(this);\n  }\n\n  onDateChange(date, dateString){\n    console.log('onDateChange', date, dateString);\n  }\n\n  handleOnOk(){\n    console.log('OK')\n  }\n\n  handleSearch(e){\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      values.date =  [values.date[0].format('YYYY-MM-DD'), values.date[1].format('YYYY-MM-DD')];\n      console.log('表单提交内容: ', values);\n    });\n  }\n\n  handleReset(){\n    this.props.form.resetFields();\n  }\n\n  render(){\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 9 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 15 },\n      },\n    };\n    const formItemLayout2 = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 15 },\n      },\n    };\n    const beforeLength = '100px';\n\n    return (\n       <Form onSubmit={this.handleSearch}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <FormItem\n              {...formItemLayout}\n              formType='compact'\n              label='姓名'\n            >\n              {getFieldDecorator('name', {\n                rules: [{\n                  required: true, message: '不能为空!',\n                }],\n              })(\n                <Input placeholder='请输入'/>\n              )}\n            </FormItem>\n          </Col>\n\n          <Col span={8}>\n            <FormItem\n              {...formItemLayout}\n              formType='compact'\n              label='手机号码'\n            >\n              {getFieldDecorator('phone', {\n                rules: [{\n                  required: true, message: '不能为空!',\n                }],\n              })(\n                <Input placeholder='请输入'/>\n              )}\n            </FormItem>\n          </Col>\n\n          <Col span={8}>\n            <FormItem\n              {...formItemLayout}\n              formType='compact'\n              label='邮箱'\n            >\n              {getFieldDecorator('email', {\n                rules: [{\n                  type: 'email', message: '输入项不符合邮箱格式!',\n                },{\n                  required: true, message: '不能为空!',\n                }],\n              })(\n                <Input placeholder='请输入'/>\n              )}\n            </FormItem>\n          </Col>\n        </Row>\n\n        <Row gutter={24}>\n          <Col span={8}>\n            <FormItem\n              {...formItemLayout}\n              formType='compact'\n              label='地址'\n            >\n              {getFieldDecorator('address', {\n                rules: [{\n                  required: true, message: '不能为空!',\n                }],\n              })(\n                <Select placeholder='请选择' allowClear>\n                    <Option value='beijing'>北京</Option>\n                    <Option value='shanghai'>上海</Option>\n                    <Option value='guangzhou'>广州</Option>\n                    <Option value='shenzhen'>深圳</Option>\n                </Select>\n              )}\n            </FormItem>\n          </Col>\n          <Col span={12}>\n            <FormItem\n              {...formItemLayout2}\n              formType='compact'\n              label='起止日期日期'\n            >\n              {getFieldDecorator('date', {\n                rules: [{\n                  required: true, message: '不能为空!',\n                }],\n              })(\n                <RangePicker onChange={this.onDateChange} onOk={this.handleOnOk} />\n              )}\n            </FormItem>\n          </Col>\n        </Row>\n\n         <Row>\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Button type=\"primary\" htmlType=\"submit\">查询</Button>\n            <Button style={{ marginLeft: 8 }} onClick={this.handleReset}>\n              清除\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    )\n  }\n}\n\nconst WrappedCompactSearchForm = Form.create()(CompactSearchForm);\n<WrappedCompactSearchForm />",settings:{},evalInContext:l},{type:"markdown",content:"#### **弹出层中新建表单**"},{type:"code",content:"import { Form,Row,Col,Button,Modal,Input,Icon } from 'dbox-ui';\nconst FormItem = Form.Item;\nclass modalForm extends React.Component {\n  constructor(){\n    super();\n    this.compareToFirstPassword = this.compareToFirstPassword.bind(this);\n  }\n\n  compareToFirstPassword(rule, value, callback){\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('两次密码输入不一致!');\n    } else {\n      callback();\n    }\n  }\n  render() {\n    const {visible, onCancel, onCreate, form,} = this.props;\n    const { getFieldDecorator } = form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    return (\n      <Modal\n        visible={visible}\n        title=\"注册信息\"\n        okText=\"注册\"\n        onCancel={onCancel}\n        onOk={onCreate}\n      >\n\n        <Form onSubmit={this.handleSubmit} style={{width: '300px'}}>\n          <FormItem  label='账号' {...formItemLayout}>\n            {getFieldDecorator('userName', {\n              rules: [{ required: true, message: '不能为空!' }],\n            })(\n              <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"账号\" />\n            )}\n          </FormItem>\n          <FormItem label='密码' {...formItemLayout}>\n            {getFieldDecorator('password', {\n              rules: [{ required: true, message: '不能为空!' }],\n            })(\n              <Input prefix={<Icon type=\"unlock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"密码\" />\n            )}\n          </FormItem>\n\n            <FormItem label='确认密码' {...formItemLayout}>\n            {getFieldDecorator('confirmPassword', {\n              rules: [{ required: true, message: '不能为空!'\n              }, {validator: this.compareToFirstPassword,\n                }],\n            })(\n              <Input prefix={<Icon type=\"unlock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"确认密码\" />\n            )}\n          </FormItem>\n        </Form>\n\n      </Modal>\n    );\n  }\n}\nconst CollectionCreateForm = Form.create()(\n    modalForm\n);\n\nclass ModalNewForm extends React.Component {\n  constructor(){\n    super();\n    this.showModal = this.showModal.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    this.saveFormRef = this.saveFormRef.bind(this);\n    this.state = {\n      visible: false,\n    }\n  }\n\n  showModal(){\n    this.setState({ visible: true });\n  }\n\n  handleCancel(){\n    this.setState({ visible: false });\n  }\n\n  handleCreate(){\n    const form = this.formRef.props.form;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n\n      console.log('表单提交内容: ', values);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  }\n\n  saveFormRef(formRef){\n    this.formRef = formRef;\n  }\n\n\n  render(){\n      return(\n        <div>\n        <Button type=\"primary\" onClick={this.showModal}>注册</Button>\n        <CollectionCreateForm\n          wrappedComponentRef={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n      </div>\n      )\n  }\n}\n\n<ModalNewForm />",settings:{},evalInContext:l},{type:"markdown",content:"#### **表单联动**"},{type:"code",content:"import { Form,Row,Col,Input,Select,Button } from 'dbox-ui';\nconst FormItem = Form.Item;\nclass FormDemo extends React.Component {\n  constructor(){\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('表单提交内容: ', values);\n      }\n    });\n  }\n\n  handleSelectChange(value){\n    console.log(value);\n    this.props.form.setFieldsValue({\n      email: `123456789${value === '@qq.com' ? '@qq.com' : '@163.com'}`,\n    });\n  }\n\n  render(){\n    const { getFieldDecorator } = this.props.form;\n    return(\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem\n          label=\"邮箱号\"\n          labelCol={{ span: 5 }}\n          wrapperCol={{ span: 12 }}\n        >\n          {getFieldDecorator('email', {\n            rules: [{ required: true, message: '不能为空!' }],\n          })(\n            <Input />\n          )}\n        </FormItem>\n        <FormItem\n          label=\"邮箱类型\"\n          labelCol={{ span: 5 }}\n          wrapperCol={{ span: 12 }}\n        >\n          {getFieldDecorator('emailType', {\n            rules: [{ required: true, message: '不能为空' }],\n          })(\n            <Select\n              placeholder=\"请选择邮箱类型\"\n              onChange={this.handleSelectChange}\n            >\n              <Option value=\"@qq.com\">@qq.com</Option>\n              <Option value=\"@163.com\">@163.com</Option>\n            </Select>\n          )}\n        </FormItem>\n        <FormItem\n          wrapperCol={{ span: 12, offset: 5 }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            提交\n          </Button>\n        </FormItem>\n      </Form>\n    )\n  }\n}\nconst WrappedFormDemo = Form.create()(FormDemo);\n<WrappedFormDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义校验**"},{type:"code",content:'import { Form,Row,Col,Input,DatePicker,TimePicker,Cascader,InputNumber,Select,Button } from \'dbox-ui\';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nclass FormDemo extends React.Component {\n  render(){\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 12 },\n      },\n    };\n    return (\n      <Form>\n        <FormItem\n          {...formItemLayout}\n          label="错误"\n          validateStatus="error"\n          help="输入数字和字母组合"\n        >\n          <Input placeholder="错误输入" id="error" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="警告"\n          validateStatus="warning"\n        >\n          <Input placeholder="警告" id="warning" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="验证"\n          hasFeedback\n          validateStatus="validating"\n          help="信息正在验证..."\n        >\n          <Input placeholder=\'验证输入\' id="validating" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="成功"\n          hasFeedback\n          validateStatus="success"\n        >\n          <Input placeholder="正确输入" id="success" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="警告"\n          hasFeedback\n          validateStatus="warning"\n        >\n          <Input placeholder="警告" id="warning" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="错误"\n          hasFeedback\n          validateStatus="error"\n          help="输入数字和字母组合"\n        >\n          <Input placeholder="错误输入" id="error" />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="成功"\n          hasFeedback\n          validateStatus="success"\n        >\n          <DatePicker style={{ width: \'100%\' }} />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="警告"\n          hasFeedback\n          validateStatus="warning"\n        >\n          <TimePicker style={{ width: \'100%\' }} />\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="错误"\n          hasFeedback\n          validateStatus="error"\n        >\n          <Select defaultValue="1">\n            <Option value="1">北京</Option>\n            <Option value="2">上海</Option>\n            <Option value="3">广州</Option>\n          </Select>\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="验证"\n          hasFeedback\n          validateStatus="validating"\n          help="信息正在验证..."\n        >\n          <Cascader defaultValue={[\'1\']} options={[]} />\n        </FormItem>\n\n        <FormItem\n          label="内联"\n          {...formItemLayout}\n        >\n          <Col span={11}>\n            <FormItem validateStatus="error" help="请选择正确的日期">\n              <DatePicker />\n            </FormItem>\n          </Col>\n          <Col span={2}>\n            <span style={{ display: \'inline-block\', width: \'100%\', textAlign: \'center\' }}>\n              -\n            </span>\n          </Col>\n          <Col span={11}>\n            <FormItem>\n              <DatePicker />\n            </FormItem>\n          </Col>\n        </FormItem>\n\n        <FormItem\n          {...formItemLayout}\n          label="成功"\n          hasFeedback\n          validateStatus="success"\n        >\n          <InputNumber style={{ width: \'100%\' }} />\n        </FormItem>\n    </Form>\n    )\n  }\n}\n<FormDemo />',settings:{},evalInContext:l},{type:"markdown",content:"#### **动态校验规则**"},{type:"code",content:"import { Form,Row,Col,Select,Input,Checkbox,Button } from 'dbox-ui';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8 },\n};\nconst formTailLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8, offset: 4 },\n};\nclass FormDemo extends React.Component {\n  constructor(){\n    super();\n    this.check = this.check.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      phone: false,\n    }\n  }\n\n  check(){\n    this.props.form.validateFields((err,values) => {\n        if (!err) {\n          console.log('表单提交内容: ', values);\n        }\n      },\n    );\n  }\n\n  handleChange(e) {\n    this.setState({\n      phone: e.target.checked,\n    }, () => {\n      this.props.form.validateFields(['phone'], { force: true });\n    });\n  }\n\n  render(){\n    const { getFieldDecorator } = this.props.form;\n    return(\n      <div>\n        <FormItem {...formItemLayout} label=\"姓名\">\n          {getFieldDecorator('username', {\n            rules: [{\n              required: true,\n              message: '不能为空',\n            }],\n          })(\n            <Input placeholder=\"请输入\" />\n          )}\n        </FormItem>\n        <FormItem {...formItemLayout} label=\"手机号\">\n          {getFieldDecorator('phone', {\n            rules: [{\n              required: this.state.phone,\n              message: '不能为空',\n            }],\n          })(\n            <Input placeholder={this.state.phone?\"请输入\":\"选填\"} />\n          )}\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Checkbox\n            checked={this.state.phone}\n            onChange={this.handleChange}\n          >\n            手机号是否必填\n          </Checkbox>\n        </FormItem>\n        <FormItem {...formTailLayout}>\n          <Button type=\"primary\" onClick={this.check}>\n            提交\n          </Button>\n        </FormItem>\n      </div>\n    )\n  }\n}\nconst WrappedFormDemo = Form.create()(FormDemo);\n<WrappedFormDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **校验其他组件**"},{type:"code",content:'import { Form,Row,Col,Select,Radio,InputNumber,Switch,Slider,Button } from \'dbox-ui\';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\nclass FormDemo extends React.Component {\n  constructor(){\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(\'Received values of form: \', values);\n      }\n    });\n  }\n\n  render(){\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 9 },\n    };\n    return(\n        <Form onSubmit={this.handleSubmit}>\n          <FormItem\n            {...formItemLayout}\n            label="单选"\n            hasFeedback\n          >\n            {getFieldDecorator(\'select\', {\n              rules: [\n                { required: true, message: \'不能为空!\' },\n              ],\n            })(\n              <Select placeholder="请选择">\n                <Option value="shanghai">上海</Option>\n                <Option value="beijing">北京</Option>\n              </Select>\n            )}\n          </FormItem>\n\n          <FormItem\n            {...formItemLayout}\n            label="多选"\n          >\n            {getFieldDecorator(\'select-multiple\', {\n              rules: [\n                { required: true, message: \'不能为空\', type: \'array\' },\n              ],\n            })(\n              <Select mode="multiple" placeholder="请选择">\n                <Option value="shanghai">上海</Option>\n                <Option value="beijing">北京</Option>\n                <Option value="gunagzhou">广州</Option>\n              </Select>\n            )}\n          </FormItem>\n\n          <FormItem\n            {...formItemLayout}\n            label="数字输入"\n          >\n            {getFieldDecorator(\'input-number\', { initialValue: 3 })(\n              <InputNumber min={1} max={10} />\n            )}\n            <span> 空位</span>\n          </FormItem>\n\n          <FormItem\n            {...formItemLayout}\n            label="开关"\n          >\n            {getFieldDecorator(\'switch\')(\n              <Switch />\n            )}\n          </FormItem>\n\n           <FormItem\n            {...formItemLayout}\n            label="滑动条"\n            >\n            {getFieldDecorator(\'slider\',{ initialValue: [10, 30]})(\n              <Slider range />\n            )}\n            </FormItem>\n\n            <FormItem\n              {...formItemLayout}\n              label="单选组"\n            >\n              {getFieldDecorator(\'radio-group\')(\n                <RadioGroup>\n                  <Radio value="a">A</Radio>\n                  <Radio value="b">B</Radio>\n                  <Radio value="c">C</Radio>\n                </RadioGroup>\n              )}\n            </FormItem>\n\n            <FormItem\n              {...formItemLayout}\n              label="单选按钮"\n            >\n              {getFieldDecorator(\'radio-button\')(\n                <RadioGroup>\n                  <RadioButton value="1">按钮 1</RadioButton>\n                  <RadioButton value="2">按钮 2</RadioButton>\n                  <RadioButton value="3">按钮 3</RadioButton>\n                </RadioGroup>\n              )}\n            </FormItem>\n\n\n           <FormItem\n              wrapperCol={{ span: 12, offset: 6 }}\n           >\n            <Button type="primary" htmlType="submit">提交</Button>\n           </FormItem>\n        </Form>\n    )\n  }\n}\nconst WrappedFormDemo = Form.create()(FormDemo);\n<WrappedFormDemo />',settings:{},evalInContext:l},{type:"markdown",content:'#### **Form**\n\n| 参数               | 说明                                                                         | 类型                | 默认值  |\n| ---------------- | -------------------------------------------------------------------------- | ----------------- | ---- |\n| form             | 经 `Form.create()` 包装过的组件会自带 `this.props.form` 属性，直接传给 Form 即可。1.7.0 之后无需设置 | object            | 无    |\n| hideRequiredMark | 隐藏所有表单项的必选标记                                                               | Boolean           | true |\n| onSubmit         | 数据验证成功后回调事件                                                                | Function(e:Event) |      |\n\n#### **Form.create(options)**\n\n使用方式如下：\n\n```jsx\n<span class="token keyword">class</span> <span class="token class-name">CustomizedForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nCustomizedForm <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CustomizedForm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n`options` 的配置项如下。\n\n| 参数               | 说明                                                                                                                      | 类型                                                  |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- |\n| mapPropsToFields | 把父组件的属性映射到表单项上（如：把 Redux store 中的值读出），需要对返回值中的表单域数据用 [`Form.createFormField`](#Form.createFormField) 标记                 | (props) => Object{ fieldName: FormField { value } } |\n| validateMessages | 默认校验信息，可用于把默认错误信息改为中文等，格式与 [newMessages](https://github.com/yiminghe/async-validator/blob/master/src/messages.js) 返回值一致 | Object {nested.path: String }                       |\n| onFieldsChange   | 当 `Form.Item` 子节点的值发生改变时触发，可以把对应的值转存到 Redux store                                                                       | Function(props, fields)                             |\n| onValuesChange   | 任一表单域的值发生改变时的回调                                                                                                         | (props, values) => void                             |\n\n经过 `Form.create` 之后如果要拿到 `ref`，可以使用 `rc-form` 提供的 `wrappedComponentRef`\n\n```jsx\n<span class="token keyword">class</span> <span class="token class-name">CustomizedForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// use wrappedComponentRef</span>\n<span class="token keyword">const</span> EnhancedForm <span class="token operator">=</span>  Form<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CustomizedForm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EnhancedForm</span> <span class="token attr-name">wrappedComponentRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token comment">// => The instance of CustomizedForm</span>\n```\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n\n注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n| 方法                      | 说明                                                          | 类型                                                                                        |\n| ----------------------- | ----------------------------------------------------------- | ----------------------------------------------------------------------------------------- |\n| getFieldDecorator       | 用于和表单进行双向绑定，详见下方描述                                          |                                                                                           |\n| getFieldError           | 获取某个输入控件的 Error                                             | Function(name)                                                                            |\n| getFieldsError          | 获取一组输入控件的 Error ，如不传入参数，则获取全部组件的 Error                      | Function(\\[names: string\\[]])                                                             |\n| getFieldsValue          | 获取一组输入控件的值，如不传入参数，则获取全部组件的值                                 | Function(\\[fieldNames: string\\[]])                                                        |\n| getFieldValue           | 获取一个输入控件的值                                                  | Function(fieldName: string)                                                               |\n| isFieldsTouched         | 判断是否任一输入控件经历过 `getFieldDecorator` 的值收集时机 `options.trigger`  | (names?: string\\[]) => boolean                                                            |\n| isFieldTouched          | 判断一个输入控件是否经历过 `getFieldDecorator` 的值收集时机 `options.trigger`  | (name: string) => boolean                                                                 |\n| isFieldValidating       | 判断一个输入控件是否在校验状态                                             | Function(name)                                                                            |\n| resetFields             | 重置一组输入控件的值（为 `initialValue`）与状态，如不传入参数，则重置所有组件              | Function(\\[names: string\\[]])                                                             |\n| setFields               | 设置一组输入控件的值与 Error。                                          | ({ \\[fieldName]:{ value: any, errors: [Error] } }) => void                                |\n| setFieldsValue          | 设置一组输入控件的值（注意：不要在 `componentWillReceiveProps` 内使用，否则会导致死循环） | ({ \\[fieldName]:value }) => void                                                          |\n| validateFields          | 校验并获取一组输入域的值与 Error，若 fieldNames 参数为空，则校验全部组件               | (\\[fieldNames: string\\[]], [options: object], callback: Function(errors, values)) => void |\n| validateFieldsAndScroll | 与 `validateFields` 相似，但校验完后，如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围   | 参考 `validateFields`                                                                       |\n\n#### **validateFields/validateFieldsAndScroll**\n\n```jsx\n<span class="token keyword">const</span> <span class="token punctuation">{</span> form<span class="token punctuation">:</span> <span class="token punctuation">{</span> validateFields <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'field1\'</span><span class="token punctuation">,</span> <span class="token string">\'field2\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'field1\'</span><span class="token punctuation">,</span> <span class="token string">\'field2\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\n| 参数                  | 说明                                        | 类型        | 默认值   |\n| ------------------- | ----------------------------------------- | --------- | ----- |\n| options.first       | 若为 true，则每一表单域的都会在碰到第一个失败了的校验规则后停止校验      | boolean   | false |\n| options.firstFields | 指定表单域会在碰到第一个失败了的校验规则后停止校验                 | String\\[] | \\[]   |\n| options.force       | 对已经校验过的表单域，在 validateTrigger 再次被触发时是否再次校验 | boolean   | false |\n| options.scroll      | 定义 validateFieldsAndScroll 的滚动行为          | Object    | {}    |\n\n#### ** validateFields 的 callback 参数示例**\n\n-   `errors`:\n\n    ```jsx\n    <span class="token punctuation">{</span>\n      <span class="token string">"userName"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Please input your username!"</span><span class="token punctuation">,</span>\n            <span class="token string">"field"</span><span class="token punctuation">:</span> <span class="token string">"userName"</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"errors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Please input your Password!"</span><span class="token punctuation">,</span>\n            <span class="token string">"field"</span><span class="token punctuation">:</span> <span class="token string">"password"</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    ```\n\n-   `values`:\n\n    ```jsx\n    <span class="token punctuation">{</span>\n      <span class="token string">"userName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>\n      <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    ```\n\n#### **  Form.createFormField **\n\n用于标记 `mapPropsToFields` 返回的表单域数据。\n\n#### ** this.props.form.getFieldDecorator(id, options) **\n\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1.  你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n2.  你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n3.  你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n#### ** 特别注意 **\n\n1.  `getFieldDecorator` 不能用于装饰纯函数组件。\n2.  如果使用的是 `react@<15.3.0`，则 `getFieldDecorator` 调用不能位于纯函数组件中: <https://github.com/facebook/react/pull/6534>\n\n#### ** getFieldDecorator(id, options) 参数 **\n\n| 参数                        | 说明                                                                        | 类型                                         | 默认值                                                                |\n| ------------------------- | ------------------------------------------------------------------------- | ------------------------------------------ | ------------------------------------------------------------------ |\n| id                        | 必填输入控件唯一标志。支持嵌套式的[写法](https://github.com/react-component/form/pull/48)。   | string                                     |                                                                    |\n| options.getValueFromEvent | 可以把 onChange 的参数（如 event）转化为控件的值                                          | function(..args)                           | [reference](https://github.com/react-component/form#option-object) |\n| options.initialValue      | 子节点的初始值，类型、可选值均由子节点决定(注意：由于内部校验时使用 `===` 判断是否变化，建议使用变量缓存所需设置的值而非直接使用字面量)) |                                            |                                                                    |\n| options.normalize         | 转换默认的 value 给控件                                                           | function(value, prevValue, allValues): any | -                                                                  |\n| options.rules             | 校验规则，参考下方文档                                                               | object\\[]                                  |                                                                    |\n| options.trigger           | 收集子节点的值的时机                                                                | string                                     | \'onChange\'                                                         |\n| options.validateFirst     | 当某一规则校验不通过时，是否停止剩下的规则的校验                                                  | boolean                                    | false                                                              |\n| options.validateTrigger   | 校验子节点值的时机                                                                 | string/string\\[]                           | \'onChange\'                                                         |\n| options.valuePropName     | 子节点的值的属性，如 Switch 的是 \'checked\'                                            | string                                     | \'value\'                                                            |\n\n更多参数请查看 [rc-form option](https://github.com/react-component/form#option-object)。\n\n#### ** Form.Item  **\n\n注意：\n\n-   一个 Form.Item 建议只放一个被 getFieldDecorator 装饰过的 child，当有多个被装饰过的 child 时，`help` `required` `validateStatus` 无法自动生成。\n-   `2.2.0` 之前，只有当表单域为 Form.Item 的子元素时，才会自动生成 `help` `required` `validateStatus`，嵌套情况需要自行设置。\n\n| 参数             | 说明                                                                                                   | 类型               | 默认值   |\n| -------------- | ---------------------------------------------------------------------------------------------------- | ---------------- | ----- |\n| colon          | 配合 label 属性使用，表示是否显示 label 后面的冒号                                                                     | boolean          | true  |\n| extra          | 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。                                                          | string/ReactNode |       |\n| formType       | 表单类型，目前有紧凑型和默认型，紧凑型设置为 `compact`                                                                     | string           |       |\n| hasFeedback    | 配合 validateStatus 属性使用，展示校验状态图标，建议只配合 Input 组件使用                                                     | boolean          | false |\n| help           | 提示信息，如不设置，则会根据校验规则自动生成                                                                               | string/ReactNode |       |\n| label          | label 标签的文本                                                                                          | string/ReactNode |       |\n| labelCol       | label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}` | [object]         |       |\n| required       | 是否必填，如不设置，则会根据校验规则自动生成                                                                               | boolean          | false |\n| validateStatus | 校验状态，如不设置，则会根据校验规则自动生成，可选：\'success\' \'warning\' \'error\' \'validating\'                                   | string           |       |\n| wrapperCol     | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol                                                                    | [object]         |       |\n\n#### ** 校验规则 **\n\n| 参数         | 说明                                                             | 类型                                      | 默认值      |\n| ---------- | -------------------------------------------------------------- | --------------------------------------- | -------- |\n| enum       | 枚举类型                                                           | string                                  | -        |\n| len        | 字段长度                                                           | number                                  | -        |\n| max        | 最大长度                                                           | number                                  | -        |\n| message    | 校验文案                                                           | string                                  | -        |\n| min        | 最小长度                                                           | number                                  | -        |\n| pattern    | 正则表达式校验                                                        | RegExp                                  | -        |\n| required   | 是否必选                                                           | boolean                                 | `false`  |\n| transform  | 校验前转换字段值                                                       | function(value) => transformedValue:any | -        |\n| type       | 内建校验类型，[可选项](https://github.com/yiminghe/async-validator#type) | string                                  | \'string\' |\n| validator  | 自定义校验（注意，[callback 必须被调用]）                                     | function(rule, value, callback)         | -        |\n| whitespace | 必选时，空格是否会被视为错误                                                 | boolean                                 | `false`  |\n\n更多高级用法可研究 [async-validator](https://github.com/yiminghe/async-validator)。'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Input",examples:t(1286)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(96)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Input$0 = require('./index.jsx');\nconst Input = Input$0.default || Input$0;",o);e.exports=[{type:"markdown",content:"数据输入，可用于表单提交。\n\n#### **基本使用**\n\n可通过设置 `disabled` 属性为禁用状态，设置 `readOnly` 属性为只读状态，设置`clearable` 属性为支持可清除。"},{type:"code",content:"import { Input } from 'dbox-ui';\n<div>\n    <Input type='text' placeholder='请输入' style={{width: '200px'}} clearable/><br /><br />\n    <Input type='text' disabled placeholder='请输入' style={{width: '200px'}} /><br /><br />\n    <Input type='text' readOnly value='请输入' style={{width: '200px'}} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **前置／后置**\n\n用于一些固定组合。`addonBefore` 设置前置内容，`beforelength` 设置前置内容长度。`addonAfter` 和`afterlength`\n则用来设置后置属性。"},{type:"code",content:"import { Input,Select } from 'dbox-ui';\nconst selectBefore = (\n  <Select defaultValue='Http://' style={{ width: '90px' }}>\n    <Option value='Http://'>Http://</Option>\n    <Option value='Https://'>Https://</Option>\n  </Select>\n);\nconst selectAfter = (\n  <Select defaultValue='.com' style={{ width: '80px' }}>\n    <Option value='.com'>.com</Option>\n    <Option value='.jp'>.jp</Option>\n    <Option value='.cn'>.cn</Option>\n    <Option value='.org'>.org</Option>\n  </Select>\n);\n\n<div>\n    <div style={{width:'400px'}} >\n        <Input type='text' addonBefore='邮政编码' placeholder='请输入' beforelength='100px' />\n    </div>\n    <br />\n    <div style={{width: '400px'}} >\n        <Input type='text' placeholder='请输入' addonAfter='.com' afterlength='80px' />\n    </div>\n    <br />\n    <div style={{width: '400px'}} >\n        <Input type='text' addonBefore={selectBefore} placeholder='请输入' addonAfter={selectAfter} beforelength='100px' afterlength='80px' />\n    </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **搜索**\n\n使用 `Input.Search` 用于带有搜索按钮或者搜索图标的输入框, `enterButton` 属性设置值则会显示搜索按钮,否则显示搜索图标。"},{type:"code",content:"import { Input } from 'dbox-ui';\nconst Search = Input.Search;\n<div>\n    <Search\n        placeholder='请输入'\n        onSearch={value => console.log(value)}\n        style={{ width: '250px' }}\n    ></Search>\n    <br /><br />\n    <Search\n        placeholder='请输入'\n        onSearch={value => console.log(value)}\n        style={{ width: '250px' }}\n        enterButton\n    ></Search>\n    <br /><br />\n    <Search style={{ width: '250px' }} enterButton='搜索' placeholder='请输入' onSearch={(value => console.log(value))} ></Search>\n    <br /><br />\n    <Search style={{ width: '250px' }} size='large' enterButton='搜索' placeholder='请输入' onSearch={(value => console.log(value))} ></Search>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **前缀／后缀**\n\n可通过设置 `prefix`、`suffix` 属性在输入框上添加前缀或后缀图标。"},{type:"code",content:"import { Input,Icon } from 'dbox-ui';\n<div >\n    <Input placeholder='请输入' style={{ width: '250px' }} prefix={<Icon type='user' />} onChange={(e) => console.log(e.target.value)} /><br /><br />\n    <Input placeholder='请输入' style={{ width: '250px' }} suffix={<Icon type='edit' />} onChange={(e) => console.log(e.target.value)} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种大小**\n\n可通过设置 `size` 属性控制输入框的大小,默认为中。"},{type:"code",content:"import { Input } from 'dbox-ui';\nconst Search = Input.Search;\n<div>\n    <Input size='large' placeholder='请输入' style={{width: '200px'}} /><br /><br />\n    <Input placeholder='请输入' style={{width: '200px'}} /><br /><br />\n    <Input size='small' placeholder='请输入' style={{width: '200px'}} /><br /><br />\n    <Search style={{ width: '200px' }} size='large' onSearch={(value => console.log(value))} placeholder='请输入' />\n    <br /><br />\n    <Search style={{ width: '200px' }} onSearch={(value => console.log(value))} placeholder='请输入'/>\n    <br /><br />\n    <Search style={{ width: '200px' }} size='small' onSearch={(value => console.log(value))} placeholder='请输入' />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **输入框的组合**\n\n使用 `InputGroup` 用于组合其它组件。"},{type:"code",content:"import { Input,Col,Select,DatePicker } from 'dbox-ui';\nconst InputGroup = Input.Group;\n<div>\n    <InputGroup size='large'>\n        <Col span={3}>\n        <Input defaultValue='021' />\n        </Col>\n        <Col span={8}>\n        <Input defaultValue='12345678' />\n        </Col>\n    </InputGroup>\n    <br />\n    <InputGroup compact>\n        <Input style={{width: '100px'}} defaultValue='0571' />\n        <Input style={{width: '160px'}} defaultValue='26888888' />\n    </InputGroup>\n    <br />\n\n    <InputGroup compact>\n        <Select defaultValue='Shanghai' style={{width: '160px'}}>\n        <Option value='Shanghai'>上海</Option>\n        <Option value='Jiangsu'>江苏</Option>\n        </Select>\n        <Input style={{width: '160px'}} defaultValue='上海' />\n    </InputGroup>\n    <br />\n    <InputGroup compact>\n        <Input style={{width: '160px'}} defaultValue='请输入' />\n        <DatePicker style={{width: '150px'}} />\n    </InputGroup>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **文本框**\n\n`Textarea` 用于多行输入,设置 `autosize` 的 `minRows`和 `maxRows` 控制文本框高度。"},{type:"code",content:"import { Input } from 'dbox-ui';\nconst Textarea = Input.Textarea;\n<div>\n    <Textarea style={{width: '400px'}} ></Textarea>  <br /><br />\n    <Textarea style={{width: '400px'}} autosize={{minRows: 2, maxRows: 6}} ></Textarea>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **输入时格式化展示**\n\n结合 `Tooltip` 组件，实现一个数值输入框，方便内容超长时的全量展现。"},{type:"code",content:"import { Input, Tooltip} from 'dbox-ui';\n\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}\n\nclass NumericInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n  onChange(e){\n    const { value } = e.target;\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  }\n\n  // '.' at the end or only '-' in the input box.\n  onBlur(){\n    const { value, onBlur, onChange } = this.props;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange({ value: value.slice(0, -1) });\n    }\n    if (onBlur) {\n      onBlur();\n    }\n  }\n\n  render() {\n    const { value } = this.props;\n    const title = value ? (\n      <span>\n        {value !== '-' ? formatNumber(value) : '-'}\n      </span>\n    ) : '请输入数字';\n    return (\n      <Tooltip\n        trigger={['focus']}\n        title={title}\n        placement=\"topLeft\"\n        overlayClassName=\"numeric-input\"\n      >\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"请输入数字\"\n          maxLength=\"25\"\n        />\n      </Tooltip>\n    );\n  }\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(value){\n    this.setState({ value });\n  }\n\n  render() {\n    return <NumericInput style={{ width: 120 }} value={this.state.value} onChange={this.onChange} />;\n  }\n}\n\n<NumericInputDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Input**\n\n| 参数           | 说明                                                         | 类型          | 默认值       |     |\n| ------------ | ---------------------------------------------------------- | ----------- | --------- | --- |\n| addonAfter   | 带标签的 input，设置后置标签                                          | string      | ReactNode |     |\n| addonBefore  | 带标签的 input，设置前置标签                                          | string      | ReactNode |     |\n| afterlength  | 后置标签宽度                                                     | string      |           |     |\n| beforelength | 前置标签宽度                                                     | string      |           |     |\n| clearable    | 输入框可删除                                                     | boolean     | false     |     |\n| defaultValue | 输入框默认内容                                                    | string      |           |     |\n| disabled     | 是否禁用状态，默认为 false                                           | boolean     | false     |     |\n| id           | 输入框的 id                                                    | string      |           |     |\n| prefix       | 带有前缀图标的 input                                              | string      | ReactNode |     |\n| size         | 控件大小。注：标准表单内的输入框大小限制为 `large`。可选 `large` `default` `small` | string      | `default` |     |\n| suffix       | 带有后缀图标的 input                                              | string      | ReactNode |     |\n| type         | 声明 input 类型，同原生 input 标签的 type 属性                          | string      | `text`    |     |\n| value        | 输入框内容                                                      | string      |           |     |\n| onPressEnter | 按下回车的回调                                                    | function(e) |           |     |\n\n#### **Input.TextArea**\n\n| 参数           | 说明                                                         | 类型             | 默认值   |\n| ------------ | ---------------------------------------------------------- | -------------- | ----- |\n| autosize     | 自适应内容高度，可设置为 `true/false` 或对象：`{ minRows: 2, maxRows: 6 }` | boolean/object | false |\n| defaultValue | 输入框默认内容                                                    | string         |       |\n| value        | 输入框内容                                                      | string         |       |\n| onPressEnter | 按下回车的回调                                                    | function(e)    |       |\n\n#### **Input.Search**\n\n| 参数          | 说明              | 类型                | 默认值   |\n| ----------- | --------------- | ----------------- | ----- |\n| enterButton | 是否有确认按钮，可设为按钮文字 | boolean/ReactNode | false |\n| onSearch    | 点击搜索或按下回车键时的回调  | function(value)   |       |\n\n#### **Input.Group**\n\n| 参数      | 说明                                                          | 类型      | 默认值       |\n| ------- | ----------------------------------------------------------- | ------- | --------- |\n| compact | 是否用紧凑模式                                                     | boolean | false     |\n| size    | `Input.Group` 中所有的 `Input` 的大小，可选 `large` `default` `small` | string  | `default` |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"InputNumber",examples:t(1288)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(399)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst InputNumber$0 = require('./index.jsx');\nconst InputNumber = InputNumber$0.default || InputNumber$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n 当需要获取标准数值时。\n\n##### **基本使用**"},{type:"code",content:"import { InputNumber } from 'dbox-ui';\n\nconst InputNumberView = () => {\n return (\n   <InputNumber min={1} defaultValue={3} max={10} />\n )\n}\n<InputNumberView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **三种尺寸**"},{type:"code",content:"import { InputNumber } from 'dbox-ui';\n\nconst InputNumberView = () => {\n return (\n   <div>\n     <InputNumber size='small' min={1} defaultValue={3} max={10} />\n     <InputNumber min={1} defaultValue={3} max={10} />\n     <InputNumber size='large' min={1} defaultValue={3} max={10} />\n   </div>\n )\n}\n<InputNumberView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **不可用切换**"},{type:"code",content:"import { Button, InputNumber } from 'dbox-ui';\n\nclass InputNumberView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: true,\n    }\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleToggle() {\n    this.setState({\n      disabled: !this.state.disabled,\n    })\n  }\n  render() {\n    return (\n      <div>\n        <InputNumber min={1} max={100} defaultValue={5} disabled={this.state.disabled} />\n        <div style={{marginTop: '20px'}} >\n          <Button type='primary' onClick={this.handleToggle}>切换按钮</Button>\n        </div>\n      </div>\n    )\n  }\n}\n<InputNumberView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **小数**"},{type:"code",content:"import { InputNumber } from 'dbox-ui';\n\nconst InputNumberView = () => {\n  return (\n    <InputNumber min={1} defaultValue={3} max={10} />\n  )\n}\n<InputNumberView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **格式化展示**"},{type:"code",content:"import { InputNumber } from 'dbox-ui';\n\nconst InputNumberView = () => {\n  return (\n    <div>\n      <InputNumber min={0} max={100} defaultValue={100} formatter={value => `${value}%`} parser={value => value.replace('%', '')} />\n      <InputNumber min={0} defaultValue={2600}\n        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        parser={value => value.replace(/\\$\\s?|(,*)/g, '')} />\n    </div>\n  )\n}\n<InputNumberView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **InputNumber**\n\n| 参数               | 说明                                   | 类型                                       | 默认值      |     |\n| ---------------- | ------------------------------------ | ---------------------------------------- | -------- | --- |\n| defaultValue     | 初始值                                  | number                                   |          |     |\n| disabled         | 禁用                                   | boolean                                  | false    |     |\n| formatter        | 指定输入框展示值的格式                          | function(value: number \\| string):string | -        |     |\n| max              | 最大值                                  | number                                   | infinity |     |\n| min              | 最小值                                  | number                                   | infinity |     |\n| parser           | 指定从formatter里转换会数字的方式，和formatter搭配使用 | function                                 | -        |     |\n| precision        | 数值精度                                 | number                                   | -        |     |\n| decimalSeparator | 小数点                                  | string                                   | -        |     |\n| size             | 输入框大小                                | string                                   | -        |     |\n| step             | 每次改变步数，可以为小数                         | number                                   | 1        |     |\n| value            | 当前值                                  | number                                   |          |     |\n| onChange         | 变化回调                                 | Function(value: number                   | string)  |     |\n\n#### **方法**\n\n| 民称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n<style>.idoll-input-number{margin-right:10px}</style>"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Radio",examples:t(1290)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(130)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Radio$0 = require('./index.jsx');\nconst Radio = Radio$0.default || Radio$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n在多个备选项中选中单个状态。\n\n##### **基本样式展示**\n\n点击文字或按钮选中对应状态"},{type:"code",content:"import {Radio} from 'dbox-ui';\n<div>\n\t<Radio>A</Radio>\n\t<Radio checked>B</Radio>\n\t<Radio defaultChecked>C</Radio>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **禁用单选框**\n\n通过增加按钮来控制时候允许操作"},{type:"code",content:"import {Radio, Button} from 'dbox-ui';\nclass RadioView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: true\n    }\n    this.toggleDisabled = this.toggleDisabled.bind(this)\n  };\n  toggleDisabled () {\n    this.setState({\n      disabled: !this.state.disabled\n    });\n\t}\n  render() {\n  return (\n\t<div>\n\t\t<Radio defaultChecked={false} disabled >不能操作</Radio>\n\t\t<Radio disabled={this.state.disabled}>不允许操作</Radio>\n\t\t<Button type='primary' onClick={this.toggleDisabled}>\n\t\t\t控制能否操作\n\t\t</Button>\n\t</div>\n  )\n}\n}\n<RadioView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **互斥单选框**\n\n一组单选框只允许选中一个"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nclass RadioView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '1'\n    }\n    this.onChange = this.onChange.bind(this)\n  };\n\tonChange (e) {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value\n\t\t})\n\t}\n  render() {\n  return (\n\t<RadioGroup onChange={this.onChange} defaultValue={this.state.value}>\n\t\t<Radio value='1'>A</Radio>\n\t\t<Radio value='2'>B</Radio>\n\t\t<Radio value='3'>C</Radio>\n\t\t<Radio value='4'>D</Radio>\n\t</RadioGroup>\n  )\n}\n}\n<RadioView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **垂直组合单选框**\n\n适用于垂直组合样式"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nclass RadioView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '1'\n    }\n    this.onChange = this.onChange.bind(this)\n  };\n\tonChange (e) {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value\n\t\t})\n\t}\n  render() {\n  return (\n\t<RadioGroup direction='vertical' onChange={this.onChange} defaultValue='3'>\n\t\t<Radio value='1'>A</Radio>\n\t\t<Radio value='2'>B</Radio>\n\t\t<Radio value='3'>C</Radio>\n\t\t<Radio value='4'>D</Radio>\n\t</RadioGroup>\n  )\n}\n}\n<RadioView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **分组单选框**\n\n通过RadioGroup包裹多个单选组合"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nclass RadioView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '1'\n    }\n    this.onChange = this.onChange.bind(this)\n  };\n\tonChange (e) {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value\n\t\t})\n\t}\n  render() {\n  return (\n\t<div>\n\t\t<RadioGroup onChange={this.onChange} defaultValue='6'>\n\t\t\t<Radio value='5'>A</Radio>\n\t\t\t<Radio value='6'>B</Radio>\n\t\t\t<Radio value='7'>C</Radio>\n\t\t\t<Radio value='8'>D</Radio>\n\t\t</RadioGroup>\n\t\t<br />\n\t\t<RadioGroup onChange={this.onChange} defaultValue='11'>\n\t\t\t<Radio value='10'>A</Radio>\n\t\t\t<Radio value='9'>B</Radio>\n\t\t\t<Radio value='11'>C</Radio>\n\t\t\t<Radio value='12'>D</Radio>\n\t\t</RadioGroup>\n\t</div>\n  )\n}\n}\n<RadioView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **name单选框**\n\n通过给RadioGroup添加name属性给予值让所有的单选框拥有统一的类名方便统一操作"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nclass RadioView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '1'\n    }\n    this.onChange = this.onChange.bind(this)\n  };\n\tonChange (e) {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value\n\t\t})\n\t}\n  render() {\n  return (\n\t<RadioGroup name='radioGroup' onChange={this.onChange} defaultValue={this.state.value}>\n\t\t<Radio value='1'>A</Radio>\n\t\t<Radio value='2'>B</Radio>\n\t\t<Radio value='3'>C</Radio>\n\t\t<Radio value='4'>D</Radio>\n\t</RadioGroup>\n  )\n}\n}\n<RadioView />",settings:{},evalInContext:l},{type:"markdown",content:"##### **按钮样式**\n\n仿按钮样式的单选框"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\n<div>\n\t<RadioGroup defaultValue='a'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<br />\n\t<RadioGroup defaultValue='a'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton disabled value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<br />\n\t<RadioGroup defaultValue='c' disabled>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **大小按钮**\n\n通过size属性设置large,small和不设置属性改变单选框的大小"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\n<div>\n\t<RadioGroup disabled defaultValue='a' size='large'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<br />\n\t<RadioGroup defaultValue='a'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<br />\n\t<RadioGroup defaultValue='a' size='small'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **按钮底纹**\n\n拥有底纹的仿按钮样式的单选框"},{type:"code",content:"import {Radio} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\n<div>\n\t<RadioGroup disabled defaultValue='b' buttonStyle='solid'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<RadioGroup size='large' defaultValue='c' buttonStyle='solid'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n\t<br />\n\t<RadioGroup size='small' defaultValue='d' buttonStyle='solid'>\n\t\t<RadioButton value='a'>杭州</RadioButton>\n\t\t<RadioButton value='b'>上海</RadioButton>\n\t\t<RadioButton disabled value='c'>北京</RadioButton>\n\t\t<RadioButton value='d'>成都</RadioButton>\n\t</RadioGroup>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:'## API\n\n### Radio\n\n| 参数             | 说明                   | 类型      | 默认值   |\n| -------------- | -------------------- | ------- | ----- |\n| checked        | 指定当前是否选中             | boolean | false |\n| defaultChecked | 初始是否选中               | boolean | false |\n| value          | 根据 value 进行比较，判断是否选中 | any     | 无     |\n\n### RadioGroup\n\n单选框组合，用于包裹一组 `Radio`。\n\n| 参数           | 说明                                               | 类型                                                                       | 默认值       |\n| ------------ | ------------------------------------------------ | ------------------------------------------------------------------------ | --------- |\n| defaultValue | 默认选中的值                                           | string                                                                   | 无         |\n| direction    | 组合的垂直(vertical)与水平排列方式(默认无传参)                    | string                                                                   | 无         |\n| name         | RadioGroup 下所有 `input[type="radio"]` 的 `name` 属性 | string                                                                   | 无         |\n| options      | 以配置形式设置子元素                                       | string\\[]\\\\ Array&lt;{ label: string value: string disabled?: boolean }> | 无         |\n| size         | 大小，只对按钮样式生效                                      | `large` \\\\ `default` \\\\ `small`                                          | `default` |\n| value        | 用于设置当前选中的值                                       | any                                                                      | 1         |\n| onChange     | 选项变化时的回调函数                                       | Function(e:Event)                                                        | 无         |\n| buttonStyle  | RadioButton 的风格样式，目前有描边和填色两种风格                   | 默认描边 \\\\ `solid`填充                                                        | 无         |\n\n## method\n\n### Radio method\n\n| 名称      | 描述   |\n| ------- | ---- |\n| focus() | 获取焦点 |\n| blur()  | 移除焦点 |\n\n<style>.idoll-steps{margin-bottom: 10px}</style>'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Select",examples:t(1292)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(83)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Select$0 = require('./index.jsx');\nconst Select = Select$0.default || Select$0;",o);e.exports=[{type:"markdown",content:"可进行单选、多选、分组选择等场景。\n\n##### **基本使用**\n\n可通过设置 `size` 属性控制大小, `disabled` 属性可设置为禁用。"},{type:"code",content:"import { Select } from 'dbox-ui';\nconst {Option} = Select;\n<div>\n    <Select size='small' placeholder='请选择' style={{ width: 200 }}>\n        <Option value='beijing'>北京</Option>\n        <Option value='shanghai'>上海</Option>\n        <Option value='guangzhou'>广州</Option>\n        <Option value='shenzhen'>深圳</Option>\n    </Select>\n    <br /><br />\n\n    <Select placeholder='请选择' style={{ width: 200 }} allowClear>\n        <Option value='beijing'>北京1</Option>\n        <Option value='shanghai'>上海1</Option>\n        <Option value='guangzhou'>广州1</Option>\n        <Option value='shenzhen'>深圳1</Option>\n    </Select>\n    <br /><br />\n\n    <Select size='large' placeholder='请选择' style={{ width: 200 }}>\n        <Option value='beijing'>北京</Option>\n        <Option value='shanghai'>上海</Option>\n        <Option value='guangzhou'>广州</Option>\n        <Option value='shenzhen'>深圳</Option>\n    </Select>\n    <br /><br />\n\n    <Select defaultValue='select' style={{ width: 200 }} disabled>\n        <Option value='select'>请选择</Option>\n    </Select>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **搜索下拉框**\n\n可通过设置`showSearch` 属性对选项进行搜索。"},{type:"code",content:"import { Select } from 'dbox-ui';\nconst {Option} = Select;\n<Select showSearch style={{ width: 200 }} placeholder='请选择' >\n    <Option value='beijing'>北京</Option>\n    <Option value='shanghai'>上海</Option>\n    <Option value='guangzhou'>广州</Option>\n    <Option value='shenzhen'>深圳</Option>\n</Select>",settings:{},evalInContext:l},{type:"markdown",content:"#### **多选下拉框**\n\n可通过设置 `mode` 属性为 `multiple` 从已有条目中多选。设置 `mode` 属性为 `tags` 可随意输入内容。"},{type:"code",content:"import { Select } from 'dbox-ui';\nconst {Option} = Select;\n<div>\n    <Select mode='multiple' style={{ width: 200 }} placeholder='多选' >\n        <Option value='beijing'>北京</Option>\n        <Option value='shanghai'>上海</Option>\n        <Option value='guangzhou'>广州</Option>\n        <Option value='shenzhen'>深圳</Option>\n    </Select>\n    <br /><br />\n    <Select mode='tags' style={{ width: 200 }} placeholder='可随意输入内容' >\n        <Option value='beijing'>北京</Option>\n        <Option value='shanghai'>上海</Option>\n        <Option value='guangzhou'>广州</Option>\n        <Option value='shenzhen'>深圳</Option>\n    </Select>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **获得选项文本**"},{type:"code",content:"import { Select } from 'dbox-ui';\nconst {Option} = Select;\nhandleChange = (value) => {\n    console.log(value);\n}\n<Select labelInValue defaultValue={{ key: 'beijing' }} style={{ width: 200 }} onChange={this.handleChange}>\n    <Option value='beijing'>北京</Option>\n    <Option value='shanghai'>上海</Option>\n    <Option value='guangzhou'>广州</Option>\n    <Option value='shenzhen'>深圳</Option>\n</Select>",settings:{},evalInContext:l},{type:"markdown",content:"#### **搜索用户**"},{type:"code",content:"import { Select,Spin } from 'dbox-ui';\nconst {Option} = Select;\nclass SearchExample extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            value: [],\n            fetching: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.getUserInfo = this.getUserInfo.bind(this);\n    }\n\n    handleChange(value) {\n        this.setState({\n            value,\n            data: [],\n            fetching: false,\n        });\n    }\n\n    getUserInfo(value) {\n        console.log('getUserInfo ', value);\n        this.setState({ data: [], fetching: true });\n        // 这里直接调用后端api\n        setTimeout(() => {\n        const data = [\n            {value: '1', text: 'aa'},\n            {value: '2', text: 'bb'},\n            {value: '3', text: 'cc'},\n        ]\n        this.setState({ data, fetching: false });\n        }, 1000);\n    }\n    render(){\n        return (\n            <Select\n                mode='multiple'\n                labelInValue\n                value={this.state.value}\n                placeholder='请搜索'\n                notFoundContent={this.state.fetching ? <Spin size='small' /> : null}\n                filterOption={false}\n                onSearch={this.getUserInfo}\n                onChange={this.handleChange}\n                style={{ width: '20%' }}\n            >\n                {this.state.data.map(d => <Option key={d.value}>{d.text}</Option>)}\n            </Select>\n        )\n    }\n\n}\n\n<SearchExample />",settings:{},evalInContext:l},{type:"markdown",content:"#### **分组**\n\n使用 `Select.OptGroup` 进行选项分组。"},{type:"code",content:"import { Select } from 'dbox-ui';\nconst {Option, OptGroup} = Select;\n<Select\n    defaultValue='hefei'\n    style={{ width: 200 }}\n    onChange={this.handleChange}\n>\n    <OptGroup label='安徽'>\n        <Option value='xuancheng'>宣城</Option>\n        <Option value='hefei'>合肥</Option>\n    </OptGroup>\n    <OptGroup label='江苏'>\n        <Option value='nanjing'>南京</Option>\n        <Option value='suzhou'>苏州</Option>\n    </OptGroup>\n</Select>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Select**\n\n| 参数                       | 说明                                                                                                 | 类型                                              | 默认值                                |\n| ------------------------ | -------------------------------------------------------------------------------------------------- | ----------------------------------------------- | ---------------------------------- |\n| allowClear               | 支持清除                                                                                               | boolean                                         | false                              |\n| autoClearSearchValue     | 是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效。                                                  | boolean                                         | true                               |\n| autoFocus                | 默认获取焦点                                                                                             | boolean                                         | false                              |\n| defaultActiveFirstOption | 是否默认高亮第一个选项。                                                                                       | boolean                                         | true                               |\n| defaultValue             | 指定默认选中的条目                                                                                          | string string\\[]<br />number number\\[]          | -                                  |\n| disabled                 | 是否禁用                                                                                               | boolean                                         | false                              |\n| dropdownClassName        | 下拉菜单的 className 属性                                                                                 | string                                          | -                                  |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽                                                                                         | boolean                                         | true                               |\n| dropdownStyle            | 下拉菜单的 style 属性                                                                                     | object                                          | -                                  |\n| filterOption             | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。   | boolean or function(inputValue, option)         | true                               |\n| firstActiveValue         | 默认高亮的选项                                                                                            | string\\\\string\\[]                               | -                                  |\n| getPopupContainer        | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位                                               | Function(triggerNode)                           | () => document.body                |\n| labelInValue             | 是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 `{key: string, label: ReactNode}` 的格式 | boolean                                         | false                              |\n| maxTagCount              | 最多显示多少个 tag                                                                                        | number                                          | -                                  |\n| maxTagPlaceholder        | 隐藏 tag 时显示的内容                                                                                      | ReactNode\\\\function(omittedValues)              | -                                  |\n| mode                     | 设置 Select 的模式为多选或标签                                                                                | 'multiple'\\\\'tags'                              | -                                  |\n| notFoundContent          | 当下拉列表为空时显示的内容                                                                                      | string                                          | 'Not Found'                        |\n| optionFilterProp         | 搜索时过滤对应的 option 属性，如设置为 children 表示对内嵌内容进行搜索                                                       | string                                          | value                              |\n| optionLabelProp          | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。                                  | string                                          | `children` （combobox 模式下为 `value`） |\n| placeholder              | 选择框默认文字                                                                                            | string                                          | -                                  |\n| showArrow                | 是否显示下拉小箭头                                                                                          | boolean                                         | true                               |\n| showSearch               | 使单选模式可搜索                                                                                           | boolean                                         | false                              |\n| size                     | 选择框大小，可选 `large` `small`                                                                           | string                                          | default                            |\n| suffixIcon               | 自定义的选择框后缀图标                                                                                        | ReactNode                                       | -                                  |\n| tokenSeparators          | 在 tags 和 multiple 模式下自动分词的分隔符                                                                      | string\\[]                                       |                                    |\n| value                    | 指定当前选中的条目                                                                                          | string string\\[]<br />number number\\[]          | -                                  |\n| onBlur                   | 失去焦点的时回调                                                                                           | function                                        | -                                  |\n| onChange                 | 选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数                                                  | function(value, option:Option/Array&lt;Option>) | -                                  |\n| onDeselect               | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 multiple 或 tags 模式下生效                                           | function(value，option:Option)                   | -                                  |\n| onFocus                  | 获得焦点时回调                                                                                            | function                                        | -                                  |\n| onMouseEnter             | 鼠标移入时回调                                                                                            | function                                        | -                                  |\n| onMouseLeave             | 鼠标移出时回调                                                                                            | function                                        | -                                  |\n| onPopupScroll            | 下拉列表滚动时的回调                                                                                         | function                                        | -                                  |\n| onSearch                 | 文本框值变化时回调                                                                                          | function(value: string)                         |                                    |\n| onSelect                 | 被选中时调用，参数为选中项的 value (或 key) 值                                                                     | function(value, option:Option)                  | -                                  |\n| defaultOpen              | 是否默认展开下拉菜单                                                                                         | boolean                                         | -                                  |\n| open                     | 是否展开下拉菜单                                                                                           | boolean                                         | -                                  |\n| onDropdownVisibleChange  | 展开下拉菜单的回调                                                                                          | function(open)                                  | -                                  |\n\n#### **Select Methods**\n\n| 名称      | 说明   |\n| ------- | ---- |\n| blur()  | 取消焦点 |\n| focus() | 获取焦点 |\n\n#### **Option props**\n\n| 参数        | 说明                                                            | 类型             | 默认值   |\n| --------- | ------------------------------------------------------------- | -------------- | ----- |\n| disabled  | 是否禁用                                                          | boolean        | false |\n| key       | 和 value 含义一致。如果 React 需要你设置此项，此项值与 value 的值相同，然后可以省略 value 设置 | string         |       |\n| title     | 选中该 Option 后，Select 的 title                                   | string         | -     |\n| value     | 默认根据此属性值进行筛选                                                  | string\\\\number | -     |\n| className | Option 器类名                                                    | string         | -     |\n\n#### **OptGroup props**\n\n| 参数    | 说明  | 类型                    | 默认值 |\n| ----- | --- | --------------------- | --- |\n| key   |     | string                | -   |\n| label | 组名  | string\\\\React.Element | 无   |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Switch",examples:t(1294)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(412)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Switch$0 = require('./index.jsx');\nconst Switch = Switch$0.default || Switch$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n表示开关状态/两种状态之间的切换\n\n#### **基本用法**\n\n切换开关状态"},{type:"code",content:"import {Switch} from 'dbox-ui';\n<Switch defaultChecked></Switch>",settings:{},evalInContext:l},{type:"markdown",content:"#### **按钮操作**\n\n通过按钮控制开关状态"},{type:"code",content:"import {Switch, Button} from 'dbox-ui';\nclass SwitchView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    disabled: true,\n    defaultChecked: true\n    }\n    this.toggle = this.toggle.bind(this)\n  };\n  toggle () {\n    this.setState({\n      disabled: !this.state.disabled\n    })\n  };\n  render() {\n  return (\n\t<div>\n\t\t<Switch disabled={this.state.disabled}></Switch>\t\t<Button onClick={this.toggle} >改变禁用状态</Button>\n\t</div>\n  )\n}\n}\n<SwitchView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **两种大小**\n\n通过size是否设置small来控制开关的大小"},{type:"code",content:"import {Switch} from 'dbox-ui';\n<div>\n\t<Switch defaultChecked />\n\t<br />\n\t<Switch size='small' />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **带有文字的按钮**\n\n在开关内添加描述，一目了然开关的状态"},{type:"code",content:"import {Switch} from 'dbox-ui';\n<Switch checkedChildren={'1'} unCheckedChildren={'0'} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **执行中**\n\n多于其他操作搭配，表示开关的执行过程"},{type:"code",content:"import {Switch} from 'dbox-ui';\n<div>\n\t<Switch disabled loading defaultChecked />\n    <br />\n    <Switch disabled size='small' loading />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Switch**\n\n| 参数                | 说明                         | 类型                        | 默认值     |\n| ----------------- | -------------------------- | ------------------------- | ------- |\n| checked           | 指定当前是否选中                   | boolean                   | false   |\n| checkedChildren   | 选中时的内容                     | string\\|ReactNode         |         |\n| defaultChecked    | 初始是否选中                     | boolean                   | false   |\n| size              | 开关大小，可选值：`default` `small` | string                    | default |\n| unCheckedChildren | 非选中时的内容                    | string\\|ReactNode         |         |\n| onChange          | 变化时回调函数                    | Function(checked:Boolean) |         |\n| onClick           | 点击时回调函数                    | Function                  |         |\n| loading           | 加载中的开关                     | boolean                   | false   |\n| disabled          | 失效状态                       | boolean                   | false   |\n\n#### **method**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Slider",examples:t(1296)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(408)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Slider$0 = require('./index.jsx');\nconst Slider = Slider$0.default || Slider$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n当用户需要在数值区间/自定义区间进行选择时，可为连续或离散值\n\n#### **基本使用**"},{type:"code",content:"import { Slider, Switch } from 'dbox-ui';\n\nclass SliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disabled: false,\n    }\n    this.handleDisabledChange = this.handleDisabledChange.bind(this);\n  }\n  handleDisabledChange(disabled) {\n    this.setState({disabled});\n  }\n  render() {\n    const {disabled} = this.state;\n    return (\n      <div>\n        <Slider defaultValue={30}  />\n        <Slider defaultValue={20} disabled={disabled} />\n        <Slider range disabled={disabled} defaultValue={[10, 30]} />\n        Disabled: <Switch size='small' checked={disabled} onClick={this.handleDisabledChange} />\n      </div>\n    )\n  }\n}\n<SliderView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **带输入框的滑块**"},{type:"code",content:"import { Slider, InputNumber, Row, Col } from 'dbox-ui';\nclass SliderView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: 1,\n    }\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange(value) {\n    this.setState({\n      inputValue: value\n    });\n  }\n  render() {\n    const {inputValue} = this.state;\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider\n            min={1}\n            max={20}\n            onChange={this.onChange}\n            value={ typeof inputValue === 'number' ? inputValue : 0}\n          />\n        </Col>\n        <Col span={4} offset={1}>\n          <InputNumber\n            min={1}\n            max={20}\n            value={inputValue}\n            onChange={this.onChange}\n          />\n        </Col>\n      </Row>\n    )\n  }\n}\n<SliderView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义提示**"},{type:"code",content:"import { Slider, Switch } from 'dbox-ui';\n\nconst SliderView = () => {\n    return (\n      <div>\n        <Slider tipFormatter={(value) => `${value}%`}  defaultValue={20}/>\n        <Slider tipFormatter={null} defaultValue={10} />\n      </div>\n    )\n  }\n<SliderView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Slider**\n\n| 参数           | 说明                                                     | 类型                | 默认值       |\n| ------------ | ------------------------------------------------------ | ----------------- | --------- |\n| defaultValue | 支持初始取值。当range为false时，使用number，否则用[number, number]      | number\\\\number\\[] | 0 or 0, 0 |\n| disabled     | 值为true时，滑块为禁用状态                                        | boolean           | false     |\n| dots         | 是否只能拖拽到刻度上                                             | boolean           | false     |\n| max          | 最大值                                                    | number            | 100       |\n| min          | 最小值                                                    | number            | 0         |\n| range        | 双滑块模式                                                  | boolean           | false     |\n| step         | 步长，取值必须大于0，并且可被（max - min）整除。                          | number\\\\null      | 1         |\n| tipFormatter | Slider会将当前值传给tipFormatter,并在Tooltip中显示tipFormatter的返回值 | Function\\\\null    | IDENTITY  |\n| value        | 设置当前取值。当range为false时，使用number，否则使用[number, number]     | number\\\\number\\[] |           |\n| onChange     | 当slider的值发生改变时，会触发onChange事件，并把改变的值作为参数传入              | Function(value)   | NOOP      |\n\n#### **方法**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"TimePicker",examples:t(1298)}},function(e,n,t){var a={"dbox-ui":t(18),moment:t(10),react:t(1),"./index.jsx":t(420)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst TimePicker$0 = require('./index.jsx');\nconst TimePicker = TimePicker$0.default || TimePicker$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n当用户需要一个准确的时间的时候，可以点击标准输入框，弹出时间面板进行选择准确的时间节点。\n\n#### **基本用法**"},{type:"code",content:"import { TimePicker } from 'dbox-ui';\nimport moment from 'moment';\nonChange = (time, timeString) => {\n    console.log(time, timeString);\n  }\n<TimePicker onChange={this.onChange} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种尺寸**"},{type:"code",content:"import { TimePicker } from 'dbox-ui';\nimport moment from 'moment';\n\n<div style={{ display: 'flex' }}>\n  <div style={{marginRight: 10}}>\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size='large' />\n  </div>\n  <div style={{marginRight: 10}}>\n    <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} />\n  </div>\n    <div style={{marginRight: 10}}>\n      <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size='small' />\n    </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **禁用**"},{type:"code",content:"import { TimePicker } from 'dbox-ui';\nimport moment from 'moment';\n\n<TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} disabled />",settings:{},evalInContext:l},{type:"markdown",content:'#### **API**\n\n| 参数              | 说明                       | 类型                                               | 默认值        |\n| --------------- | ------------------------ | ------------------------------------------------ | ---------- |\n| allowEmpty      | 是否展示清除按钮                 | boolean                                          | true       |\n| autoFocus       | 自动获取焦点                   | boolean                                          | false      |\n| className       | 选择器类名                    | string                                           | \'\'         |\n| clearText       | 清除按钮的提示文案                | string                                           | clear      |\n| defaultValue    | 默认时间                     | moment                                           | 无          |\n| disabled        | 禁用全部操作                   | boolean                                          | false      |\n| disabledHours   | 禁止选择部分小时选项               | function()                                       | 无          |\n| disabledMinutes | 禁止选择部分分钟选项               | function(selectedHour)                           | 无          |\n| disabledSeconds | 禁止选择部分秒选项                | function(selectedHour, selectedMinute)           | 无          |\n| format          | 展示的时间格式                  | string                                           | "HH:mm:ss" |\n| inputReadOnly   | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean                                          | false      |\n| placeholder     | 没有值的时候显示的内容              | string                                           | "请选择时间"    |\n| onChange        | 时间发生变化的回调                | function(time: moment, timeString: string): void | 无          |\n| onOpenChange    | 面板打开/关闭时的回调              | (open: boolean): void                            | 无          |\n| value           | 当前时间                     | moment                                           | 无          |'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"TreeSelect",examples:t(1300)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(423)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst TreeSelect$0 = require('./index.jsx');\nconst TreeSelect = TreeSelect$0.default || TreeSelect$0;",o);e.exports=[{type:"markdown",content:"类似 `Select` 的选择控件，可选择的数据结构是一个树形结构。\n\n#### **基本用法**"},{type:"code",content:'import { TreeSelect } from \'dbox-ui\';\nconst TreeNode = TreeSelect.TreeNode;\n\nclass TreeSelectDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            value: undefined,\n        }\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value){\n        console.log(value);\n        this.setState({ value });\n    }\n\n    render() {\n        return (\n            <TreeSelect\n                showSearch\n                style={{ width: 300 }}\n                value={this.state.value}\n                dropdownStyle={{ maxHeight: 400, overflow: \'auto\' }}\n                placeholder="请选择"\n                allowClear\n                treeDefaultExpandAll\n                onChange={this.onChange}\n            >\n                <TreeNode value="zhongguo" title="中国" key="0-1">\n                    <TreeNode value="shanghai" title="上海" key="0-1-1">\n                        <TreeNode value="jingan" title="静安" key="random" />\n                        <TreeNode value="pudongxinqu" title="浦东新区" key="random1" />\n                    </TreeNode>\n                    <TreeNode value="anhui" title="安徽" key="random2">\n                        <TreeNode value="hefei" title="合肥" key="random3" />\n                    </TreeNode>\n                </TreeNode>\n            </TreeSelect>\n            );\n        }\n    }\n<TreeSelectDemo />',settings:{},evalInContext:l},{type:"markdown",content:"#### **从数据直接生成**\n\n可通过设置 `treeData` 属性将 `JSON` 数据直接生成树结构。"},{type:"code",content:"import { TreeSelect } from 'dbox-ui';\nconst TreeNode = TreeSelect.TreeNode;\nconst treeData = [{\n  title: '上海',\n  value: 'shanghai',\n  key: '0-0',\n  children: [{\n    title: '浦东新区',\n    value: 'pudongxinqu',\n    key: '0-0-1',\n  }, {\n    title: '静安',\n    value: 'jingan',\n    key: '0-0-2',\n  }],\n}, {\n  title: '安徽',\n  value: 'anhui',\n  key: '0-1',\n}];\nclass TreeSelectDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            value: undefined,\n        }\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value){\n        console.log(value);\n        this.setState({ value });\n    }\n\n    render() {\n        return (\n            <TreeSelect\n                showSearch\n                style={{ width: 300 }}\n                value={this.state.value}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"请选择\"\n                allowClear\n                treeDefaultExpandAll\n                onChange={this.onChange}\n            >\n            </TreeSelect>\n            );\n        }\n    }\n<TreeSelectDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **多选**\n\n可通过设置 `multiple` 属性可多选。"},{type:"code",content:"import { TreeSelect } from 'dbox-ui';\nconst TreeNode = TreeSelect.TreeNode;\nconst treeData = [{\n  title: '上海',\n  value: 'shanghai',\n  key: '0-0',\n  children: [{\n    title: '浦东新区',\n    value: 'pudongxinqu',\n    key: '0-0-1',\n  }, {\n    title: '静安',\n    value: 'jingan',\n    key: '0-0-2',\n  }],\n}, {\n  title: '安徽',\n  value: 'anhui',\n  key: '0-1',\n}];\nclass TreeSelectDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            value: undefined,\n        }\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value){\n        console.log(value);\n        this.setState({ value });\n    }\n\n    render() {\n        return (\n            <TreeSelect\n                showSearch\n                style={{ width: 300 }}\n                value={this.state.value}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"请选择\"\n                multiple\n                allowClear\n                treeDefaultExpandAll\n                onChange={this.onChange}\n            >\n            </TreeSelect>\n            );\n        }\n    }\n<TreeSelectDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可勾选**\n\n可通过设置 `treeCheckable` 属性实现勾选框多选功能。"},{type:"code",content:"import { TreeSelect } from 'dbox-ui';\nconst TreeNode = TreeSelect.TreeNode;\nconst treeData = [{\n  title: '上海',\n  value: 'shanghai',\n  key: '0-0',\n  children: [{\n    title: '浦东新区',\n    value: 'pudongxinqu',\n    key: '0-0-1',\n  }, {\n    title: '静安',\n    value: 'jingan',\n    key: '0-0-2',\n  }],\n}, {\n  title: '安徽',\n  value: 'anhui',\n  key: '0-1',\n}];\nclass TreeSelectDemo extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            value: undefined,\n        }\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(value){\n        console.log(value);\n        this.setState({ value });\n    }\n\n    render() {\n        return (\n            <TreeSelect\n                allowClear\n                showSearch\n                style={{ width: 300 }}\n                value={this.state.value}\n                dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n                treeData={treeData}\n                placeholder=\"请选择\"\n                treeCheckable\n                treeDefaultExpandAll\n                onChange={this.onChange}\n            >\n            </TreeSelect>\n            );\n        }\n    }\n<TreeSelectDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Tree**\n\n| 参数                       | 说明                                                                                                                                         | 类型                                                                          | 默认值                   |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------- | --------------------- |\n| allowClear               | 显示清除按钮                                                                                                                                     | boolean                                                                     | false                 |\n| autoClearSearchValue     | 当多选模式下值被选择，自动清空搜索框                                                                                                                         | boolean                                                                     | true                  |\n| defaultValue             | 指定默认选中的条目                                                                                                                                  | string/string\\[]                                                            | -                     |\n| disabled                 | 是否禁用                                                                                                                                       | boolean                                                                     | false                 |\n| dropdownClassName        | 下拉菜单的 className 属性                                                                                                                         | string                                                                      | -                     |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`。                                                                                                              | boolean                                                                     | true                  |\n| dropdownStyle            | 下拉菜单的样式                                                                                                                                    | object                                                                      | -                     |\n| filterTreeNode           | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值                                                                                  | boolean/Function(inputValue: string, treeNode: TreeNode) (函数需要返回bool值)      | Function              |\n| getPopupContainer        | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。                                                                                      | Function(triggerNode)                                                       | () => document.body   |\n| labelInValue             | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 `{value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] }` 的格式 | boolean                                                                     | false                 |\n| loadData                 | 异步加载数据                                                                                                                                     | function(node)                                                              | -                     |\n| maxTagCount              | 最多显示多少个 tag                                                                                                                                | number                                                                      | -                     |\n| maxTagPlaceholder        | 隐藏 tag 时显示的内容                                                                                                                              | ReactNode/function(omittedValues)                                           | -                     |\n| multiple                 | 支持多选（当设置 treeCheckable 时自动变为true）                                                                                                          | boolean                                                                     | false                 |\n| placeholder              | 选择框默认文字                                                                                                                                    | string                                                                      | -                     |\n| searchPlaceholder        | 搜索框默认文字                                                                                                                                    | string                                                                      | -                     |\n| searchValue              | 搜索框的值，可以通过 `onSearch` 获取用户输入                                                                                                               | string                                                                      | -                     |\n| showCheckedStrategy      | 定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点). `TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时). 默认只显示子节点.                             | enum{TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD }   | TreeSelect.SHOW_CHILD |\n| showSearch               | 在下拉中显示搜索框(仅在单选模式下生效)                                                                                                                       | boolean                                                                     | false                 |\n| size                     | 选择框大小，可选 `large` `small`                                                                                                                   | string                                                                      | 'default'             |\n| suffixIcon               | 自定义的选择框后缀图标                                                                                                                                | ReactNode                                                                   | -                     |\n| treeCheckable            | 显示 checkbox                                                                                                                                | boolean                                                                     | false                 |\n| treeCheckStrictly        | checkable 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true                                                                            | boolean                                                                     | false                 |\n| treeData                 | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）                                                                                     | array&lt;{value, title, children, [disabled, disableCheckbox, selectable]}> | \\[]                   |\n| treeDataSimpleMode       | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: [{id:1, pId:0, value:'1', title:\"test1\",...},...], `pId` 是父节点的 id)                  | false\\|Array&lt;{ id: string, pId: string, rootPId: null }>                 | false                 |\n| treeDefaultExpandAll     | 默认展开所有树节点                                                                                                                                  | boolean                                                                     | false                 |\n| treeDefaultExpandedKeys  | 默认展开的树节点                                                                                                                                   | string\\[]                                                                   | -                     |\n| treeExpandedKeys         | 设置展开的树节点                                                                                                                                   | string\\[]                                                                   | -                     |\n| treeNodeFilterProp       | 输入项过滤对应的 treeNode 属性                                                                                                                       | string                                                                      | 'value'               |\n| treeNodeLabelProp        | 作为显示的 prop 设置                                                                                                                              | string                                                                      | 'title'               |\n| value                    | 指定当前选中的条目                                                                                                                                  | string/string\\[]                                                            | -                     |\n| onChange                 | 选中树节点时调用此函数                                                                                                                                | function(value, label, extra)                                               | -                     |\n| onSearch                 | 文本框值变化时回调                                                                                                                                  | function(value: string)                                                     | -                     |\n| onSelect                 | 被选中时调用                                                                                                                                     | function(value, node, extra)                                                | -                     |\n| onTreeExpand             | 展示节点时调用                                                                                                                                    | function(expandedKeys)                                                      | -                     |\n\n#### **Tree 方法**\n\n| 名称      | 描述   |\n| ------- | ---- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n#### **TreeNode props**\n\n> 建议使用 treeData 来代替 TreeNode，免去手工构造麻烦\n\n| 参数              | 说明                        | 类型               | 默认值   |\n| --------------- | ------------------------- | ---------------- | ----- |\n| selectable      | 是否可选                      | boolean          | true  |\n| disableCheckbox | 禁掉 checkbox               | boolean          | false |\n| disabled        | 是否禁用                      | boolean          | false |\n| isLeaf          | 是否是叶子节点                   | boolean          | false |\n| key             | 此项必须设置（其值在整个树范围内唯一）       | string           | -     |\n| title           | 树节点显示的内容                  | string/ReactNode | '---' |\n| value           | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string           | -     |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Transfer",examples:t(1302)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(422)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Transfer$0 = require('./index.jsx');\nconst Transfer = Transfer$0.default || Transfer$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n需要在多个可选项中进行多选时或者切换的时候。\n\n穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。\n选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。 其中，左边一栏为 显示字段，右边一栏为 隐藏字段，API 的设计也反映了这两个概念。\n\n#### **基本用法**"},{type:"code",content:"import { Transfer, Switch} from 'dbox-ui';\n\nconst mockData = [];\nfor (let i = 0; i < 20; i++) {\n  mockData.push({\n    key: i.toString(),\n    title: `内容${i + 1}`,\n    description: `description of content${i + 1}`,\n    disabled: i % 3 < 1,\n  });\n}\n\nconst oriTargetKeys = mockData\n  .filter(item => +item.key % 3 > 1)\n  .map(item => item.key);\n\nclass TransferView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      targetKeys: oriTargetKeys,\n      selectedKeys: [],\n      disabled: true,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleDisable = this.handleDisable.bind(this);\n  }\n  handleChange(nextTargetKeys, direction, moveKeys) {\n    this.setState({ targetKeys: nextTargetKeys });\n\n    console.log('targetKeys: ', nextTargetKeys);\n    console.log('direction: ', direction);\n    console.log('moveKeys: ', moveKeys);\n  }\n\n  handleSelectChange(sourceSelectedKeys, targetSelectedKeys) {\n    this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\n\n    console.log('sourceSelectedKeys: ', sourceSelectedKeys);\n    console.log('targetSelectedKeys: ', targetSelectedKeys);\n  }\n\n  handleScroll(direction, e) {\n    console.log('direction:', direction);\n    console.log('target:', e.target);\n  }\n\n  handleDisable(disabled) {\n    this.setState({ disabled });\n  };\n  render() {\n    const { targetKeys, selectedKeys, disabled } = this.state;\n    return (\n      <div>\n        <div style={{marginBottom: 15}}>\n          <Switch\n            checked={disabled}\n            onChange={this.handleDisable}\n          />\n        </div>\n        <Transfer\n          titles={['显示字段', '隐藏字段']}\n          dataSource={mockData}\n          targetKeys={targetKeys}\n          selectedKeys={selectedKeys}\n          onChange={this.handleChange}\n          onSelectChange={this.handleSelectChange}\n          onScroll={this.handleScroll}\n          render={item => item.title}\n          disabled={!disabled}\n          />\n      </div>\n    )\n  }\n}\n<TransferView />",settings:{},evalInContext:l},{type:"markdown",content:'#### **API**\n\n| 参数             | 说明                                                                                                     | 类型                                             | 默认值                        |\n| -------------- | ------------------------------------------------------------------------------------------------------ | ---------------------------------------------- | -------------------------- |\n| className      | 自定义类                                                                                                   | string                                         |                            |\n| dataSource     | 数据源，其中的数据将会被渲染到左边一栏中，targetKeys 中指定的除外。                                                                | TransferItem\\[]                                | \\[]                        |\n| targetKeys     | 显示在右侧框数据的key集合                                                                                         | string\\[]                                      | \\[]                        |\n| disabled       | 是否禁用                                                                                                   | boolean                                        | false                      |\n| footer         | 底部渲染函数                                                                                                 | (props): ReactNode                             |                            |\n| lazy           | Transfer 使用了 react-lazy-load 优化性能，这里可以设置相关参数。设为 false 可以关闭懒加载。                                         | object , boolean                               | { height: 32, offset: 32 } |\n| listStyle      | 两个穿梭框的自定义样式                                                                                            | object                                         |                            |\n| render         | 每行数据渲染函数，该函数的入参为 dataSource 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 label 字段为 ReactElement，value 字段为 title | Function(record)                               |                            |\n| selectedKeys   | 设置哪些项应该被选中                                                                                             | string\\[]                                      | \\[]                        |\n| titles         | 标题集合，顺序从左至右                                                                                            | string\\[]                                      | \'\', \'\'                     |\n| onChange       | 选项在两栏之间转移时的回调函数                                                                                        | (targetKeys, direction, moveKeys): void        |                            |\n| onScroll       | 选项列表滚动时的回调函数                                                                                           | (direction, event): void                       |                            |\n| onSelectChange | 选中项发生改变时的回调函数                                                                                          | (sourceSelectedKeys, targetSelectedKeys): void |                            |\n\n#### **注意**\n\n按照 React 的规范，所有的组件数组必须绑定 key。在 Transfer 中，dataSource里的数据值需要指定 key 值。对于 dataSource 默认将每列数据的 key 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 rowKey 来指定数据列的主键\n\n```js\n<span class="token comment">// 比如你的数据主键是 uid</span>\n<span class="token keyword">return</span> <span class="token operator">&lt;</span>Transfer rowKey<span class="token operator">=</span><span class="token punctuation">{</span>record <span class="token operator">=></span> record<span class="token punctuation">.</span>uid<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n```'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Upload",examples:t(1304)}},function(e,n,t){var a={"dbox-ui":t(18),reqwest:t(581),react:t(1),"./index.jsx":t(424)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Upload$0 = require('./index.jsx');\nconst Upload = Upload$0.default || Upload$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。\n\n#### **基础上传**\n\n基本的上传操作"},{type:"code",content:"import {Upload, Message, Button} from 'dbox-ui';\nconst commonFileList = [{\n  uid: -1,\n  name: 'xxx.png',\n  status: 'done',\n  url: 'http://www.baidu.com/xxx.png',\n}, {\n  uid: -2,\n  name: 'yyy.png',\n  status: 'done',\n  url: 'http://www.baidu.com/yyy.png',\n}, {\n  uid: -3,\n  name: 'zzz.png',\n  status: 'error',\n  response: 'Server Error 500',\n  url: 'http://www.baidu.com/zzz.png',\n}];\nconst props1 = {\n  name: 'file',\n  action: 'https://jsonplaceholder.typicode.com/posts/',\n  headers: {\n    authorization: 'authorization-text',\n  },\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      Message.success(`${info.file.name} 上传成功。`);\n      return false;\n    } else if (info.file.status === 'error') {\n    \tMessage.error(`${info.file.name} 上传失败。`);\n      return false;\n    }\n  },\n  beforeUpload(file) {\n    const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJPG) {\n      Message.error('您只能上传 JPG或PNG 文件!');\n    }\n    const isLt1M = file.size / 1024 / 1024 < 1;\n    if (!isLt1M) {\n      Message.error('上传图片文件必须小于 1024KB!');\n    }\n    return isJPG && isLt1M;\n  }\n};\n<Upload {...props1} defaultFileList={commonFileList}>\n  <Button type='primary' icon='cloud-upload'>上传</Button>\n  <p>支持上传jpg/png文件格式，且不超过1024kb</p>\n</Upload>",settings:{},evalInContext:l},{type:"markdown",content:"#### **拖拽上传**\n\n将文件拖拽到制定区域或者点击制定区域上传"},{type:"code",content:"import {Upload, Message, Icon} from 'dbox-ui';\nconst Dragger = Upload.Dragger;\nconst commonFileList = [{\n  uid: -1,\n  name: 'xxx.png',\n  status: 'done',\n  url: 'http://www.baidu.com/xxx.png',\n}, {\n  uid: -2,\n  name: 'yyy.png',\n  status: 'done',\n  url: 'http://www.baidu.com/yyy.png',\n}, {\n  uid: -3,\n  name: 'zzz.png',\n  status: 'error',\n  response: 'Server Error 500',\n  url: 'http://www.baidu.com/zzz.png',\n}];\nconst props2 = {\n  name: 'file',\n  multiple: true,\n  action: 'https://jsonplaceholder.typicode.com/posts/',\n  onChange(info) {\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      Message.success(`${info.file.name}文件上传成功.`);\n    } else if (status === 'error') {\n      Message.error(`${info.file.name}文件上传失败.`);\n    }\n  },\n  beforeUpload(file) {\n    const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJPG) {\n      Message.error('您只能上传 JPG或PNG 文件!');\n    }\n    const isLt1M = file.size / 1024 / 1024 < 1;\n    if (!isLt1M) {\n      Message.error('上传图片文件必须小于 1024KB!');\n    }\n    return isJPG && isLt1M;\n  }\n};\n<Dragger {...props2} defaultFileList={commonFileList}>\n  <p className='idoll-upload-icon'><Icon type='cloud-upload' /></p>\n  <p className='idoll-upload-text'>将文件拖到此处，或者点击上传</p>\n  <p className='idoll-upload-limit'>支持上传jpg/png文件格式，且不超过1024kb</p>\n</Dragger>",settings:{},evalInContext:l},{type:"markdown",content:"#### **照片墙上传**\n\n将图片上传后展示为照片墙的上传模式"},{type:"code",content:"import {Upload, Message, Modal, Icon} from 'dbox-ui';\nclass PicturesWall extends React.Component {\n\tconstructor(props) {\n\tsuper(props)\n  this.state = {\n    previewVisible: false,\n    previewImage: '',\n    fileList: [{\n      uid: '-1',\n      name: 'xxx.png',\n      status: 'done',\n      url: 'https://images.pexels.com/photos/160739/smilies-bank-sit-rest-160739.jpeg?cs=srgb&dl=blur-chair-cheerful-160739.jpg&fm=jpg',\n    }],\n  };\n  this.handleCancel = this.handleCancel.bind(this);\n  this.handlePreview = this.handlePreview.bind(this);\n  this.handleChange = this.handleChange.bind(this);\n  this.beforeUpload = this.beforeUpload.bind(this);\n}\n  handleCancel () { this.setState({ previewVisible: false })};\n  handlePreview (file) {\n    this.setState({\n      previewImage: file.url || file.thumbUrl,\n      previewVisible: true,\n    });\n  };\n  beforeUpload (file) {\n    const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJPG) {\n      Message.error('您只能上传 JPG或PNG 文件!');\n    }\n    const isLt1M = file.size / 1024 / 1024 < 1;\n    if (!isLt1M) {\n      Message.error('上传图片文件必须小于 1024KB!');\n    }\n    return isJPG && isLt1M;\n  };\n  handleChange ({ fileList }) {this.setState({ fileList })};\n  render() {\n    const { previewVisible, previewImage, fileList } = this.state;\n    const uploadButton = (\n      <div>\n        <Icon type='plus' />\n        <div className='idoll-upload-text'>Upload</div>\n      </div>\n    );\n    return (\n      <div className='clearfix'>\n        <Upload\n          action='https://jsonplaceholder.typicode.com/posts/'\n          listType='picture-card'\n          fileList={fileList}\n          beforeUpload={this.beforeUpload}\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 3 ? null : uploadButton}\n        </Upload>\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n          <img alt='example' style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n};\n<PicturesWall />",settings:{},evalInContext:l},{type:"markdown",content:"#### **图片列表上传**\n\n将上传后的图片展示为列表样式的上传模式"},{type:"code",content:"import {Upload, Message, Icon, Button} from 'dbox-ui';\nconst fileList = [{\n  uid: -1,\n  name: 'xxx.png',\n  status: 'done',\n  url: 'https://images.pexels.com/photos/207983/pexels-photo-207983.jpeg?cs=srgb&dl=box-cheerful-color-207983.jpg&fm=jpg',\n  thumbUrl:\n  'https://images.pexels.com/photos/207983/pexels-photo-207983.jpeg?cs=srgb&dl=box-cheerful-color-207983.jpg&fm=jpg',\n}, {\n  uid: -2,\n  name: 'yyy.png',\n  status: 'error',\n  url: 'https://images.pexels.com/photos/207969/pexels-photo-207969.jpeg?cs=srgb&dl=cup-cute-emotions-207969.jpg&fm=jpg',\n  thumbUrl: 'https://images.pexels.com/photos/207969/pexels-photo-207969.jpeg?cs=srgb&dl=cup-cute-emotions-207969.jpg&fm=jpg',\n}];\n\nconst props3 = {\n  action: 'https://jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n  beforeUpload (file) {\n    const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJPG) {\n      Message.error('您只能上传 JPG或PNG 文件!');\n    }\n    const isLt1M = file.size / 1024 / 1024 < 1;\n    if (!isLt1M) {\n      Message.error('上传图片文件必须小于 1024KB!');\n    }\n    return isJPG && isLt1M;\n  },\n  onChange(info) {\n    const status = info.file.status;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      Message.success(`${info.file.name}文件上传成功.`);\n    } else if (status === 'error') {\n      Message.error(`${info.file.name}文件上传失败.`);\n    }\n  },\n};\n<Upload {...props3}>\n  <Button type='primary'><Icon type='cloud-upload' />上传</Button>\n</Upload>",settings:{},evalInContext:l},{type:"markdown",content:"#### **手动上传**\n\n将上传操作拆分为选中文件和手动上传操作，确保上传文件的准确性"},{type:"code",content:"import reqwest from 'reqwest';\nimport {Upload, Message, Button, Icon} from 'dbox-ui';\nclass Demo extends React.Component {\n\tconstructor(props) {\n\tsuper(props)\n      this.state = {\n      fileList: [{\n        uid: -1,\n        name: 'xxx.png',\n        status: 'done',\n        url: 'http://www.baidu.com/xxx.png',\n      }, {\n        uid: -2,\n        name: 'yyy.png',\n        status: 'done',\n        url: 'http://www.baidu.com/yyy.png',\n      }, {\n        uid: -3,\n        name: 'zzz.png',\n        status: 'error',\n        response: 'Server Error 500',\n        url: 'http://www.baidu.com/zzz.png',\n      }],\n      uploading: false,\n    }\n    this.handleUpload = this.handleUpload.bind(this);\n  };\n  handleUpload () {\n    const { fileList } = this.state;\n    const formData = [];\n    fileList.forEach((file) => {\n      formData.push(file);\n    });\n    this.setState({\n      uploading: true,\n      fileList: formData\n    });\n\n    // 你可以用AJAX类似这样\n    reqwest({\n      url: 'https://jsonplaceholder.typicode.com/posts/',\n      method: 'post',\n      processData: false,\n      data: formData,\n      success: () => {\n        this.setState({\n          fileList: formData,\n          uploading: false,\n        });\n        console.log(formData)\n        Message.success('文件上传成功.');\n      },\n      error: () => {\n        this.setState({\n          uploading: false,\n        });\n        Message.error('文件上传失败.');\n      },\n    });\n  };\n  render() {\n    const { fileList } = this.state;\n    const props4 = {\n      onRemove: (file) => {\n        this.setState((state) => {\n          const index = this.state.fileList.indexOf(file);\n          const newFileList = this.state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList,\n          };\n        });\n      },\n      beforeUpload: (file) => {\n        const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n        if (!isJPG) {\n          Message.error('您只能上传 JPG或PNG 文件!');\n          return isJPG\n        }\n        const isLt1M = file.size / 1024 / 1024 < 1;\n        if (!isLt1M) {\n          Message.error('上传图片文件必须小于 1024KB!');\n          return isLt1M\n        }\n        if (isJPG || isLt1M) {\n          this.setState(state => ({\n          fileList: [...this.state.fileList, file],\n        }));\n        return false;\n        }\n      },\n      fileList,\n    };\n    return (\n        <div>\n          <Upload className='manual' {...props4}>\n            <Button type='secondary'><Icon type='file' />选择文件</Button>\n            <Button\n              type='primary'\n              className='beginUpload'\n              disabled={this.state.fileList.length <= 3}\n              onClick={this.handleUpload}\n              loading={this.state.uploading}\n              style={{ marginTop: 16 }}\n            >\n              {!this.state.uploading ? <Icon type='cloud-upload' /> : null}{this.state.uploading ? '正在上传' : '开始上传' }\n            </Button>\n            <p>支持上传jpg/png文件格式，且不超过1024kb</p>\n          </Upload>\n        </div>\n    )\n  }\n};\n<Demo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **upload**\n\n| 参数                  | 说明                                                                                                                        | 类型                       | 默认值    |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------ | ------ |\n| name                | 可选参数, 上传的文件                                                                                                               | String                   | file   |\n| defaultFileList     | 可选参数，默认已经上传的文件列表                                                                                                          | Array[Object]            | 无      |\n| fileList            | 可选参数，已经上传的文件列表                                                                                                            | Array[Object]            | 无      |\n| action              | 必选参数, 上传的地址                                                                                                               | String                   | 无      |\n| data                | 可选参数, 上传所需参数或返回上传参数的方法                                                                                                    | Object or function(file) | 无      |\n| headers             | 可选参数, 设置上传的请求头部，IE10 以上有效                                                                                                 | Object                   | 无      |\n| showUploadList      | 可选参数, 是否展示 uploadList, 默认开启                                                                                               | Boolean                  | true   |\n| multiple            | 可选参数, 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件。                                                                             | Boolean                  | false  |\n| accept              | 可选参数, 接受上传的文件类型, 详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept) | String                   | 无      |\n| beforeUpload        | 可选参数, 上传文件之前的钩子，参数为上传的文件，若返回 `false` 或者 Promise 则停止上传。**注意：该方法不支持老 IE**。                                                  | Function                 | 无      |\n| onChange            | 可选参数, 上传文件改变时的状态，详见 onChange                                                                                              | Function                 | 无      |\n| listType            | 上传列表的内建样式，支持两种基本样式 `text` or `picture`                                                                                    | String                   | 'text' |\n| onPreview           | 点击文件链接时的回调                                                                                                                | Function(file)           | 无      |\n| onRemove            | 点击移除文件时的回调                                                                                                                | Function(file)           | 无      |\n| supportServerRender | 服务端渲染时需要打开这个                                                                                                              | Boolean                  | false  |\n| disabled            | 是否禁用                                                                                                                      | Boolean                  | false  |\n\n#### **onChange**\n\n> 上传中、完成、失败都会调用这个函数。\n\n文件状态改变的回调，返回为：\n\n```html\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1.  `file` 当前操作的文件对象。\n\n    ```html\n    {\n       uid: 'uid',      // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突\n       name: 'xx.png'   // 文件名\n       status: 'done',  // 状态有：uploading done error removed\n       response: '{\"status\": \"success\"}',  // 服务端响应内容\n    }\n    ```\n\n2.  `fileList` 当前的文件列表。\n\n3.  `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n#### **显示下载链接**\n\n请使用 fileList 属性设置数组项的 url 属性进行展示控制。\n\n#### **IE note**\n\n-   <https://github.com/react-component/upload#ie89-note>"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n){},function(e,n,t){e.exports={description:"",displayName:"Avatar",methods:[],props:[{defaultValue:{value:"'dbox-avatar'",computed:!1},required:!1,description:"",tags:{},name:"prefixCls"},{defaultValue:{value:"'cirecle'",computed:!1},required:!1,description:"",tags:{},name:"shape"},{defaultValue:{value:"'default'",computed:!1},required:!1,description:"",tags:{},name:"size"}],doclets:{},examples:t(1307)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./avatar.jsx":t(246)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Avatar$0 = require('./avatar.jsx');\nconst Avatar = Avatar$0.default || Avatar$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n用来代表用户，支持图片、图标或字符展示。\n\n##### **基本用法**\n\n通过设置size的值为large,small来控制avatar大小不设置默认为正常大小"},{type:"code",content:"import {Avatar} from 'dbox-ui';\n<div>\n  <div>\n    <Avatar style={{ marginRight: 47 }} size='large' icon='user' />\n    <Avatar style={{ marginRight: 47 }} icon='user' />\n    <Avatar style={{ marginRight: 47 }} size='small' icon='user' />\n  </div>\n  <br />\n  <div>\n    <Avatar style={{ marginRight: 47 }} shape='square' size='large' icon='user' />\n    <Avatar style={{ marginRight: 47 }} shape='square' icon='user' />\n    <Avatar style={{ marginRight: 47 }} shape='square' size='small' icon='user' />\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **基本类型**\n\n可在avatar内设置文字，图片或者背景颜色"},{type:"code",content:"import {Avatar} from 'dbox-ui';\n<div>\n  <Avatar style={{ marginRight: 47 }} icon='user' />\n  <Avatar style={{ marginRight: 47 }}>USER</Avatar>\n  <Avatar style={{ marginRight: 47 }} src='https://images.pexels.com/users/avatars/26735/lisa-fotios-223.jpeg?w=60&h=60&fit=crop&crop=faces' alt='DBox' />\n  <Avatar style={{ backgroundColor: '#13B886', marginRight: 47 }} icon='user' />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **带徽标的头像**\n\n用badge包裹avatar，常用来展示用户的消息数量"},{type:"code",content:"import {Avatar, Badge} from 'dbox-ui';\n<div>\n  <span style={{ marginRight: 47 }}>\n    <Badge count={2}><Avatar shape='square' icon='user' /></Badge>\n  </span>\n  <span>\n    <Badge dot><Avatar shape='square' icon='user' /></Badge>\n  </span>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **自动调整字符大小**\n\n固定avatar大小，自动调整avata内容文字大小"},{type:"code",content:"import {Avatar} from 'dbox-ui';\n<div>\n  <Avatar style={{ marginRight: 47 }}>DBox</Avatar>\n\t<Avatar style={{ marginRight: 47 }}>Alvin</Avatar>\n\t<Avatar style={{ marginRight: 47 }}>react</Avatar>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"##### **按钮调整字符大小**\n\n通过按钮控制avata内容文字大小或者用来切换用户"},{type:"code",content:"import {Avatar, Button} from 'dbox-ui';\nconst UserList = ['Z', 'Alvin', 'Idoll', 'DBox'];\nclass AvatarView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: UserList[0]\n    }\n    this.changeUser = this.changeUser.bind(this)\n  };\n  changeUser () {\n    const index = UserList.indexOf(this.state.user);\n    this.setState({\n      user: index < UserList.length - 1 ? UserList[index + 1] : UserList[0]\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Avatar style={{ verticalAlign: 'middle' }}>\n          {this.state.user}\n        </Avatar>\n        <Button type='primary' style={{ marginLeft: 16, verticalAlign: 'middle' }} onClick={this.changeUser}>\n        Change\n        </Button>\n      </div>\n    )\n  }\n}\n<AvatarView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Avatar**\n\n| 参数      | 说明                                       | 类型                                         | 默认值       |\n| ------- | ---------------------------------------- | ------------------------------------------ | --------- |\n| icon    | 设置头像的图标类型，参考 `Icon` 组件                   | string                                     | -         |\n| shape   | 指定头像的形状                                  | Enum{ 'circle', 'square' }                 | `circle`  |\n| size    | 设置头像的大小                                  | Enum{ 'large', 'default','small', 'tiny' } | `default` |\n| src     | 图片类头像的资源地址                               | string                                     | -         |\n| alt     | 图片无法显示时的替代文本                             | string                                     | -         |\n| onError | 给定src属性但未赋值的事件，返回false会关闭组件默认的fallback行为 | () => boolean                              | -         |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Badge",examples:t(1309)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(248)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Badge$0 = require('./index.jsx');\nconst Badge = Badge$0.default || Badge$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理数据。\n\n#### **基本徽标展示**\n\n通常配合avatar展示需要用户处理的数据量"},{type:"code",content:"import {Badge} from 'dbox-ui';\nconst content = {\n  width: 64,\n  height: 64,\n  borderRadius: 3,\n  background: '#E2E2E2',\n  display: 'inline-block',\n};\n<Badge count={5}>\n  <a href=\"javascript:;\" style={content}></a>\n</Badge>",settings:{},evalInContext:l},{type:"markdown",content:"#### **独立使用**\n\n将用户需要处理的数量单独抽离出来"},{type:"code",content:"import {Badge} from 'dbox-ui';\nconst content = {\n  width: 64,\n  height: 64,\n  borderRadius: 3,\n  background: '#E2E2E2',\n  display: 'inline-block',\n};\n<div>\n\t<Badge count={55}></Badge>\n    <Badge count={8} style={{ backgroundColor: '#13B886' }}></Badge>\n    <Badge count={999} style={{ backgroundColor: '#87d068' }}></Badge>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **封顶数字**\n\n通过设置overflowCount来控制最大的消息数量值"},{type:"code",content:"import {Badge} from 'dbox-ui';\nconst content = {\n  width: 64,\n  height: 64,\n  borderRadius: 3,\n  background: '#E2E2E2',\n  display: 'inline-block',\n};\n<div>\n\t<Badge count={9} overflowCount='10'>\n      <a href='javascript:;' style={content} />\n    </Badge>\n    <Badge count={200}>\n      <a href='javascript:;' style={content} />\n    </Badge>\n    <Badge count={1000} overflowCount='999'>\n      <a href='javascript:;' style={content} />\n    </Badge>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **讨嫌的小红点**\n\n通过dot设置不显示待处理的消息数量"},{type:"code",content:"import {Badge, Icon} from 'dbox-ui';\n<div>\n\t<Badge>\n\t  <Icon type='phone' />\n\t</Badge>\n\t<Badge dot>\n\t  <Icon type='phone' />\n\t</Badge>\n\t<Badge dot>\n\t  <a href='https://www.baidu.com' target='_blank'>一些通知</a>\n\t</Badge>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **a标签包裹可点击**\n\n通过a链接包裹badge来控制点击跳转"},{type:"code",content:"import {Badge} from 'dbox-ui';\n<a href='https://www.baidu.com'>\n  <Badge count={8}>\n    <span className='example' />\n  </Badge>\n</a>",settings:{},evalInContext:l},{type:"markdown",content:"#### **用于表示状态的小圆点**\n\n用dot控制消息的状态"},{type:"code",content:"import {Badge} from 'dbox-ui';\n<div>\n\t<div style={{ position: 'relative', marginLeft: '10px' }}>\n      <Badge dot status='success' />\n      <Badge dot status='error' style={{ marginLeft: '20px' }} />\n      <Badge dot status='default' style={{ marginLeft: '40px' }} />\n      <Badge dot status='processing' style={{ marginLeft: '60px' }} />\n      <Badge dot status='warning' style={{ marginLeft: '80px' }} />\n    </div>\n    <br />\n    <div style={{ position: 'relative', marginLeft: '10px' }}>\n      <Badge dot status='success' text='成功' /><br />\n      <Badge dot status='error' text='错误'  /><br />\n      <Badge dot status='default' text='默认'  /><br />\n      <Badge dot status='processing' text='进行中'  /><br />\n      <Badge dot status='warning' text='警告'  /><br />\n    </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **动态变化**\n\n通过引入按钮或者开关控制消息的数量或者是否展示"},{type:"code",content:"import {Badge, Button, Switch, Icon} from 'dbox-ui';\nconst ButtonGroup = Button.Group;\nconst content = {\n  width: 64,\n  height: 64,\n  borderRadius: 3,\n  background: '#E2E2E2',\n  display: 'inline-block',\n};\nclass BadgeView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    show: true,\n    count: 5,\n    }\n    this.decline = this.decline.bind(this);\n    this.increase = this.increase.bind(this);\n    this.onChange = this.onChange.bind(this);\n  };\n  decline () {\n    const count =this.state.count - 1;\n    if (count < 0) {\n      this.setState({ count: 0 })\n    } else {\n      this.setState({count})\n    }\n  };\n  increase () {\n    const count = this.state.count + 1;\n    this.setState({count})\n  };\n  onChange (show) {\n    this.setState({show})\n  };\n  render() {\n  return (\n\t<div>\n        <div style={{ marginBottom: '10px' }}>\n            <Badge count={this.state.count}>\n              <a href='javascript:;' style={content} />\n            </Badge>\n            <ButtonGroup>\n              <Button onClick={this.decline}>\n              <Icon type='remove' />\n              </Button>\n              <Button onClick={this.increase}>\n                <Icon type='plus' />\n              </Button>\n            </ButtonGroup>\n            </div>\n            <br />\n            <div>\n          <Badge dot={this.state.show}>\n              <a href='javascript:;' style={content} />\n          </Badge>\n          <Switch checked={this.state.show} onChange={this.onChange} />\n          </div>\n        </div>\n    )\n  }\n}\n<BadgeView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Badge**\n\n| 参数            | 说明                                | 类型                                                         | 默认值   |\n| ------------- | --------------------------------- | ---------------------------------------------------------- | ----- |\n| overflowCount | 展示封顶的数字值                          | Number                                                     | 99    |\n| showZero      | 当数值为0时，是否展示Badge                  | boolean                                                    | false |\n| dot           | 不展示数字，只有一个小红点                     | boolean                                                    | false |\n| status        | 和dot搭配使用，在设置dot的前提下有效，设置Badge的状态点 | string(`success`,`processing`,`default`,`error`,`warning`) | ''    |\n| offset        | 设置状态点的位置偏移，格式为 [x, y]             | `[number, number]`                                         | -     |"}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Calendar",examples:t(1311)}},function(e,n,t){var a={"dbox-ui":t(18),moment:t(10),react:t(1),"./index.jsx":t(250)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Calendar$0 = require('./index.jsx');\nconst Calendar = Calendar$0.default || Calendar$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n-   当您需要选择时间，包括年、月、日的时候。\n\n#### **基本用法**"},{type:"code",content:"import { Calendar } from 'dbox-ui';\nimport moment from 'moment';\n\n<div style={{ width: 300, border: '1px solid rgba(226,226,226,1)', borderRadius: 4 }}>\n  <Calendar fullscreen={false} validRange={[moment('2018-01'), moment('2028-12')]} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **带有背景色头部选择**"},{type:"code",content:"import { Calendar } from 'dbox-ui';\nimport moment from 'moment';\n\ndisabledDate = (current) => {\n  // Can not select days before today and today\n  return current && current < moment().endOf('day');\n}\n\nonPanelChange = (value, mode) => {\n  console.log('onPanelChange', value, mode);\n}\n\nonSelect = (date) => {\n  console.log('onSelect', date);\n}\n\nonChange = (date) => {\n  console.log('onChange', date);\n}\n<div style={{ width: 300, border: '1px solid rgba(226,226,226,1)', borderRadius: 4 }}>\n  <Calendar\n    fullscreen={false}\n    mold='backdrop'\n    disabledDate={this.disabledDate}\n    onPanelChange={this.onPanelChange}\n    onSelect={this.onSelect}\n    onChange={this.onChange} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 参数            | 说明                    | 类型                                   | 默认值  |\n| ------------- | --------------------- | ------------------------------------ | ---- |\n| mold          | 不同选择时间的方式('backdrop') | string                               | 无    |\n| value         | 展示日期                  | moment                               | 当前日期 |\n| defaultValue  | 默认展示的日期               | moment                               | 默认日期 |\n| disabledDate  | 不可选择的日期               | (currentDate: moment) => boolean     | 无    |\n| onPanelChange | 日期面板变化回调              | function(date: moment, mode: string) | 无    |\n| onChange      | 日期变化回调                | function(date: moment)               | 无    |\n| onSelect      | 点击选择日期回调              | function(date: moment)               | 无    |\n| validRange    | 设置可以显示的日期             | [moment, moment]                     | 无    |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={description:"",displayName:"Collapse",methods:[],props:[{defaultValue:{value:"true",computed:!1},required:!1,description:"",tags:{},name:"bordered"},{defaultValue:{value:"{ ...animation, appear() {} }",computed:!1},required:!1,description:"",tags:{},name:"openAnimation"},{defaultValue:{value:"'idoll-collapse'",computed:!1},required:!1,description:"",tags:{},name:"prefixCls"}],doclets:{},examples:t(1313)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(380)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Collapse$0 = require('./index.jsx');\nconst Collapse = Collapse$0.default || Collapse$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n对复杂区域进行分组和隐藏，保持页面的整洁性。\n\n##### **折叠面板**\n\n同时折叠或展开多个面板，通过defaultActiveKey设置默认展开项"},{type:"code",content:"import {Collapse} from 'dbox-ui';\nconst Panel = Collapse.Panel;\nconst text1 = `可以同时展开多个面板，这个例子默认展开了第一个。`\nfunction callback(key) {\n  console.log(key);\n}\n<Collapse defaultActiveKey={['1']} onChange={callback}>\n  <Panel header='标题一' key='1' >\n    <p>{text1}</p>\n  </Panel>\n  <Panel header='标题二' key='2'>\n    <p>{text1}</p>\n  </Panel>\n  <Panel header='标题三' key='3' disabled>\n    <p>{text1}</p>\n  </Panel>\n</Collapse>",settings:{},evalInContext:l},{type:"markdown",content:"##### **手风琴**\n\n特殊的折叠面板，只允许单个内容区域展开，通过添加accordion属性"},{type:"code",content:"import {Collapse} from 'dbox-ui';\nconst Panel = Collapse.Panel;\nconst text2 = `同时只能展开一个面板，这个例子默认展开了第二个。`\nfunction callback(key) {\n  console.log(key);\n}\n<Collapse accordion defaultActiveKey={['2']} onChange={callback}>\n  <Panel header='标题一' key='1' >\n    <p>{text2}</p>\n  </Panel>\n  <Panel header='标题二' key='2'>\n    <p>{text2}</p>\n  </Panel>\n  <Panel header='标题三' key='3'>\n    <p>{text2}</p>\n  </Panel>\n</Collapse>",settings:{},evalInContext:l},{type:"markdown",content:"##### **嵌套面板**\n\n对复杂层级面板进行嵌套"},{type:"code",content:"import {Collapse} from 'dbox-ui';\nconst Panel = Collapse.Panel;\nconst text5 = `这里是嵌套折叠面板。`\nfunction callback(key) {\n  console.log(key);\n}\n<Collapse defaultActiveKey={['3']} onChange={callback}>\n  <Panel header='标题一' key='1' >\n    <Collapse accordion>\n      <Panel header='标题一' key='2' >\n        <p>{text5}</p>\n      </Panel>\n    </Collapse>\n  </Panel>\n  <Panel header='标题二' key='3'>\n    <Collapse accordion defaultActiveKey={['4']}>\n      <Panel header='标题一' key='4' >\n        <p>{text5}</p>\n      </Panel>\n    </Collapse>\n  </Panel>\n  <Panel header='标题三' key='5'>\n    <Collapse accordion>\n      <Panel header='标题一' key='6' >\n        <p>{text5}</p>\n      </Panel>\n    </Collapse>\n  </Panel>\n</Collapse>",settings:{},evalInContext:l},{type:"markdown",content:"##### **简洁风格**\n\n一套没有过多样式的折叠面板可通过设置bordered={false}属性值来去掉多余边框"},{type:"code",content:"import {Collapse} from 'dbox-ui';\nconst Panel = Collapse.Panel;\nconst text3 = `一套没有边框的简洁样式。`\nfunction callback(key) {\n  console.log(key);\n}\n<Collapse defaultActiveKey={['2']} bordered={false}>\n  <Panel header='标题一' key='1'>\n    {text3}\n  </Panel>\n  <Panel header='标题二' key='2'>\n    {text3}\n  </Panel>\n  <Panel header='标题三' key='3'>\n    {text3}\n  </Panel>\n</Collapse>",settings:{},evalInContext:l},{type:"markdown",content:"##### **底纹样式**\n\n为面板内容区域增加底纹区分层次"},{type:"code",content:"import {Collapse} from 'dbox-ui';\nconst Panel = Collapse.Panel;\nconst text4 = `一套拥有底纹的折叠样式。`\nfunction callback(key) {\n  console.log(key);\n}\n<Collapse bgColor>\n  <Panel header='标题一' key='1'>\n    <p>{text4}</p>\n  </Panel>\n  <Panel header='标题二' key='2'>\n    <p>{text4}</p>\n  </Panel>\n  <Panel header='标题三' key='3'>\n    <p>{text4}</p>\n  </Panel>\n</Collapse>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Collapse**\n\n| 参数               | 说明            | 类型                | 默认值                     |\n| ---------------- | ------------- | ----------------- | ----------------------- |\n| activeKey        | 当前激活tab面板的key | string/\\[]/string | 默认无，accordion模式下默认第一个元素 |\n| accordion        | 切换手风琴模式       | bool              | false                   |\n| bgColor          | 切换底纹样式        | bool              | false                   |\n| bordered         | 切换无边框样式       | bool              | true                    |\n| defaultActiveKey | 初始化选中面板的key   | string            | 无                       |\n| onChange         | 切换面板的回调       | Function          | 无                       |\n\n#### **Collapse.Panel**\n\n| 参数          | 说明                    | 类型               | 默认值   |\n| ----------- | --------------------- | ---------------- | ----- |\n| disabled    | 禁用后的面板展开与否将无法通过用户交互改变 | boolean          | false |\n| header      | 面板头内容                 | string/ReactNode | 无     |\n| forceRender | 被隐藏时是否渲染DOM结构         | bool             | false |\n| key         | 对应activeKey           | string           | 无     |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Popover",examples:t(1315)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(405)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Popover$0 = require('./index.jsx');\nconst Popover = Popover$0.default || Popover$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现；可以承载更复杂的内容，比如链接或按钮等\n\n#### **基本用法**\n\n基本内容展示，通常用于操作的再次确认"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst content = (\n  <div>\n    <p>这是是内容文本内容文本</p>\n  </div>\n);\n<Popover content={content} title='标题' trigger='hover'>\n  <Button>鼠标移入</Button>\n</Popover>",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种触发方式**\n\n通过设置trigger为hover,focus,click来控制触发的方式"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst content = (\n  <div>\n    <p>这是是内容文本内容文本</p>\n  </div>\n);\n<div className='arrow'>\n  <Popover content={content} title='标题' trigger='hover'>\n    <Button>鼠标移入</Button>\n  </Popover>\n  <Popover content={content} title='标题' trigger='focus'>\n    <Button  style={{marginLeft: 25, marginRight: 25}}>鼠标聚焦</Button>\n  </Popover>\n  <Popover content={content} title='标题' trigger='click'>\n    <Button>单击鼠标</Button>\n  </Popover>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **12个方向**\n\n通过设置placement来设置气泡卡片的显示位置"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst content = (\n  <div>\n    <p>这是是内容文本内容文本</p>\n  </div>\n);\nconst buttonWidth = 70;\nconst text = <span>标题</span>;\n<div className='placement'>\n  <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>\n    <Popover placement='topLeft' title={text} content={content} trigger='click'>\n      <Button> T L </Button>\n    </Popover>\n    <Popover placement='top' title={text} content={content} trigger='click'>\n      <Button style={{marginLeft: 25, marginRight: 25}}>Top</Button>\n    </Popover>\n    <Popover placement='topRight' title={text} content={content} trigger='click'>\n      <Button>T R</Button>\n    </Popover>\n  </div>\n  <div style={{ width: buttonWidth, float: 'left' }}>\n    <Popover placement='leftTop' title={text} content={content} trigger='click'>\n      <Button>L  T</Button>\n    </Popover>\n    <Popover placement='left' title={text} content={content} trigger='click'>\n      <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Left</Button>\n    </Popover>\n    <Popover placement='leftBottom' title={text} content={content} trigger='click'>\n      <Button>L  B</Button>\n    </Popover>\n  </div>\n  <div style={{ width: buttonWidth, marginLeft: (buttonWidth * 4) + 24 }}>\n    <Popover placement='rightTop' title={text} content={content} trigger='click'>\n      <Button>R T</Button>\n    </Popover>\n    <Popover placement='right' title={text} content={content} trigger='click'>\n      <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Right</Button>\n    </Popover>\n    <Popover placement='rightBottom' title={text} content={content} trigger='click'>\n      <Button>R B</Button>\n    </Popover>\n  </div>\n  <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n    <Popover placement='bottomLeft' title={text} content={content} trigger='click'>\n      <Button>B L</Button>\n    </Popover>\n    <Popover placement='bottom' title={text} content={content} trigger='click'>\n      <Button style={{marginLeft: 15, marginRight: 15}}>Bottom</Button>\n    </Popover>\n    <Popover placement='bottomRight' title={text} content={content} trigger='click'>\n      <Button> B R </Button>\n    </Popover>\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **箭头指向**\n\n通过arrowPointAtCenter控制箭头指向中心，默认指向left"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst content = (\n  <div>\n    <p>这是是内容文本内容文本</p>\n  </div>\n);\nconst text = <span>标题</span>;\n<div className='arrow'>\n  <Popover placement='topLeft' title={text} content={content}>\n    <Button>边缘对齐</Button>\n  </Popover>\n  <Popover placement='topLeft' title={text} content={content} arrowPointAtCenter>\n    <Button style={{marginLeft: 25}}>箭头指向中心</Button>\n  </Popover>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **从浮层内关闭**\n\n可从弹出层内关闭弹出层"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst content = (\n  <div>\n    <p>这是是内容文本内容文本</p>\n  </div>\n);\nclass PopoverView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t\tvisible: false\n    }\n    this.hide = this.hide.bind(this);\n    this.handleVisibleChange = this.handleVisibleChange.bind(this);\n  };\n\thide () {\n\t\tthis.setState({\n\t\t  visible: false\n\t\t});\n\t};\n\thandleVisibleChange (visible) {\n\t\tthis.setState({ visible });\n\t};\n  render() {\n  return (\n\t<Popover\n\t  content={<a onClick={this.hide}>关闭</a>}\n\t  title='标题'\n\t  trigger='click'\n\t  visible={this.state.visible}\n\t  onVisibleChange={this.handleVisibleChange}\n\t>\n\t  <Button>单击鼠标</Button>\n\t</Popover>\n  )\n}\n}\n<PopoverView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **悬停点击弹出层**\n\n设置悬浮和点击不同触发内容"},{type:"code",content:"import {Popover, Button} from 'dbox-ui';\nconst clickContent = (\n  <div>\n    这是点击内容\n  </div>\n);\nconst hoverContent = (\n  <div>\n    这是悬停内容\n  </div>\n);\nclass PopoverView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t\tvisible: false\n    }\n    this.hide = this.hide.bind(this);\n    this.hidele = this.hidele.bind(this);\n    this.handleHoveredChange = this.handleHoveredChange.bind(this);\n    this.handleClickChange = this.handleClickChange.bind(this);\n  };\n\thide () {\n\t\tthis.setState({\n\t\t  visible: false,\n\t\t  hovered: false,\n\t\t  clicked: false\n\t\t});\n\t};\n\thidele () {\n\t    this.setState({\n\t      clicked: false,\n\t      hovered: false\n\t    });\n\t  };\n\thandleHoveredChange (visible) {\n\t\tthis.setState({ clicked: false, hovered: visible });\n\t};\n\thandleClickChange (visible) {\n\t\tthis.setState({ clicked: visible, hovered: false });\n\t};\n  render() {\n\t  return (\n\t\t\t<Popover\n  trigger='hover'\n  title='悬停标题'\n  content={hoverContent}\n  visible={this.state.hovered}\n  onVisibleChange={this.handleHoveredChange}\n>\n  <Popover\n    content={(\n      <div>\n        {clickContent}\n        <a onClick={this.hidele}>关闭</a>\n      </div>\n    )}\n    title='点击标题'\n    trigger='click'\n    visible={this.state.clicked}\n    onVisibleChange={this.handleClickChange}\n  >\n    <Button>悬停并点击</Button>\n  </Popover>\n</Popover>\n\t  )\n\t}\n}\n<PopoverView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Popover**\n\n| 参数               | 说明   | 类型                | 默认值 |\n| ---------------- | ---- | ----------------- | --- |\n| content          | 卡片内容 | string\\\\ReactNode | 无   |\n| overlayClassName | 卡片类名 | string            | 无   |\n\n更多属性请参考 [Tooltip]\n\n#### **Action**\n\n请确保 `Popover` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Tree",examples:t(1317)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(421)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Tree$0 = require('./index.jsx');\nconst Tree = Tree$0.default || Tree$0;",o);e.exports=[{type:"markdown",content:"可使用树组件用于表示层级关系的结构，具有收起展开等交互效果。\n\n##### **基本使用**\n\n可选中，默认展开等功能。"},{type:"code",content:"import { Tree } from 'dbox-ui';\nconst TreeNode = Tree.TreeNode;\nonSelect = (selectedKeys, info) => {\n\tconsole.log('selected', selectedKeys, info);\n}\nonCheck = (checkedKeys, info) => {\n  console.log('onCheck', checkedKeys, info);\n}\n<Tree\n  defaultExpandedKeys={['0-0-0-0-0', '0-0-1']}\n  defaultSelectedKeys={['0-0-0-0-1']}\n  onSelect={this.onSelect}\n  onCheck={this.onCheck}\n        >\n  <TreeNode title='上海分公司' key='0-0'>\n    <TreeNode title='开发部' key='0-0-0'>\n      <TreeNode title='测试一部' key='0-0-0-0'>\n        <TreeNode title='选项' key='0-0-0-0-0' />\n        <TreeNode title='选项' key='0-0-0-0-1' />\n      </TreeNode>\n      <TreeNode title='测试二部' key='0-0-0-1' />\n    </TreeNode>\n    <TreeNode title='产品规划部' key='0-0-1'>\n      <TreeNode title={<span>sss</span>} key='0-0-1-0' />\n    </TreeNode>\n    <TreeNode title='财务部' key='0-0-2'>\n      <TreeNode title={<span>sss</span>} key='0-0-2-0' />\n    </TreeNode>\n  </TreeNode>\n\n  <TreeNode title='深圳分公司' key='0-1'>\n    </TreeNode>\n</Tree>",settings:{},evalInContext:l},{type:"markdown",content:"##### **多选树**\n\n可通过设置`checkable`为多选框可选择，设置`disabled`和`disableCheckbox`可分别禁用整个节点和选择框。"},{type:"code",content:"import { Tree } from 'dbox-ui';\nconst TreeNode = Tree.TreeNode;\nonSelect = (selectedKeys, info) => {\n\tconsole.log('selected', selectedKeys, info);\n}\nonCheck = (checkedKeys, info) => {\n  console.log('onCheck', checkedKeys, info);\n}\n<Tree\n  checkable\n  defaultExpandedKeys={['0-0-0-0-0', '0-0-1']}\n  defaultCheckedKeys={['0-0-0', '0-0-1']}\n  onSelect={this.onSelect}\n  onCheck={this.onCheck}\n        >\n  <TreeNode title='上海分公司' key='0-0'>\n    <TreeNode title='开发部' key='0-0-0'>\n      <TreeNode title='测试一部' key='0-0-0-0'>\n        <TreeNode title='选项' key='0-0-0-0-0' />\n        <TreeNode title='选项' key='0-0-0-0-1' />\n      </TreeNode>\n      <TreeNode title='测试二部' key='0-0-0-1' />\n    </TreeNode>\n    <TreeNode title='产品规划部' key='0-0-1'>\n      <TreeNode title={'规划一部'} key='0-0-1-0' />\n    </TreeNode>\n    <TreeNode title='财务部' key='0-0-2'>\n      <TreeNode title={'财务办公室'} key='0-0-1-1' disableCheckbox/>\n    </TreeNode>\n  </TreeNode>\n\n  <TreeNode title='深圳分公司' key='0-1' disabled>\n  </TreeNode>\n</Tree>",settings:{},evalInContext:l},{type:"markdown",content:"##### **可拖动**\n\n可通过设置`draggable`属性为可拖动。"},{type:"code",content:"import { Tree } from 'dbox-ui';\nconst TreeNode = Tree.TreeNode;\n\nconst gData = [{\n      title: '上海',\n      key: '0-0',\n      children: [{\n        title: '静安区',\n        key: '0-0-0',\n        children: [\n          { title: '延长路', key: '0-0-0-0' },\n          { title: '共和新路', key: '0-0-0-1' },\n          { title: '汉中路', key: '0-0-0-2' },\n        ],\n      }, {\n        title: '浦东新区',\n        key: '0-0-1',\n        children: [\n          { title: '龙阳路', key: '0-0-1-0' },\n          { title: '金科路', key: '0-0-1-1' },\n          { title: '张江高科', key: '0-0-1-2' },\n        ],\n      }, {\n        title: '闵行区',\n        key: '0-0-2',\n      }],\n    }, {\n      title: '安徽',\n      key: '0-1',\n      children: [\n        { title: '合肥', key: '0-1-0-0' },\n        { title: '宣城', key: '0-1-0-1' },\n        { title: '芜湖', key: '0-1-0-2' },\n      ],\n    }, {\n      title: '江苏',\n      key: '0-2',\n    }];\n\nclass TreeExample extends React.Component {\n   constructor(){\n    super();\n    this.state = {\n      expandedKeys: ['0-0-0', '0-0-1'],\n      gData,\n      autoExpandParent: true,\n    };\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDragEnter = this.onDragEnter.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n  }\n  onDragStart(info){\n    console.log('start', info);\n  }\n  onDragEnter(info){\n    console.log('drag', info);\n    // expandedKeys 需要受控时设置\n    this.setState({\n      expandedKeys: info.expandedKeys,\n    });\n  }\n  onDrop(info){\n    console.log('drop', info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    // const dragNodesKeys = info.dragNodesKeys;\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    } else {\n        loop(data, dropKey, (item) => {\n          item.children = item.children || [];\n          // where to insert 示例添加到尾部，可以是随意位置\n          item.children.push(dragObj);\n        });\n    }\n    this.setState({\n      gData: data,\n    });\n  }\n  render(){\n    const loop = data => {\n      console.log('loop data');\n      console.log(data);\n      return data.map((item) => {\n        if (item.children && item.children.length) {\n          return <TreeNode key={item.key} title={item.title}>{loop(item.children)}</TreeNode>;\n        }\n        return <TreeNode key={item.key} title={item.title} />;\n      });\n    };\n\n    return (\n      <Tree\n            className='draggable-tree'\n            autoExpandParent={this.state.autoExpandParent}\n            defaultExpandedKeys={this.state.expandedKeys}\n            draggable\n            onDragStart={this.onDragStart}\n            onDragEnter={this.onDragEnter}\n            onDrop={this.onDrop}\n            >\n          {loop(this.state.gData)}\n      </Tree>\n    )\n  }\n}\n<TreeExample />",settings:{},evalInContext:l},{type:"markdown",content:"##### **点击展开节点，异步加载数据**\n\n可通过设置 `loadData` 属性异步加载数据。"},{type:"code",content:"import { Tree } from 'dbox-ui';\nconst TreeNode = Tree.TreeNode;\nclass TreeExample extends React.Component {\n   constructor(){\n    super();\n    this.state = {\n      treeData: [\n        { title: '上海', key: '0' },\n        { title: '安徽', key: '1' },\n        { title: '江苏', key: '2', isLeaf: true },\n      ]\n    };\n    this.onLoadData = this.onLoadData.bind(this);\n    this.renderTreeNodes = this.renderTreeNodes.bind(this);\n  }\n\n  onLoadData(treeNode){\n    return new Promise((resolve) => {\n      if (treeNode.props.children) {\n        resolve();\n        return;\n      }\n      setTimeout(() => {\n        treeNode.props.dataRef.children = [\n          { title: '城市1', key: `${treeNode.props.eventKey}-0` },\n          { title: '城市2', key: `${treeNode.props.eventKey}-1` },\n        ];\n        this.setState({\n          treeData: [...this.state.treeData],\n        });\n        resolve();\n      }, 1000);\n    })\n   }\n\n  renderTreeNodes(data){\n   return data.map((item) => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.title} key={item.key} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode {...item} dataRef={item} />;\n    })\n  }\n\n  render(){\n    return(\n      <Tree loadData={this.onLoadData}>\n          {this.renderTreeNodes(this.state.treeData)}\n      </Tree>\n    )\n  }\n}\n<TreeExample />",settings:{},evalInContext:l},{type:"markdown",content:"##### **受控操作示例**\n\n展示选择树节点，展开/收起节点，选择复选框和默认展开节点等操作示例。"},{type:"code",content:"import { Tree } from 'dbox-ui';\nconst TreeNode = Tree.TreeNode;\nclass TreeExample extends React.Component {\n   constructor(){\n    super();\n    this.state = {\n      expandedKeys: ['0-0-0', '0-0-1'],\n      autoExpandParent: true,\n      checkedKeys: ['0-0-0'],\n      selectedKeys: [],\n    };\n    this.onExpand = this.onExpand.bind(this);\n    this.onCheck = this.onCheck.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  onExpand(expandedKeys){\n    console.log('onExpand', expandedKeys);\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  }\n\n  onCheck(checkedKeys){\n    console.log('onCheck', checkedKeys);\n    this.setState({ checkedKeys });\n  }\n\n  onSelect(selectedKeys, info){\n    console.log('onSelect', info);\n    this.setState({ selectedKeys });\n  }\n\n  renderTreeNodes(data){\n    return data.map((item) => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.title} key={item.key} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode {...item} />;\n    })\n  }\n\n\n  render(){\n    const treeData = [{\n      title: '上海',\n      key: '0-0',\n      children: [{\n        title: '静安区',\n        key: '0-0-0',\n        children: [\n          { title: '延长路', key: '0-0-0-0' },\n          { title: '共和新路', key: '0-0-0-1' },\n          { title: '汉中路', key: '0-0-0-2' },\n        ],\n      }, {\n        title: '浦东新区',\n        key: '0-0-1',\n        children: [\n          { title: '龙阳路', key: '0-0-1-0' },\n          { title: '金科路', key: '0-0-1-1' },\n          { title: '张江高科', key: '0-0-1-2' },\n        ],\n      }, {\n        title: '闵行区',\n        key: '0-0-2',\n      }],\n    }, {\n      title: '安徽',\n      key: '0-1',\n      children: [\n        { title: '合肥', key: '0-1-0-0' },\n        { title: '宣城', key: '0-1-0-1' },\n        { title: '芜湖', key: '0-1-0-2' },\n      ],\n    }, {\n      title: '江苏',\n      key: '0-2',\n    }];\n    return(\n      <Tree\n        checkable\n        onExpand={this.onExpand}\n        expandedKeys={this.state.expandedKeys}\n        autoExpandParent={this.state.autoExpandParent}\n        onCheck={this.onCheck}\n        checkedKeys={this.state.checkedKeys}\n        onSelect={this.onSelect}\n        selectedKeys={this.state.selectedKeys}\n      >\n        {this.renderTreeNodes(treeData)}\n      </Tree>\n    )\n  }\n}\n<TreeExample />",settings:{},evalInContext:l},{type:"markdown",content:"## API\n\n### Tree props\n\n| 参数                  | 说明                                                                                                                                                  | 类型                                                                     | 默认值   |\n| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- | ----- |\n| autoExpandParent    | 是否自动展开父节点                                                                                                                                           | boolean                                                                | true  |\n| checkable           | 节点前添加 Checkbox 复选框                                                                                                                                  | boolean                                                                | false |\n| checkedKeys         | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点key，则子节点自动选中；相应当子节点key都传入，父节点也自动选中。当设置`checkable`和`checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | string\\[], {checked: string\\[], halfChecked: string\\[]}                | \\[]   |\n| checkStrictly       | checkable状态下节点选择完全受控（父子节点选中状态不再关联）                                                                                                                  | boolean                                                                | false |\n| defaultCheckedKeys  | 默认选中复选框的树节点                                                                                                                                         | string\\[]                                                              | \\[]   |\n| defaultExpandAll    | 默认展开所有树节点                                                                                                                                           | boolean                                                                | false |\n| defaultExpandedKeys | 默认展开指定的树节点                                                                                                                                          | string\\[]                                                              | \\[]   |\n| defaultSelectedKeys | 默认选中的树节点                                                                                                                                            | string\\[]                                                              | \\[]   |\n| draggable           | 设置节点可拖拽（IE>8）                                                                                                                                       | boolean                                                                | false |\n| expandedKeys        | （受控）展开指定的树节点                                                                                                                                        | string\\[]                                                              | \\[]   |\n| filterTreeNode      | 按需筛选树节点（高亮），返回true                                                                                                                                  | function(node)                                                         | -     |\n| loadData            | 异步加载数据                                                                                                                                              | function(node)                                                         | -     |\n| multiple            | 支持点选多个节点（节点本身）                                                                                                                                      | boolean                                                                | false |\n| selectedKeys        | （受控）设置选中的树节点                                                                                                                                        | string\\[]                                                              | -     |\n| showIcon            | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式                                                                                              | boolean                                                                | false |\n| onCheck             | 点击复选框触发                                                                                                                                             | function(checkedKeys, e:{checked: bool, checkedNodes, node, event})    | -     |\n| onDragEnd           | dragend 触发时调用                                                                                                                                       | function({event, node})                                                | -     |\n| onDragEnter         | dragenter 触发时调用                                                                                                                                     | function({event, node, expandedKeys})                                  | -     |\n| onDragLeave         | dragleave 触发时调用                                                                                                                                     | function({event, node})                                                | -     |\n| onDragOver          | dragover 触发时调用                                                                                                                                      | function({event, node})                                                | -     |\n| onDragStart         | 开始拖拽时调用                                                                                                                                             | function({event, node})                                                | -     |\n| onDrop              | drop 触发时调用                                                                                                                                          | function({event, node, dragNode, dragNodesKeys})                       | -     |\n| onExpand            | 展开/收起节点时触发                                                                                                                                          | function(expandedKeys, {expanded: bool, node})                         | -     |\n| onRightClick        | 响应右键点击                                                                                                                                              | function({event, node})                                                | -     |\n| onSelect            | 点击树节点触发                                                                                                                                             | function(selectedKeys, e:{selected: bool, selectedNodes, node, event}) | -     |\n\n### TreeNode props\n\n| 参数              | 说明                                                                                                       | 类型               | 默认值        |\n| --------------- | -------------------------------------------------------------------------------------------------------- | ---------------- | ---------- |\n| disableCheckbox | 禁掉 checkbox                                                                                              | boolean          | false      |\n| disabled        | 禁掉响应                                                                                                     | boolean          | false      |\n| isLeaf          | 设置为叶子节点(设置了`loadData`时有效)                                                                                | boolean          | false      |\n| key             | 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！ | string           | 内部计算出的节点位置 |\n| selectable      | 设置节点是否可被选中                                                                                               | boolean          | true       |\n| title           | 标题                                                                                                       | string/ReactNode | '---'      |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Tooltip",examples:t(1319)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(69)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Tooltip$0 = require('./index.jsx');\nconst Tooltip = Tooltip$0.default || Tooltip$0;",o);e.exports=[{type:"markdown",content:"鼠标移入则显示提示，移出消失，用于提示等场景。\n\n#### **基本用法**\n\n简单用法"},{type:"code",content:"import { Tooltip } from 'dbox-ui';\n<Tooltip title='提示文字'>\n    <span>当鼠标移入时会出现文字提示</span>\n</Tooltip>",settings:{},evalInContext:l},{type:"markdown",content:"#### **12个方向**\n\n可通过设置 `placement` 属性控制位置，有12个方向"},{type:"code",content:"import { Tooltip,Button } from 'dbox-ui';\nconst buttonWidth = 70;\nconst text = <span>提示文字</span>;\n<div>\n    <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }} >\n    <Tooltip placement='topLeft' title={text}>\n        <Button>TL</Button>\n    </Tooltip>\n    <Tooltip placement='top' title={text} >\n        <Button style={{ marginLeft: '10px', marginRight: '10px' }}>Top</Button>\n    </Tooltip>\n    <Tooltip placement='topRight' title={text}>\n        <Button>TR</Button>\n    </Tooltip>\n    </div>\n    <div style={{ width: buttonWidth, float: 'left' }}>\n    <Tooltip placement='leftTop' title={text}>\n        <Button>LT</Button>\n    </Tooltip>\n    <Tooltip placement='left' title={text} >\n        <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Left</Button>\n    </Tooltip>\n    <Tooltip placement='leftBottom' title={text}>\n        <Button>LB</Button>\n    </Tooltip>\n    </div>\n    <div style={{ width: buttonWidth,marginLeft: (buttonWidth * 4) + 24 }}>\n    <Tooltip placement='rightTop' title={text}>\n        <Button>RT</Button>\n    </Tooltip>\n    <Tooltip placement='right' title={text} >\n        <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Right</Button>\n    </Tooltip>\n    <Tooltip placement='rightBottom' title={text}>\n        <Button>RB</Button>\n    </Tooltip>\n    </div>\n    <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n    <Tooltip placement='bottomLeft' title={text}>\n        <Button>BL</Button>\n    </Tooltip>\n    <Tooltip placement='bottom' title={text} >\n        <Button style={{ marginLeft: '10px', marginRight: '10px' }}>Bottom</Button>\n    </Tooltip>\n    <Tooltip placement='bottomRight' title={text}>\n        <Button>BR</Button>\n    </Tooltip>\n    </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **箭头指向**"},{type:"code",content:"import { Tooltip,Button } from 'dbox-ui';\nconst text = <span>提示文字</span>;\n<div className='arrow'>\n    <Tooltip placement='topLeft' title={text} >\n        <Button>边缘对齐</Button>\n    </Tooltip>\n    <Tooltip placement='topLeft' title={text} arrowPointAtCenter>\n        <Button>箭头指向中心 </Button>\n    </Tooltip>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Tooltip**\n\n| 参数    | 说明   | 类型                               | 默认值 |\n| ----- | ---- | -------------------------------- | --- |\n| title | 提示文字 | string/ReactNode/() => ReactNode | 无   |\n\n#### **Tooltip、Popconfirm、Popover共同的API**\n\n| 参数                 | 说明                                                                                                                                               | 类型                    | 默认值                 |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------- | ------------------- |\n| arrowPointAtCenter | 箭头是否指向目标元素中心，                                                                                                                                    | boolean               | `false`             |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置                                                                                                                                     | boolean               | `true`              |\n| defaultVisible     | 默认是否显隐                                                                                                                                           | boolean               | false               |\n| getPopupContainer  | 浮层渲染父节点，默认渲染到 body 上。                                                                                                                            | Function(triggerNode) | () => document.body |\n| mouseEnterDelay    | 鼠标移入后延时多少才显示 Tooltip，单位：秒                                                                                                                        | number                | 0                   |\n| mouseLeaveDelay    | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒                                                                                                                        | number                | 0.1                 |\n| overlayClassName   | 卡片类名                                                                                                                                             | string                | 无                   |\n| overlayStyle       | 卡片样式                                                                                                                                             | object                | 无                   |\n| placement          | 气泡框位置，可选 `top`、`left`、 `right`、 `bottom`、 `topLeft`、 `topRight`、 `bottomLeft`、 `bottomRight`、 `leftTop` 、`leftBottom` 、`rightTop`、 `rightBottom` | string                | top                 |\n| trigger            | 触发行为，可选 `hover/focus/click`                                                                                                                      | string                | hover               |\n| visible            | 用于手动控制浮层显隐                                                                                                                                       | boolean               | false               |\n| onVisibleChange    | 显示隐藏的回调                                                                                                                                          | (visible) => void     | 无                   |\n\n#### **注意**\n\n请确保 `Tooltip` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Table",examples:t(1321)}},function(e,n,t){var a={"dbox-ui":t(18),reqwest:t(581),react:t(1),"./index.jsx":t(413)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Table$0 = require('./index.jsx');\nconst Table = Table$0.default || Table$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n当有大量结构化的数据需要展现，同时可对数据进行排序、搜索、分页、自定义操作等复杂行为时；\n\n#### **默认表格**\n\n设置columns,data来决定展示的内容"},{type:"code",content:"import {Table, Divider} from 'dbox-ui';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '审核状态',\n  dataIndex: 'state',\n  key: 'state',\n}, {\n  title: '操作',\n  dataIndex: 'action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\nconst data = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  address: '北京',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  age: 24,\n  address: '南京',\n  Tel: '13262717838',\n  state: '审核通过',\n  }, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  address: '上海',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  address: '合肥',\n  Tel: '13947766628',\n  state: '审核通过',\n  }, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  address: '郑州',\n  Tel: '13964507501',\n  state: '审核未通过',\n  }, {\n  key: '6',\n  name: '陳柏萱',\n  age: 27,\n  address: '沈阳',\n  Tel: '13262836283',\n  state: '审核通过',\n  }];\n<Table columns={columns} dataSource={data} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种尺寸**\n\n通过设置size设置为large,middle,small来控制表格的大小默认为large"},{type:"code",content:"import {Table, Divider} from 'dbox-ui';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '审核状态',\n  dataIndex: 'state',\n  key: 'state',\n}, {\n  title: '操作',\n  dataIndex: 'action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\nconst data = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  address: '北京',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  age: 24,\n  address: '南京',\n  Tel: '13262717838',\n  state: '审核通过',\n  }, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  address: '上海',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  address: '合肥',\n  Tel: '13947766628',\n  state: '审核通过',\n  }, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  address: '郑州',\n  Tel: '13964507501',\n  state: '审核未通过',\n  }, {\n  key: '6',\n  name: '陳柏萱',\n  age: 27,\n  address: '沈阳',\n  Tel: '13262836283',\n  state: '审核通过',\n  }];\n<div>\n<Table columns={columns} dataSource={data} />\n<Table columns={columns} dataSource={data} size='middle' />\n<Table columns={columns} dataSource={data} size='small' />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **边框表格**\n\n通过设置bordered来设置是否展示表格边框"},{type:"code",content:"import {Table, Divider} from 'dbox-ui';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '审核状态',\n  dataIndex: 'state',\n  key: 'state',\n}, {\n  title: '操作',\n  dataIndex: 'action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\nconst data = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  address: '北京',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  age: 24,\n  address: '南京',\n  Tel: '13262717838',\n  state: '审核通过',\n  }, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  address: '上海',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  address: '合肥',\n  Tel: '13947766628',\n  state: '审核通过',\n  }, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  address: '郑州',\n  Tel: '13964507501',\n  state: '审核未通过',\n  }, {\n  key: '6',\n  name: '陳柏萱',\n  age: 27,\n  address: '沈阳',\n  Tel: '13262836283',\n  state: '审核通过',\n  }];\n<Table columns={columns} dataSource={data} bordered />",settings:{},evalInContext:l},{type:"markdown",content:"#### **带选择框**\n\n通过选择框来搜集选中单元格的信息"},{type:"code",content:"import {Table, Divider, Button, Checkbox} from 'dbox-ui';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '审核状态',\n  dataIndex: 'state',\n  key: 'state',\n}, {\n  title: '操作',\n  dataIndex: 'action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\nconst data = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  address: '北京',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  age: 24,\n  address: '南京',\n  Tel: '13262717838',\n  state: '审核通过',\n  }, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  address: '上海',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  address: '合肥',\n  Tel: '13947766628',\n  state: '审核通过',\n  }, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  address: '郑州',\n  Tel: '13964507501',\n  state: '审核未通过',\n  }, {\n  key: '6',\n  name: '陳柏萱',\n  age: 27,\n  address: '沈阳',\n  Tel: '13262836283',\n  state: '审核通过',\n  }];\n\nclass TableView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\t    selectedRowKeys: [],\n\t    loading: false,\n    }\n    this.start = this.start.bind(this)\n    this.onSelectChange = this.onSelectChange.bind(this)\n  };\n  start () {\n    this.setState({ loading: true });\n    // ajax request after empty completing\n    setTimeout(() => {\n      this.setState({\n        selectedRowKeys: [],\n        loading: false,\n      });\n    }, 1000);\n  }\n  onSelectChange (selectedRowKeys) {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n  render() {\n    const { loading, selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n  return (\n\t<div>\n\t\t<div style={{ marginBottom: 12 }}>\n\t\t  <Button type='primary' onClick={this.start} disabled={!hasSelected} loading={loading}>批量操作</Button>\n\t\t  <span style={{ marginLeft: 16 }}>\n\t\t    {hasSelected ? `已选择 ${selectedRowKeys.length} 条数据` : ''}\n\t\t  </span>\n\t\t</div>\n\t\t<Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n\t</div>\n  )\n}\n}\n<TableView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **异步数据**\n\n通过ajax实时动态获取后台数据"},{type:"code",content:"import {Table} from 'dbox-ui';\nimport reqwest from 'reqwest'\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  render: name => `${name.first} ${name.last}`,\n  width: '20%',\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  width: '20%',\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    data: [],\n    pagination: {},\n    loading: false,\n  };\n    this.handleTableChange = this.handleTableChange.bind(this)\n    this.fetch = this.fetch.bind(this)\n}\n  componentDidMount() {\n    this.fetch();\n  }\n\n  handleTableChange (pagination, filters, sorter) {\n    const pager = { ...this.state.pagination };\n    pager.current = pagination.current;\n    this.setState({\n      pagination: pager,\n    });\n    this.fetch({\n      results: pagination.pageSize,\n      page: pagination.current,\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      ...filters,\n    });\n  }\n\n  fetch (params = {}) {\n    this.setState({ loading: true });\n    reqwest({\n      url: 'https://randomuser.me/api',\n      method: 'get',\n      data: {\n        results: 10,\n        ...params,\n      },\n      type: 'json',\n    }).then((data) => {\n      const pagination = { ...this.state.pagination };\n      pagination.total = 200;\n      this.setState({\n        loading: false,\n        data: data.results,\n        pagination,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <Table\n        columns={columns}\n        rowKey={record => record.login.uuid}\n        dataSource={this.state.data}\n        pagination={this.state.pagination}\n        loading={this.state.loading}\n        onChange={this.handleTableChange}\n      />\n    );\n  }\n}\n<App />",settings:{},evalInContext:l},{type:"markdown",content:"#### **内嵌表格**\n\n对于复杂表格的嵌套"},{type:"code",content:"import {Table, Divider, Badge} from 'dbox-ui';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '审核状态',\n  dataIndex: 'state',\n  key: 'state',\n}, {\n  title: '操作',\n  dataIndex: 'action',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\nconst data = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  address: '北京',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  age: 24,\n  address: '南京',\n  Tel: '13262717838',\n  state: '审核通过',\n  }, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  address: '上海',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  address: '合肥',\n  Tel: '13947766628',\n  state: '审核通过',\n  }, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  address: '郑州',\n  Tel: '13964507501',\n  state: '审核未通过',\n  }, {\n  key: '6',\n  name: '陳柏萱',\n  age: 27,\n  address: '沈阳',\n  Tel: '13262836283',\n  state: '审核通过',\n  }];\n  const expandedRowRender = () => {\n  const columnsSubmenu = [\n    { title: '操作日期', dataIndex: 'date', key: 'date' },\n    { title: '操作人员', dataIndex: 'name', key: 'name' },\n    { title: '操作状态', key: 'state', render: () => <span style={{position: 'relative'}}><Badge dot status='success' text='成功' /></span> },\n    { title: '操作次数', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n    {\n      title: '异常状态',\n      dataIndex: 'operation',\n      key: 'operation',\n    },\n  ];\n\n  const datasubmenu = [];\n  for (let i = 0; i < 2; ++i) {\n    datasubmenu.push({\n      key: i,\n      date: '2018-8-8',\n      name: 'Admin',\n      operation: '正常',\n      upgradeNum: Math.ceil(Math.random() * 10),\n    });\n  }\n  return (\n    <Table\n      columns={columnsSubmenu}\n      dataSource={datasubmenu}\n      pagination={false}\n    />\n  );\n};\n<Table columns={columns} expandedRowRender={expandedRowRender} dataSource={data} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **行列合并**\n\n对于一些公共数据的合并"},{type:"code",content:"import {Table, Divider} from 'dbox-ui';\nconst renderContent = function (value, row, index) {\n  const obj = {\n    children: value,\n    props: {},\n  };\n  return obj;\n};\n\nconst columnsCol = [{\n  title: '姓名',\n  dataIndex: 'name',\n  render(text, row, index) {\n      return text;\n  },\n}, {\n  title: '年龄',\n  dataIndex: 'age',\n  sorter: (a, b) => a.age - b.age,\n  render: renderContent,\n}, {\n  title: '家庭电话',\n  dataIndex: 'tel',\n  render(value, row, index) {\n    const obj = {\n      children: value,\n      props: {},\n    };\n    if (index === 2) {\n      obj.props.rowSpan = 2;\n    }\n    if (index === 3) {\n      obj.props.rowSpan = 0;\n    }\n    if (index === 0) {\n      obj.props.colSpan = 2\n    }\n    return obj;\n  },\n}, {\n  title: '手机号',\n  dataIndex: 'phone',\n  render(value, row, index) {\n    const obj = {\n      children: value,\n      props: {},\n    };\n    if (index === 0) {\n      obj.props.colSpan = 0\n    }\n    return obj\n   },\n}, {\n  title: '住址',\n  dataIndex: 'address',\n  render: renderContent,\n}];\n\nconst dataCol = [{\n  key: '1',\n  name: '劉岳然',\n  age: 26,\n  tel: '0571-22098909',\n  phone: 13943250086,\n  address: '浦东新区唐镇',\n}, {\n  key: '2',\n  name: '李鷽釁',\n  tel: '0571-22098333',\n  phone: 13262717838,\n  age: 24,\n  address: '浦东新区唐镇',\n}, {\n  key: '3',\n  name: '彭柔群',\n  age: 22,\n  tel: '0575-22098909',\n  phone: 13950035537,\n  address: '浦东新区唐镇',\n}, {\n  key: '4',\n  name: '顏仁豪',\n  age: 28,\n  tel: '0575-22098909',\n  phone: 13947766628,\n  address: '浦东新区唐镇',\n}, {\n  key: '5',\n  name: '王郁弘',\n  age: 32,\n  tel: '0575-22098909',\n  phone: 13964507501,\n  address: '浦东新区唐镇',\n}];\n<Table columns={columnsCol} dataSource={dataCol} bordered />",settings:{},evalInContext:l},{type:"markdown",content:"#### **固定行列**\n\n对某些特殊列进行固定，方便操作"},{type:"code",content:"import {Table, Divider} from 'dbox-ui';\nconst columnsFixRow = [{\n  title: '姓名',\n  width: 100,\n  fixed: 'left',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: '性别',\n  width: 100,\n  dataIndex: 'sex',\n  key: 'sex'\n}, {\n  title: '年龄',\n  width: 100,\n  dataIndex: 'age',\n  key: 'age',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: '所在城市',\n  width: 150,\n  dataIndex: 'city',\n  key: 'city'\n}, {\n  title: '地址',\n  width: 300,\n  dataIndex: 'address',\n  key: 'address'\n}, {\n  title: '手机号',\n  width: 150,\n  dataIndex: 'Tel',\n  key: 'Tel'\n}, {\n  title: '学历',\n  width: 150,\n  dataIndex: 'study',\n  key: 'study'\n}, {\n  title: '职业',\n  width: 150,\n  dataIndex: 'work',\n  key: 'work'\n}, {\n  title: '政治面貌',\n  width: 150,\n  dataIndex: 'status',\n  key: 'status'\n}, {\n  title: '审核状态',\n  width: 150,\n  dataIndex: 'state',\n  key: 'state'\n}, {\n  title: '操作',\n  width: 110,\n  dataIndex: 'action',\n  fixed: 'right',\n  key: 'action',\n  render: (text, record) => (\n    <span>\n      <a href='javascript:;'>编辑</a>\n      <Divider type='vertical' />\n      <a href='javascript:;'>删除</a>\n    </span>\n  ),\n}];\n\nconst dataFixdRow = [{\n  key: '11',\n  name: '劉岳然',\n  age: 26,\n  city: '北京',\n  sex: '男',\n  status: '党员',\n  work: '教师',\n  address: '上海市浦东新区唐镇上丰路88号',\n  study: '本科',\n  Tel: '13943250086',\n  state: '审核未通过',\n}, {\n  key: '12',\n  name: '李鷽釁',\n  age: 24,\n  city: '南京',\n  sex: '女',\n  status: '群众',\n  work: 'IT',\n  address: '上海市浦东新区唐镇上丰路88号',\n  study: '本科',\n  Tel: '13262717838',\n  state: '审核通过',\n}, {\n  key: '13',\n  name: '彭柔群',\n  age: 22,\n  city: '上海',\n  sex: '女',\n  status: '党员',\n  work: '幼师',\n  address: '上海市浦东新区唐镇上丰路88号',\n  study: '专科',\n  Tel: '13950035537',\n  state: '审核未通过',\n}, {\n  key: '14',\n  name: '顏仁豪',\n  age: 28,\n  city: '合肥',\n  sex: '男',\n  address: '上海市浦东新区唐镇上丰路88号',\n  status: '群众',\n  work: '技工',\n  study: '专科',\n  Tel: '13947766628',\n  state: '审核通过',\n}, {\n  key: '15',\n  name: '王郁弘',\n  age: 32,\n  city: '郑州',\n  sex: '男',\n  address: '上海市浦东新区唐镇上丰路88号',\n  status: '党员',\n  work: '自由职业',\n  study: '博士',\n  Tel: '13964507501',\n  state: '审核未通过',\n}, {\n  key: '16',\n  name: '陳柏萱',\n  age: 27,\n  city: '沈阳',\n  sex: '女',\n  status: '党员',\n  address: '上海市浦东新区唐镇上丰路88号',\n  work: '医师',\n  study: '本科',\n  Tel: '13262836283',\n  state: '审核通过',\n}];\n<Table columns={columnsFixRow} dataSource={dataFixdRow} scroll={{ x: 1500, y: 200 }} />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可编辑表格**\n\n对表格内数据进行复杂操作"},{type:"code",content:"import {Table, Divider, Tooltip, Input, Form, Popconfirm, Select, InputNumber} from 'dbox-ui';\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  getInput () {\n    if (this.props.inputtype === 'number') {\n      return <InputNumber style={{ width: 70 }} />;\n    }\n    if (this.props.inputtype === 'city') {\n      return <Select showSearch style={{ width: 70 }} placeholder='请选择' >\n        <Option value='北京'>北京</Option>\n        <Option value='上海'>上海</Option>\n        <Option value='广州'>广州</Option>\n        <Option value='沈阳'>沈阳</Option>\n        <Option value='郑州'>郑州</Option>\n        <Option value='合肥'>合肥</Option>\n        <Option value='南京'>南京</Option>\n        <Option value='深圳'>深圳</Option>\n      </Select>;\n    }\n    if (this.props.inputtype === 'address') {\n      return <NumericInput value={this.props.value} onChange={this.onChangeValue} style={{ width: 200 }} />;\n    }\n    if (this.props.inputtype === 'name') {\n      return <NumericInput value={this.props.value} onChange={this.onChangeValue} style={{ width: 70 }} />;\n    }\n    if (this.props.inputtype === 'Tel') {\n      return <NumericInput value={this.props.value} onChange={this.onChangeValue} style={{ width: 130 }} />;\n    }\n    return <NumericInput value={this.props.value} onChange={this.onChangeValue} />;\n  };\n\n  render() {\n    const {\n      editing,\n      dataIndex,\n      title,\n      // inputtype,\n      record,\n      // index,\n      ...restProps\n    } = this.props;\n    return (\n      <EditableContext.Consumer>\n        {(form) => {\n          const { getFieldDecorator } = form;\n          return (\n            <td {...restProps}>\n              {editing ? (\n                <FormItem style={{ margin: 0 }}>\n                  {getFieldDecorator(dataIndex, {\n                    rules: [{\n                      required: true,\n                      message: `Please Input ${title}!`,\n                    }],\n                    initialValue: record[dataIndex],\n                  })(this.getInput())}\n                </FormItem>\n              ) : restProps.children}\n            </td>\n          );\n        }}\n      </EditableContext.Consumer>\n    );\n  }\n}\nclass TableView extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    flag: false,\n    value: '',\n    selectedRowKeys: [], // Check here to configure the default column\n    loading: false,\n    editingKey: '',\n    data: [{\n      key: '1',\n      name: '劉岳然',\n      age: 26,\n      city: '北京',\n      Tel: '13943250086',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }, {\n      key: '2',\n      name: '李鷽釁',\n      age: 24,\n      city: '南京',\n      Tel: '13262717838',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }, {\n      key: '3',\n      name: '彭柔群',\n      age: 22,\n      city: '上海',\n      Tel: '13950035537',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }, {\n      key: '4',\n      name: '顏仁豪',\n      age: 28,\n      city: '合肥',\n      Tel: '13947766628',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }, {\n      key: '5',\n      name: '王郁弘',\n      age: 32,\n      city: '郑州',\n      Tel: '13964507501',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }, {\n      key: '6',\n      name: '陳柏萱',\n      age: 27,\n      city: '沈阳',\n      Tel: '13262836283',\n      address: '上海市浦东新区唐镇上丰路88号',\n    }]\n  };\n  this.columnss = [{\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n    editable: true,\n    render: (text, record) => {\n      return !this.state.flag ? (<Tooltip placement='topLeft' title={text}><span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span></Tooltip>) : (<span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span>)\n      }\n  }, {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n    sorter: (a, b) => a.age - b.age,\n    editable: true,\n    render: (text, record) => {\n      return !this.state.flag ? (<Tooltip placement='topLeft' title={text}><span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span></Tooltip>) : (<span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span>)\n      }\n  }, {\n    title: '居住地',\n    dataIndex: 'city',\n    key: 'city',\n    editable: true,\n    render: (text, record) => {\n      return !this.state.flag ? (<Tooltip placement='topLeft' title={text}><span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span></Tooltip>) : (<span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span>)\n      }\n  }, {\n    title: '手机号',\n    dataIndex: 'Tel',\n    key: 'Tel',\n    editable: true,\n    render: (text, record) => {\n      return !this.state.flag ? (<Tooltip placement='topLeft' title={text}><span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span></Tooltip>) : (<span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span>)\n      }\n  }, {\n    title: '地址',\n    dataIndex: 'address',\n    key: 'address',\n    editable: true,\n    render: (text, record) => {\n      return !this.state.flag ? (<Tooltip placement='topLeft' title={text}><span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span></Tooltip>) : (<span onMouseLeave={this.onMouseLeave} onMouseEnter={this.onMouseEnter}>{text}</span>)\n      }\n  }, {\n    title: '操作',\n    dataIndex: 'action',\n    key: 'action',\n    render: (text, record) => {\n      const editable = this.isEditing(record);\n      return (\n        <div>\n          {editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    href='javascript:;'\n                    onClick={() => this.save(form, record.key)}\n                  >\n                    保存\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Divider type='vertical' />\n              <a\n                href='javascript:;'\n                onClick={() => this.cancel(record.key)}\n                  >\n                    取消\n              </a>\n            </span>\n          ) : (\n            <span>\n              <a href='javascript:;' onClick={() => this.edit(record.key)}>编辑</a>\n              <Divider type='vertical' />\n              <Popconfirm title='您确定要删除吗?' onConfirm={() => this.handleDelete(record.key)}>\n                <a href='javascript:;'>删除</a>\n              </Popconfirm>\n            </span>\n          )}\n        </div>\n      );\n    },\n  }];\n}\n  onMouseEnter (e) {\n    const parentWidth = e.target.parentNode.offsetWidth\n    const selfWdith = e.target.parentNode.lastElementChild.offsetWidth + 2\n    const parentPadding = e.target.parentNode.lastElementChild.offsetLeft\n    if (selfWdith < parentWidth - (parentPadding * 2)) {\n      this.setState({flag: true})\n    }\n  }\n  onChangeValue () {\n    this.setState({ value: this.props.value });\n  }\n  onMouseLeave () {\n    this.setState({flag: false})\n  }\n  start () {\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({\n        selectedRowKeys: [],\n        loading: false,\n      });\n    }, 1000);\n  }\n  handleDelete (key) {\n    const data = [...this.state.data];\n    this.setState({ data: data.filter(item => item.key !== key) });\n  }\n  onSelectChange (selectedRowKeys) {\n    this.setState({ selectedRowKeys });\n  }\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n  cancel () {\n    this.setState({ editingKey: '' });\n  };\n  isEditing (record) { return record.key === this.state.editingKey};\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.setState({ data: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ data: newData, editingKey: '' });\n      }\n    });\n  }\n  render () {\n    const { loading, selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n    // edit\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columnn = this.columnss.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputtype: (() => {\n            if (col.dataIndex === 'age') {\n              return 'number'\n            } else if (col.dataIndex === 'city') {\n              return 'city'\n            } else if (col.dataIndex === 'name') {\n              return 'name'\n            } else if (col.dataIndex === 'address') {\n              return 'address'\n            } else if (col.dataIndex === 'Tel') {\n              return 'Tel'\n            } else {\n              return 'text'\n            }\n          })(),\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n    return (\n        <Table components={components} bordered dataSource={this.state.data} columns={columnn} />\n     )\n  }\n}\n\nclass NumericInput extends React.Component {\n  onChange (e) {\n    const { value } = e.target;\n      this.props.onChange(value);\n  }\n  onBlur () {\n    const { value, onBlur, onChange } = this.props;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange({ value: value.slice(0, -1) });\n    }\n    if (onBlur) {\n      onBlur();\n    }\n  }\n\n\n  render() {\n    const { value } = this.props;    return (\n      <Tooltip\n        trigger={['focus']}\n        title={value}\n        placement='topLeft'\n      >\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder='Input here'\n        />\n      </Tooltip>\n    );\n  }\n}\n<TableView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Table**\n\n| 参数                     | 说明                                               | 类型                                       | 默认值                                                                          |\n| ---------------------- | ------------------------------------------------ | ---------------------------------------- | ---------------------------------------------------------------------------- |\n| rowSelection           | 列表项是否可选择，配置项                                     | Object                                   | null                                                                         |\n| pagination             | 分页器，配置项参考 pagination，设为 false 时不显示分页             | Object                                   |                                                                              |\n| size                   | 正常或迷你类型，`large` `middle` or `small`              | String                                   | `large`                                                                      |\n| dataSource             | 数据数组                                             | Array                                    |                                                                              |\n| columns                | 表格列的配置描述，具体项见下表                                  | Array                                    | -                                                                            |\n| rowKey                 | 表格行 key 的取值，可以是字符串或一个函数                          | String or Function(record, index):string | 'key'                                                                        |\n| rowClassName           | 表格行的类名                                           | Function(record, index):string           | -                                                                            |\n| expandedRowRender      | 额外的展开行                                           | Function                                 | -                                                                            |\n| defaultExpandedRowKeys | 默认展开的行                                           | Array                                    | -                                                                            |\n| expandedRowKeys        | 展开的行，控制属性                                        | Array                                    | -                                                                            |\n| onChange               | 分页、排序、筛选变化时触发                                    | Function(pagination, filters, sorter)    |                                                                              |\n| loading                | 页面是否加载中                                          | Boolean                                  | false                                                                        |\n| locale                 | 默认文案设置，目前包括排序、过滤、空数据文案                           | Object                                   | filterConfirm: '确定' <br> filterReset: '重置' <br> emptyText: '暂无数据' <br> [默认值] |\n| indentSize             | 展示树形数据时，每层缩进的宽度，以 px 为单位                         | Number                                   | 15                                                                           |\n| onRowClick             | 处理行点击事件                                          | Function(record, index)                  | -                                                                            |\n| useFixedHeader         | 是否固定表头                                           | Boolean                                  | false                                                                        |\n| bordered               | 是否展示外边框和列边框                                      | Boolean                                  | false                                                                        |\n| showHeader             | 是否显示表头                                           | Boolean                                  | true                                                                         |\n| footer                 | 表格底部自定义渲染函数                                      | Function(currentPageData)                |                                                                              |\n| title                  | 表格头部自定义渲染函数                                      | Function(currentPageData)                |                                                                              |\n| scroll                 | 横向或纵向支持滚动，也可用于指定滚动区域的宽高度：`{{ x: true, y: 300 }}` | Object                                   | -                                                                            |\n\n#### **Column**\n\n列描述数据对象，是 columns 中的一项。\n\n| 参数             | 说明                                                      | 类型                               | 默认值   |\n| -------------- | ------------------------------------------------------- | -------------------------------- | ----- |\n| title          | 列头显示文字                                                  | String or React.Element          | -     |\n| key            | React 需要的 key，建议设置                                      | String                           | -     |\n| dataIndex      | 列数据在数据项中对应的 key，支持 `a.b.c` 的嵌套写法                        | String                           | -     |\n| render         | 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return里面可以设置表格行/列合并   | Function(text, record, index) {} | -     |\n| filters        | 表头的筛选菜单项                                                | Array                            | -     |\n| onFilter       | 本地模式下，确定筛选的运行函数                                         | Function                         | -     |\n| filterMultiple | 是否多选                                                    | Boolean                          | true  |\n| filterDropdown | 可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互                         | React.Element                    | -     |\n| sorter         | 排序函数，本地排序使用一个函数，需要服务端排序可设为 true                         | Function or Boolean              | -     |\n| colSpan        | 表头列合并,设置为 0 时，不渲染                                       | Number                           |       |\n| width          | 列宽度                                                     | String or Number                 | -     |\n| className      | 列的 className                                            | String                           | -     |\n| fixed          | 列是否固定，可选 `true`(等效于 left) `'left'` `'right'`            | Boolean or String                | false |\n| filteredValue  | 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组                   | Array                            | -     |\n| sortOrder      | 排序的受控属性，外界可用此控制列的排序，可设置为 `'ascend'` `'descend'` `false` | Boolean or String                | -     |\n\n#### **rowSelection**\n\n选择功能的配置。\n\n| 参数               | 说明                              | 类型                                           | 默认值        |\n| ---------------- | ------------------------------- | -------------------------------------------- | ---------- |\n| type             | 多选/单选，`checkbox` or `radio`     | String                                       | `checkbox` |\n| selectedRowKeys  | 指定选中项的 key 数组，需要和 onChange 进行配合 | Array                                        | \\[]        |\n| onChange         | 选中项发生变化的时的回调                    | Function(selectedRowKeys, selectedRows)      | -          |\n| getCheckboxProps | 选择框的默认属性配置                      | Function(record)                             | -          |\n| onSelect         | 用户手动选择/取消选择某列的回调                | Function(record, selected, selectedRows)     | -          |\n| onSelectAll      | 用户手动选择/取消选择所有列的回调               | Function(selected, selectedRows, changeRows) | -          |\n\n## 注意\n\n按照 React 的[规范](http://facebook.github.io/react/docs/multiple-dbox-ui.html#dynamic-children)，所有的组件数组必须绑定 key。在 Table 中，`dataSource` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 `rowKey` 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。"},{type:"code",content:'// 比如你的数据主键是 uid\nreturn <Table rowKey="uid" />;\n// 或\nreturn <Table rowKey={record => record.uid} />;',settings:{},evalInContext:l},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Tabs",examples:t(1323)}},function(e,n,t){var a={"dbox-ui":t(18),"dbox-ui/tabs":t(120),react:t(1),"./index.jsx":t(120)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Tabs$0 = require('./index.jsx');\nconst Tabs = Tabs$0.default || Tabs$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\nDBox 依次提供了三级选项卡，分别用于不同的场景。\n\n-   卡片式的页签，提供可关闭的样式，常用于容器顶部。\n-   标准线条式页签，用于容器内部的主功能切换，这是最常用的 Tabs。\n-   RadioButton 可作为更次级的页签来使用。\n\n#### **基本用法和禁用**\n\n水平展示tab栏"},{type:"code",content:"import {Tabs} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nclass TabsView extends React.Component {\n  render() {\n    return(\n    <div>\n      <Tabs defaultActiveKey='5' onChange={this.callBack}>\n        <TabPane tab='选项一' key='5'>选项一</TabPane>\n        <TabPane disabled tab='选项二' key='4'>选项二</TabPane>\n        <TabPane tab='选项三' key='3'>选项三</TabPane>\n      </Tabs>\n    </div>\n    )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **有图标的标签**\n\n在tab栏内添加图标"},{type:"code",content:"import {Tabs, Icon} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nclass TabsView extends React.Component {\n  render() {\n    return(\n    \t<Tabs defaultActiveKey='7'>\n\t      <TabPane tab={<span><Icon type='bars' />选项一</span>} key='7'>\n\t      选项一\n\t      </TabPane>\n\t      <TabPane disabled tab={<span><Icon type='appstore-o' />选项二</span>} key='8'>\n\t      选项二\n\t      </TabPane>\n\t      <TabPane tab={<span><Icon type='detail' />选项三</span>} key='9'>\n\t      选项三\n\t      </TabPane>\n\t    </Tabs>\n    )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **tab页水平，垂直滑动**\n\n通过设置tabPosition为top和left来水平和垂直模式展示"},{type:"code",content:"import {Tabs, Radio} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.RadioGroup;\nconst RadioButton = Radio.RadioButton;\nclass TabsView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'top',\n    }\n    this.handleModeChange = this.handleModeChange.bind(this)\n  };\n  handleModeChange (e) {\n    const mode = e.target.value;\n    this.setState({ mode });\n  };\n  render() {\n  return (\n    <div>\n      <RadioGroup onChange={this.handleModeChange} value={this.state.mode} style={{marginBottom: 8}}>\n          <RadioButton value='top'>水平</RadioButton>\n          <RadioButton value='left'>垂直</RadioButton>\n        </RadioGroup>\n        <Tabs defaultActiveKey='11' tabPosition={this.state.mode} style={{height: 247}}>\n          <TabPane tab='选项一' key='11'>选项一</TabPane>\n          <TabPane tab='选项二' key='12'>选项二</TabPane>\n          <TabPane tab='选项三' key='13'>选项三</TabPane>\n          <TabPane tab='选项四' key='14'>选项四</TabPane>\n          <TabPane tab='选项五' key='15'>选项五</TabPane>\n          <TabPane tab='选项六' key='16'>选项六</TabPane>\n          <TabPane tab='选项七' key='17'>选项七</TabPane>\n          <TabPane tab='选项八' key='18'>选项八</TabPane>\n          <TabPane tab='选项九' key='19'>选项九</TabPane>\n          <TabPane tab='选项十' key='20'>选项十</TabPane>\n          <TabPane tab='选项十一' key='21'>选项十一</TabPane>\n          <TabPane tab='选项十二' key='22'>选项十二</TabPane>\n          <TabPane tab='选项十三' key='23'>选项十三</TabPane>\n          <TabPane tab='选项十四' key='24'>选项十四</TabPane>\n        </Tabs>\n    </div>\n  )\n}\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **卡片式标签页容器**\n\n设置type='card'来仿卡片式的tabs"},{type:"code",content:"import {Tabs} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nclass TabsView extends React.Component {\n  render() {\n    return(\n    \t<Tabs type='card'>\n\t      <TabPane tab='分页一' key='25'>\n\t        <p>分页内容一</p>\n\t        <p>分页内容一</p>\n\t        <p>分页内容一</p>\n\t      </TabPane>\n\t      <TabPane tab='分页二' key='26'>\n\t        <p>分页内容二</p>\n\t        <p>分页内容二</p>\n\t        <p>分页内容二</p>\n\t      </TabPane>\n\t      <TabPane tab='分页三' key='27'>\n\t        <p>分页内容三</p>\n\t        <p>分页内容三</p>\n\t        <p>分页内容三</p>\n\t      </TabPane>\n\t    </Tabs>\n    )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **新增和关闭**\n\n动态添加和删除tabs分页"},{type:"code",content:"import {Tabs} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nconst panes = [\n  { title: '分页一', content: '分页内容一', key: '1' },\n  { title: '分页二', content: '分页内容二', key: '2' }\n];\nclass TabsView extends React.Component {\n\tconstructor(props) {\n\tthis.newTabIndex = 0;\n    super(props);\n    this.state = {\n      panes,\n      activeKey: panes[0].key\n    }\n    this.onChange = this.onChange.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.add = this.add.bind(this);\n    this.remove = this.remove.bind(this)\n  };\n  add () {\n    const panes = this.state.panes;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: '新增分页', content: '新增分页内容', key: activeKey });\n    this.setState({panes, activeKey});\n  };\n  remove (targetKey) {\n    let activeKey = this.state.activeKey;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (lastIndex >= 0 && activeKey === targetKey) {\n      activeKey = panes[lastIndex].key;\n    }\n    this.setState({panes, activeKey});\n  };\n  onChange (activeKey) {\n    this.setState({activeKey});\n  };\n  onEdit (targetKey, action) {\n    this[action](targetKey);\n  };\n  render() {\n    return(\n    \t<Tabs onChange={this.onChange} activeKey={this.state.activeKey} type='editable-card' onEdit={this.onEdit}>\n          {this.state.panes.map(pane => <TabPane closable={pane.key === '1' ? false : 'true'} tab={pane.title} key={pane.key}>{pane.content}</TabPane>)}\n        </Tabs>\n     )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **卡片式容器**\n\n对容器设置背景使其更像是一个容器"},{type:"code",content:"import {Tabs} from 'dbox-ui';\nconst TabPane = Tabs.TabPane;\nclass TabsView extends React.Component {\n  render() {\n    return(\n    \t<Tabs type='cardTabs'>\n          <TabPane tab='分页一' key='28'>\n            <p>分页内容一</p>\n            <p>分页内容一</p>\n            <p>分页内容一</p>\n          </TabPane>\n          <TabPane tab='分页二' key='29'>\n            <p>分页内容二</p>\n            <p>分页内容二</p>\n            <p>分页内容二</p>\n          </TabPane>\n          <TabPane tab='分页三' key='30'>\n            <p>分页内容三</p>\n            <p>分页内容三</p>\n            <p>分页内容三</p></TabPane>\n        </Tabs>\n    )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **吸顶效果**\n\n页面滑动到一定距离固定tabs栏"},{type:"code",content:"import {Tabs} from 'dbox-ui';\nimport {TabPane, ReactDOM} from 'dbox-ui/tabs';\nclass TabsView extends React.Component {\n\tcomponentDidMount () {\n    const element = ReactDOM.findDOMNode(this.refs.box_table);\n    const currentHeight = element.offsetTop - element.offsetHeight;\n    const left = `${element.offsetLeft-21}px`;\n    window.addEventListener('scroll', this.onScroll = () => {\n      if (window.scrollY >= currentHeight && window.scrollY < element.offsetTop) {\n        element.style.position = 'fixed';\n        element.style.top = '0';\n        element.style.left = left;\n        element.style.width = '100%';\n        element.style.padding = '20px 20px';\n        element.style.backgroundColor = '#fff';\n      } else if (window.scrollY < currentHeight || window.scrollY > currentHeight + element.offsetHeight) {\n        element.style.position = 'relative';\n        element.style.padding = '0';\n        element.style.left = '0';\n      }\n    });\n  }\n  componentWillUnmount () {\n      window.removeEventListener('scroll', this.onScroll);\n  }\n  render() {\n    return(\n    \t<Tabs ref='box_table'>\n          <TabPane tab='分页一' key='31'>分页内容一</TabPane>\n          <TabPane tab='分页二' key='32'>分页内容二</TabPane>\n          <TabPane tab='分页三' key='33'>分页内容三</TabPane>\n        </Tabs>\n    )\n  }\n}\n<TabsView />",settings:{},evalInContext:l},{type:"markdown",content:'#### **Tabs**\n\n| 参数                 | 说明                                                     | 类型                                        | 默认值                          |\n| ------------------ | ------------------------------------------------------ | ----------------------------------------- | ---------------------------- |\n| activeKey          | 当前激活 tab 面板的 key                                       | string                                    | 无                            |\n| animated           | 是否使用动画切换 Tabs，在 `tabPosition=top/bottom` 时有效           | boolean/{inkBar:boolean, tabPane:boolean} | true, 当 type="card" 时为 false |\n| defaultActiveKey   | 初始化选中面板的 key，如果没有设置 activeKey                          | string                                    | 第一个面板                        |\n| hideAdd            | 是否隐藏加号图标，在 `type="editable-card"` 时有效                  | boolean                                   | false                        |\n| size               | 大小，提供 `default` 和 `small` 两种大小，仅当 `type="line"` 时生效。   | string                                    | `default`                    |\n| tabBarExtraContent | tab bar 上额外的元素                                         | React.ReactNode                           | 无                            |\n| tabBarStyle        | tab bar 的样式对象                                          | object                                    | -                            |\n| tabPosition        | 页签位置，可选值有 `top` `right` `bottom` `left`                | string                                    | `top`                        |\n| type               | 页签的基本样式，可选 `line`、`card`、`editable-card`、`cardTabs` 类型 | string                                    | `line`                       |\n| onChange           | 切换面板的回调                                                | Function                                  | 无                            |\n| onEdit             | 新增和删除页签的回调，在 `type="editable-card"` 时有效                | (targetKey, action): void                 | 无                            |\n| onNextClick        | next 按钮被点击的回调                                          | Function                                  | 无                            |\n| onPrevClick        | prev 按钮被点击的回调                                          | Function                                  | 无                            |\n| onTabClick         | tab 被点击的回调                                             | Function                                  | 无                            |\n\n#### **Tabs.TabPane**\n\n| 参数          | 说明                               | 类型                 | 默认值    |\n| ----------- | -------------------------------- | ------------------ | ------ |\n| forceRender | 被隐藏时是否渲染 DOM 结构                  | boolean            | false  |\n| key         | 对应 activeKey                     | string             | 无      |\n| closable    | 在type="editable-card"模式下使用阻止卡片关闭 | boolean            | `true` |\n| tab         | 选项卡头显示文字                         | string / ReactNode | 无      |'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Timeline",examples:t(1325)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(188)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Timeline$0 = require('./index.jsx');\nconst Timeline = Timeline$0.default || Timeline$0;",o);e.exports=[{type:"markdown",content:"按照时间顺序进行排列信息时使用。\n\n#### **基本用法**\n\n基本的时间轴"},{type:"code",content:"import { Timeline } from 'dbox-ui';\n<Timeline>\n  <Timeline.Item>需求评审 2018-11-21</Timeline.Item>\n  <Timeline.Item>开发 2018-12-01</Timeline.Item>\n  <Timeline.Item>测试 2018-12-15</Timeline.Item>\n  <Timeline.Item>上线 2018-12-21</Timeline.Item>\n</Timeline>",settings:{},evalInContext:l},{type:"markdown",content:"#### **进行中及排序**\n\n可通过设置 `pending` 属性展示幽灵节点。\n可通过设置`reverse` 属性用于控制节点排序，为 `false` 时按正序排列，为 `true` 时按倒序排列。"},{type:"code",content:"import { Timeline,Button } from 'dbox-ui';\nclass TimelineExample extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      reverse: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ reverse: !this.state.reverse });\n  }\n\n  render(){\n    return(\n      <div>\n        <Timeline pending='上线...' reverse={this.state.reverse} >\n          <Timeline.Item>需求评审 2018-11-21</Timeline.Item>\n          <Timeline.Item>开发 2018-12-01</Timeline.Item>\n          <Timeline.Item>测试 2018-12-15</Timeline.Item>\n        </Timeline>\n        <Button type='primary' style={{ marginTop: 16 }} onClick={this.handleClick}>转换顺序</Button>\n      </div>\n    )\n  }\n}\n<TimelineExample />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义图标**\n\n可通过设置 `dot` 属性为`Icon`时添加自定义图标。"},{type:"code",content:"import { Timeline,Icon } from 'dbox-ui';\n<Timeline>\n  <Timeline.Item>需求评审 2018-11-21</Timeline.Item>\n  <Timeline.Item>开发 2018-12-01</Timeline.Item>\n  <Timeline.Item dot={<Icon type='loading' style={{ fontSize: '16px', color: 'red' }} />} >测试 2018-12-15</Timeline.Item>\n  <Timeline.Item>上线 2018-12-21</Timeline.Item>\n</Timeline>",settings:{},evalInContext:l},{type:"markdown",content:'#### **Timeline**\n\n时间轴。\n\n| 参数         | 说明                   | 类型                       | 默认值                       |\n| ---------- | -------------------- | ------------------------ | ------------------------- |\n| pending    | 指定最后一个幽灵节点是否存在或内容    | boolean/string/ReactNode | false                     |\n| pendingDot | 当最后一个幽灵节点存在时，指定其时间图点 | string/ReactNode         | `<Icon type="loading" />` |\n| reverse    | 节点排序                 | boolean                  | false                     |\n\n#### **Timeline.Item**\n\n时间轴的每一个节点。\n\n| 参数    | 说明                                | 类型            | 默认值  |\n| ----- | --------------------------------- | ------------- | ---- |\n| color | 指定圆圈颜色 `blue, red, green`，或自定义的色值 | string        | blue |\n| dot   | 自定义时间轴点                           | React.Element | -    |'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Tag",examples:t(1327)}},function(e,n,t){var a={"dbox-ui":t(18),"dbox-ui/tag":t(124),react:t(1),"./index.jsx":t(124)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Tag$0 = require('./index.jsx');\nconst Tag = Tag$0.default || Tag$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n用于标记事物的属性和维度，同时亦可进行分类。\n\n#### **基本用法**\n\n通过添加href属性区别链接状态"},{type:"code",content:"import {Tag} from 'dbox-ui';\n<div>\n\t<Tag>标签</Tag>\n  <Tag href='https://www.baidu.com'>链接</Tag>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **多彩标签**\n\n通过添加颜色进行分类"},{type:"code",content:"import {Tag} from 'dbox-ui';\n<div>\n\t<Tag color='peru'>peru</Tag>\n    <Tag color='coral'>coral</Tag>\n    <Tag color='hotpink'>hotpink</Tag>\n    <Tag color='orange'>orang</Tag>\n    <Tag color='limegreen'>limegreen</Tag>\n    <Tag checked color='deepskyblue'>deepskyblue</Tag>\n    <Tag color='mediumslateblue'>mediumslateblue</Tag>\n    <Tag color='turquoise'>turquoise</Tag>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **可移除标签**\n\n标签可移除，支持动态删除"},{type:"code",content:"import {Tag} from 'dbox-ui';\n<Tag closable>可移除标签</Tag>",settings:{},evalInContext:l},{type:"markdown",content:"#### **热门标签**\n\n通过添加hot属性进行分类"},{type:"code",content:"import {Tag} from 'dbox-ui';\n<div>\n\t<span>热门话题:</span>\n\t<Tag hot>电影</Tag>\n\t<Tag hot checked>书籍</Tag>\n\t<Tag hot>音乐</Tag>\n\t<Tag hot>运动</Tag>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **动态添加和删除标签**\n\n动态添加和删除标签"},{type:"code",content:"import {Tag} from 'dbox-ui';\nimport {TagGroup} from 'dbox-ui/tag';\n<TagGroup></TagGroup>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Tag**\n\n| 参数         | 说明                     | 类型                | 默认值       |\n| ---------- | ---------------------- | ----------------- | --------- |\n| afterClose | 关闭动画完成后的回调             | `() => void`      | -         |\n| closable   | 标签是否可以关闭               | boolean           | false     |\n| color      | 标签色                    | string            | -         |\n| target     | 链接跳转方式必须和href同时设置      | string可参照a链接的跳转方式 | - 默认本页面跳转 |\n| href       | 链接跳转路径                 | string            | -         |\n| checked    | 设置标签的选中状态仅适用于hot和基本状态下 | boolean           | false     |\n\n#### **tagGroup**\n\n| 参数       | 说明            | 类型     | 默认值                            |\n| -------- | ------------- | ------ | ------------------------------ |\n| tags     | 热门话题的默认文本     | array  | `['Movies', 'Books', 'Music']` |\n| id       | 默认不可移除的标签的下标值 | number | `0`                            |\n| text     | 动态增加标签的文本内容   | string | `New Tag`                      |\n| iconType | 动态增加标签的Icon   | string | `plus`                         |\n\n#### **Tag 方法**\n\n| 参数       | 说明         | 类型                | 默认值 |\n| -------- | ---------- | ----------------- | --- |\n| onClose  | 关闭时的回调     | (e) => void       | -   |\n| ---      | ---        | ---               | --- |\n| onChange | 点击标签时触发的回调 | (checked) => void | -   |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Alert",examples:t(1329)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(241)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Alert$0 = require('./index.jsx');\nconst Alert = Alert$0.default || Alert$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n-   当需要向用户显示警告的信息时。\n-   非浮层的静态展现形式，始终展现，不会自动消失，用户可以选择点击关闭。\n\n#### **基本用法**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n<Alert\n  message='成功提示'\n  type='success' />",settings:{},evalInContext:l},{type:"markdown",content:"#### **可关闭的警告提示**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\nonClose = (e) => {\n  console.log(e, 'I was closed.');\n};\n<div>\n  <Alert\n    message='警告文本警告文本警告文本警告文本警告文本警告文本警告文本警告文本警告文本警告文本警告文本警告文本'\n    type='warning'\n    closable\n    onClose={onClose} /><br />\n  <Alert\n    message='错误文本'\n    description='错误文本错误文本错误文本错误文本错误文本错误文本错误文本错误文本错误文本错误文本错误文本错误文本'\n    type='error'\n    closable\n    onClose={onClose} />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **带有图标的警告提示**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n<div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='成功' type='success' showIcon />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='信息提示' type='info' showIcon />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='警告' type='warning' showIcon />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='错误' type='error' showIcon />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='成功'\n      description='关于成功的文案写作的详细描述和建议.'\n      type='success'\n      showIcon/>\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='信息提示'\n      description='关于文案写作的额外描述和信息.'\n      type='info'\n      showIcon/>\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='警告'\n      description='这是一个关于文案写作的警告通知.'\n      type='warning'\n      showIcon/>\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='错误'\n      description='这是一个关于文案写作的错误通知.'\n      type='error'\n      showIcon/>\n  </div>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **四种样式**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n <div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='成功文本' type='success' />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='提示文本' type='info' />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert message='警告文本' type='warning' />\n  </div>\n  <div>\n    <Alert message='错误文本' type='error' />\n  </div>\n </div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **含有辅助性文字的文本**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n <div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='成功文本'\n      description='成功描述成功描述成功描述成功描述成功描述'\n      type='success'\n    />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='提示文本'\n      description='提示描述提示描述提示描述提示描述提示描述'\n      type='info'\n    />\n  </div>\n  <div style={{ marginBottom: 15 }}>\n    <Alert\n      message='警告文本'\n      description='警告描述警告描述警告描述警告描述警告描述'\n      type='warning'\n    />\n  </div>\n  <div>\n    <Alert\n      message='错误文本'\n      description='错误描述错误描述错误描述错误描述错误描述'\n      type='error'\n    />\n  </div>\n </div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义关闭**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n<Alert message='Info Text' type='info' closeText='Close Now' />",settings:{},evalInContext:l},{type:"markdown",content:"#### **平滑的卸载**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\nclass AlertView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: true,\n    }\n    this.handleClose = this.handleClose.bind(this);\n  }\n  handleClose() {\n    console.log(1)\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n      {\n        this.state.visible ? (\n          <Alert\n            message='Alert Message Text'\n            type='success'\n            closable\n            afterClose={this.handleClose}\n          />\n        ) : null\n      }\n      <p>placeholder text here</p>\n      </div>\n    )\n  }\n}\n<AlertView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **顶部公告**"},{type:"code",content:"import { Alert } from 'dbox-ui';\n\n<div>\n <Alert message='警告文本' banner />\n <Alert message='非常长的警告文本非常长的警告文本' banner closable />\n <Alert showIcon={false} message='没有图标的警告文本' banner />\n <Alert type='error' message='错误文本' banner />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 参数          | 说明                                      | 类型                      | 默认值                       |     |\n| ----------- | --------------------------------------- | ----------------------- | ------------------------- | --- |\n| afterClose  | 关闭动画结束后触发的回调函数                          | () => void              | -                         |     |\n| banner      | 是否用作顶部公告                                | boolean                 | false                     |     |\n| closable    | 默认不显示关闭按钮                               | boolean                 | 无                         |     |\n| closeText   | 自定义关闭按钮                                 | string                  | ReactNode                 | 无   |\n| description | 警告提示的辅助性文字介绍                            | string                  | ReactNode                 | 无   |\n| icon        | 自定义图标，showIcon 为 true 时有效               | ReactNode               | -                         |     |\n| message     | 警告提示内容                                  | string                  | ReactNode                 | 无   |\n| showIcon    | 是否显示辅助图标                                | boolean                 | false，banner 模式下默认值为 true |     |\n| type        | 指定警告提示的样式，有四种选择 success、info、warn、error | string                  | info，banner 模式下默认值为 warn  |     |\n| onClose     | 关闭时触发的回调函数                              | (e: MouseEvent) => void | 无                         |     |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Drawer",examples:t(1331)}},function(e,n,t){var a={"dbox-ui":t(18),"dbox-ui/grid":t(44),react:t(1),"./index.jsx":t(385)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Drawer$0 = require('./index.jsx');\nconst Drawer = Drawer$0.default || Drawer$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n在需要时呼出一个附加的面板来控制父窗体内容；\n在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。\n\n#### **基本用法**\n\n较简单的用法"},{type:"code",content:"import {Button, Drawer} from 'dbox-ui';\nclass DrawerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false\n    }\n    this.showDrawer = this.showDrawer.bind(this)\n    this.onClose = this.onClose.bind(this)\n  };\n  showDrawer () {\n    this.setState({\n      visible: true,\n    });\n  }\n  onClose () {\n    this.setState({\n      visible: false,\n    });\n  };\n  render() {\n  return (\n    <div>\n      <Button type='primary' onClick={this.showDrawer}>\n        打开基础抽屉\n      </Button>\n      <Drawer\n        title='基础抽屉'\n        placement='right'\n        closable={false}\n        onClose={this.onClose}\n        visible={this.state.visible}\n      >\n        <p>一些基本内容...</p>\n        <p style={{marginTop: 24, marginBottom: 24}}>一些基本内容...</p>\n        <p>一些基本内容...</p>\n      </Drawer>\n    </div>\n  )\n}\n}\n<DrawerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **四种方位**\n\n控制placement为top,bottom,left,right来确定抽屉展示位置"},{type:"code",content:"import {Button, Radio, Drawer} from 'dbox-ui';\nconst RadioGroup = Radio.RadioGroup;\nclass DrawerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false,\n      placement: 'right'\n    }\n    this.showDrawer = this.showDrawer.bind(this)\n    this.onClose = this.onClose.bind(this)\n    this.onChange = this.onChange.bind(this)\n\n  };\n  onChange (e) {\n    this.setState({\n      placement: e.target.value,\n    });\n  }\n  showDrawer () {\n    this.setState({\n      visible: true,\n    });\n  }\n  onClose () {\n    this.setState({\n      visible: false,\n    });\n  };\n  render() {\n  return (\n    <div>\n      <RadioGroup\n        style={{ marginRight: 8 }}\n        defaultValue={this.state.placement}\n        onChange={this.onChange}\n    >\n        <Radio value='top'>上</Radio>\n        <Radio value='bottom'>下</Radio>\n        <Radio value='left'>左</Radio>\n        <Radio value='right'>右</Radio>\n      </RadioGroup>\n      <br />\n      <Button type='primary' onClick={this.showDrawer}>\n      打开方位抽屉\n      </Button>\n      <Drawer\n        title='基础抽屉'\n        placement={this.state.placement}\n        closable={false}\n        onClose={this.onClose}\n        visible={this.state.visible}\n    >\n        <p>一些基本内容...</p>\n        <p style={{marginTop: 24, marginBottom: 24}}>一些基本内容...</p>\n        <p>一些基本内容...</p>\n      </Drawer>\n    </div>  )\n}\n}\n<DrawerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **信息预览**\n\n展示一些基本信息"},{type:"code",content:"import {Button, Row, Drawer, Col, Divider} from 'dbox-ui';\nconst pStyle = {\n  fontSize: 16,\n  color: 'rgba(0,0,0,0.85)',\n  lineHeight: '24px',\n  display: 'block',\n  marginBottom: 16,\n};\nconst DescriptionItem = ({ title, content }) => (\n  <div\n    style={{\n      fontSize: 14,\n      lineHeight: '22px',\n      marginBottom: 7,\n      color: 'rgba(0,0,0,0.65)',\n    }}\n  >\n    <p\n      style={{\n        marginRight: 8,\n        display: 'inline-block',\n        color: 'rgba(0,0,0,0.85)',\n      }}\n    >\n      {title}:\n    </p>\n    {content}\n  </div>\n);\nclass DrawerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false\n    }\n    this.showDrawer = this.showDrawer.bind(this)\n    this.onClose = this.onClose.bind(this)\n  };\n  showDrawer () {\n    this.setState({\n      visible: true,\n    });\n  }\n  onClose () {\n    this.setState({\n      visible: false,\n    });\n  };\n  render() {\n  return (\n        <div>\n          <Button type='primary' href='javascript:;' onClick={this.showDrawer}>查看个人信息</Button>\n          <Drawer\n            width={620}\n            placement='right'\n            closable={false}\n            onClose={this.onClose}\n            visible={this.state.visible}\n        >\n            <p style={{ ...pStyle, marginBottom: 24 }}>个人信息</p>\n            <p style={pStyle}>私人信息</p>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='名称' content='小明' />{' '}\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='账户' content='Idoll@example.com' />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='城市' content='上海' />\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='国家' content='中国' />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='生日' content='2018-8-8' />\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='个人博客' content={<a target='_black' href='http://www.Dbox.com'>http://www.Dbox.com</a>} />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <DescriptionItem\n                  title='座右铭'\n                  content='不忘初心,方得始终'\n              />\n              </Col>\n            </Row>\n            <Divider />\n            <p style={pStyle}>公司信息</p>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='职业' content='程序猿' />\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='特长' content='码代码' />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='部门' content='开发部' />\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='业务组' content='贷款组' />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <DescriptionItem\n                  title='技能'\n                  content='C / C + +, Javascript, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.'\n              />\n              </Col>\n            </Row>\n            <Divider />\n            <p style={pStyle}>🔗地址</p>\n            <Row>\n              <Col span={12}>\n                <DescriptionItem title='📮邮箱' content='Dbox@example.com' />\n              </Col>\n              <Col span={12}>\n                <DescriptionItem title='📱手机' content='+86 188 8888 6666' />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <DescriptionItem\n                  title='Github'\n                  content={(\n                    <a href='http://github.com'>Github</a>\n                )}\n              />\n              </Col>\n            </Row>\n          </Drawer>\n        </div>\n    )\n}\n}\n<DrawerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **多层抽屉**\n\n可在父抽屉中创建子抽屉"},{type:"code",content:"import {Button, Drawer} from 'dbox-ui';\nclass DrawerView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false,\n  \t placement: 'right',\n  \t childrenDrawer: false,\n    }\n    this.showDrawer = this.showDrawer.bind(this)\n    this.onClose = this.onClose.bind(this)\n    this.showChildrenDrawer = this.showChildrenDrawer.bind(this)\n    this.onChildrenDrawerClose = this.onChildrenDrawerClose.bind(this)\n  };\n  showDrawer () {\n    this.setState({\n      visible: true,\n    });\n  }\n  onClose () {\n    this.setState({\n      visible: false,\n    });\n  }\n  showChildrenDrawer () {\n    this.setState({\n      childrenDrawer: true,\n    });\n  };\n  onChildrenDrawerClose () {\n    this.setState({\n      childrenDrawer: false,\n    });\n  };\n  render() {\n  return (\n    <div>\n      <Button type='primary' onClick={this.showDrawer}>\n      打开多层抽屉\n      </Button>\n      <Drawer\n        title='多层级抽屉'\n        width={520}\n        closable={false}\n        onClose={this.onClose}\n        visible={this.state.visible}\n    >\n        <Button type='primary' onClick={this.showChildrenDrawer}>\n        打开次级抽屉\n        </Button>\n        <Drawer\n          title='次级抽屉'\n          width={320}\n          closable={false}\n          onClose={this.onChildrenDrawerClose}\n          visible={this.state.childrenDrawer}\n      >\n        这是次级抽屉\n        </Drawer>\n        <div\n          style={{\n          position: 'absolute',\n          bottom: 0,\n          width: '100%',\n          borderTop: '1px solid #e8e8e8',\n          padding: '10px 16px',\n          textAlign: 'right',\n          left: 0,\n          background: '#fff',\n          borderRadius: '0 0 4px 4px',\n        }}\n      >\n          <Button\n            style={{\n            marginRight: 8,\n          }}\n            onClick={this.onClose}\n        >\n          取消\n          </Button>\n          <Button onClick={this.onClose} type='primary'>\n          提交\n          </Button>\n        </div>\n      </Drawer>\n    </div>\n     )\n  }\n}\n<DrawerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **表单抽屉**\n\n在新抽屉中提交一些表单数据"},{type:"code",content:"import {Button, Divider, DatePicker, Form, Input, Select} from 'dbox-ui';\nimport {Row, Col} from 'dbox-ui/grid';\nconst { RangePicker } = DatePicker;\nconst FormItem = Form.Item;\nconst {Option} = Select;\nclass DrawerDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false\n    }\n    this.showDrawer = this.showDrawer.bind(this)\n    this.onClose = this.onClose.bind(this)\n  };\n  showDrawer () {\n    this.setState({\n      visible: true,\n    });\n  }\n  onClose () {\n    this.setState({\n      visible: false,\n    });\n  }\n  render() {\n  const { getFieldDecorator } = this.props.form;\n  return (\n         <div>\n          <Button type='primary' onClick={this.showDrawer}>\n          创建表单抽屉\n          </Button>\n          <Drawer\n            title='创建'\n            width={720}\n            placement='right'\n            onClose={this.onClose}\n            visible={this.state.visible}\n            style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n            <Form layout='vertical' hideRequiredMark>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <FormItem label='姓名'>\n                    {getFieldDecorator('name', {\n                    rules: [{ required: true, message: '请输入用户名' }],\n                  })(<Input placeholder='请输入用户名' />)}\n                  </FormItem>\n                </Col>\n                <Col span={12}>\n                  <FormItem label='URL'>\n                    {getFieldDecorator('url', {\n                    rules: [{ required: true, message: '请输入 url' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      addonBefore='http://'\n                      addonAfter='.com'\n                      placeholder='请输入 url'\n                    />\n                  )}\n                  </FormItem>\n                </Col>\n              </Row>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <FormItem label='选择'>\n                    {getFieldDecorator('owner', {\n                    rules: [{ required: true, message: '请选择' }],\n                  })(\n                    <Select initialValue='liu' placeholder='请选择'>\n                      <Option value='liu'>刘岳然</Option>\n                      <Option value='li'>李欣桐</Option>\n                    </Select>\n                  )}\n                  </FormItem>\n                </Col>\n                <Col span={12}>\n                  <FormItem label='类型'>\n                    {getFieldDecorator('type', {\n                    rules: [{ required: true, message: '请选择类型' }],\n                  })(\n                    <Select initialValue='private' placeholder='请选择类型'>\n                      <Option value='private'>私密</Option>\n                      <Option value='public'>公开</Option>\n                    </Select>\n                  )}\n                  </FormItem>\n                </Col>\n              </Row>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <FormItem label='批复'>\n                    {getFieldDecorator('approver', {\n                    rules: [{ required: true, message: '请选择批复人' }],\n                  })(\n                    <Select initialValue='jack' placeholder='请选择批复人'>\n                      <Option value='jack'>杰瑞</Option>\n                      <Option value='tom'>汤姆</Option>\n                    </Select>\n                  )}\n                  </FormItem>\n                </Col>\n                <Col span={12}>\n                  <FormItem label='时间'>\n                    {getFieldDecorator('dateTime', {\n                    rules: [{ required: true, message: '请选择日期时间' }],\n                  })(\n                    <RangePicker\n                      style={{width: '100%'}}\n                      showTime={{ format: 'HH:mm' }}\n                      format='YYYY-MM-DD HH:mm'\n                      placeholder={['开始时间', '结束时间']}\n                    />\n                  )}\n                  </FormItem>\n                </Col>\n              </Row>\n            </Form>\n            <div\n              style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n              <Button\n                style={{\n                marginRight: 8,\n              }}\n                onClick={this.onClose}\n            >\n              取消\n              </Button>\n              <Button onClick={this.onClose} type='primary'>提交</Button>\n            </div>\n          </Drawer>\n        </div>\n      )\n  }\n}\nconst DrawerView = Form.create()(DrawerDemo);\n<DrawerView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Drawer**\n\n| 参数             | 说明                                       | 类型                                              | 默认值     |\n| -------------- | ---------------------------------------- | ----------------------------------------------- | ------- |\n| closable       | 是否显示右上角的关闭按钮                             | boolean                                         | true    |\n| destroyOnClose | 关闭时销毁 Drawer 里的子元素                       | boolean                                         | false   |\n| getContainer   | 指定 Drawer 挂载的 HTML 节点                    | HTMLElement / `() => HTMLElement` / selectors \b | 'body'  |\n| maskClosable   | 点击蒙层是否允许关闭                               | boolean                                         | true    |\n| mask           | 是否展示遮罩                                   | Boolean                                         | true    |\n| maskStyle      | 遮罩样式                                     | object                                          | {}      |\n| style          | 可用于设置 Drawer 的样式，调整浮层位置等                 | object                                          | -       |\n| title          | 标题                                       | string / ReactNode                              | -       |\n| visible        | Drawer 是否可见                              | boolean                                         | -       |\n| width          | 宽度                                       | string / number                                 | 256     |\n| height         | 高度, 在 `placement` 为 `top` 或 `bottom` 时使用 | string / number                                 | 256     |\n| className      | 对话框外层容器的类名                               | string                                          | -       |\n| zIndex         | 设置 Drawer 的 `z-index`                    | Number                                          | 1000    |\n| placement      | 抽屉的方向                                    | 'top'  / 'right' / 'bottom' / 'left'            | 'right' |\n| onClose        | 点击遮罩层或右上角叉或取消按钮的回调                       | function(e)                                     | 无       |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Modal",examples:t(1333)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(403)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Modal$0 = require('./index.jsx');\nconst Modal = Modal$0.default || Modal$0;",o);e.exports=[{type:"markdown",content:"#### **概述**\n\n需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 `Modal` 在当前页面正中打开一个浮层，承载相应的操作\n\n#### **普通弹出框(可用于展示和提交)**\n\n通常用于展示和提交数据"},{type:"code",content:"import {Modal, Button} from 'dbox-ui';\nclass ModalView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    visible: false,\n   }\n    this.showModal = this.showModal.bind(this);\n    this.handleOk = this.handleOk.bind(this);\n    this.handleCancel = this.handleCancel.bind(this)\n  };\n  showModal () {\n    this.setState({\n      visible: true\n    });\n  };\n  handleOk (e) {\n    this.setState({\n      visible: false\n    });\n  }\n  handleCancel (e) {\n    this.setState({\n      visible: false\n    });\n  };\n  render() {\n  return (\n    <div>\n      <Button type='primary' onClick={this.showModal}>显示对话框</Button>\n      <Modal title='我是标题' visible={this.state.visible}\n        onOk={this.handleOk} onCancel={this.handleCancel}>\n        <p>这里是一句话</p>\n        <p>或者一段文字</p>\n        <p>或者表格</p>\n        <p>或者其他嵌套组件</p>\n        <p>…………</p>\n        <p>最后一行</p>\n      </Modal>\n    </div>\n  )\n}\n}\n<ModalView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **异步关闭弹出框**\n\n在浮层内提交数据不影响当前页面的操作"},{type:"code",content:"import {Modal, Button} from 'dbox-ui';\nclass ModalView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    asyncvisible: false,\n    ModalText: '对话框的内容',\n   }\n    this.asyncshowModal = this.asyncshowModal.bind(this);\n    this.asynchandleOk = this.asynchandleOk.bind(this);\n    this.asynchandleCancel = this.asynchandleCancel.bind(this)\n  };\n  // 异步关闭弹出框\n  asyncshowModal () {\n    this.setState({\n      asyncvisible: true\n    });\n  }\n  asynchandleOk (e) {\n    this.setState({\n      ModalText: '选择确认后对话框将在 2 秒后关闭',\n      confirmLoading: true\n    });\n    setTimeout(() => {\n      this.setState({\n        asyncvisible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  }\n  asynchandleCancel (e) {\n    console.log('点击了取消');\n    this.setState({\n      asyncvisible: false\n    });\n  }\n  render() {\n  return (\n    <div>\n      <Button type='primary' onClick={this.asyncshowModal}>显示对话框</Button>\n      <Modal confirmLoading={this.state.confirmLoading} title='我是标题' visible={this.state.asyncvisible}\n        onOk={this.asynchandleOk} onCancel={this.asynchandleCancel}>\n        <p>{this.state.ModalText}</p>\n      </Modal>\n    </div>\n  )\n}\n}\n<ModalView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **信息提示**\n\n通过设置info，success，error来设置信息提示的类型"},{type:"code",content:"import {Modal, Button} from 'dbox-ui';\nclass ModalView extends React.Component {\n  constructor(props) {\n    super(props)\n  };\n  info () {\n    Modal.info({\n      title: '这是一条通知信息',\n      content: '一些附加信息一些附加信息一些附加信息',\n      onOk: function() {},\n    });\n  }\n\n  success () {\n    Modal.success({\n      title: '这是一条通知信息',\n      content: '一些附加信息一些附加信息一些附加信息'\n    });\n  }\n\n  error () {\n    Modal.error({\n      title: '这是一条通知信息',\n      content: '一些附加信息一些附加信息一些附加信息'\n    });\n  }\n  render() {\n  return (\n    <div>\n      <Button onClick={this.info}>信息提示</Button>\n      <Button style={{marginLeft: 20, marginRight: 20}} onClick={this.success}>成功提示</Button>\n      <Button onClick={this.error}>失败提示</Button>\n    </div>\n  )\n}\n}\n<ModalView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **确认对话框**\n\n通常用来确认操作"},{type:"code",content:"import {Modal, Button} from 'dbox-ui';\nclass ModalView extends React.Component {\n  constructor(props) {\n    super(props)\n  };\n  showConfirm () {\n    Modal.confirm({\n      iconType: 'close-circle',\n      title: '我是一个确认对话模态框',\n      content: <div><p>这里是描述文字…</p><p>这里是描述文字…</p></div>,\n      onOk: function() {\n        console.log('确定');\n      },\n      onCancel: function() {}\n    });\n  }\n  render() {\n  return (\n    <Button onClick={this.showConfirm}>确认对话框</Button>\n  )\n}\n}\n<ModalView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **Modal**\n\n| 参数             | 说明                 | 类型               | 默认值    |\n| -------------- | ------------------ | ---------------- | ------ |\n| visible        | 对话框是否可见            | Boolean          | 无      |\n| confirmLoading | 确定按钮 loading       | Boolean          | 无      |\n| title          | 标题                 | React.Element    | 无      |\n| closable       | 是否显示右上角的关闭按钮       | Boolean          | true   |\n| onOk           | 点击确定回调             | function         | 无      |\n| onCancel       | 点击遮罩层或右上角叉或取消按钮的回调 | function(e)      | 无      |\n| width          | 宽度                 | String or Number | 560    |\n| footer         | 底部内容               | React.Element    | 确定取消按钮 |\n| okText         | 确认按钮文字             | String           | 确定     |\n| cancelText     | 取消按钮文字             | String           | 取消     |\n| maskClosable   | 点击蒙层是否允许关闭         | Boolean          | true   |\n| style          | 可用于设置浮层的样式，调整浮层位置等 | Object           | -      |\n| wrapClassName  | 对话框外层容器的类名         | String           | -      |\n\n#### **Modal.xxx()**\n\n包括：\n\n-   `Modal.info`\n-   `Modal.success`\n-   `Modal.error`\n-   `Modal.confirm`\n\n以上均为一个函数，参数为 object，具体属性如下：\n\n| 参数         | 说明                                        | 类型                      | 默认值             |\n| ---------- | ----------------------------------------- | ----------------------- | --------------- |\n| title      | 标题                                        | React.Element or String | 无               |\n| content    | 内容                                        | React.Element or String | 无               |\n| onOk       | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function                | 无               |\n| onCancel   | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭   | function                | 无               |\n| width      | 宽度                                        | String or Number        | 408             |\n| iconType   | 图标 Icon 类型                                | String                  | question-circle |\n| okText     | 确认按钮文字                                    | String                  | 确定              |\n| cancelText | 取消按钮文字                                    | String                  | 取消              |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Message",examples:t(1335)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(401)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Message$0 = require('./index.jsx');\nconst Message = Message$0.default || Message$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n-   可提供成功、警告和错误等反馈信息,让用户知晓当前信息的状态。\n-   顶部居中显示并自动消失的方式，是一种不打断用户操作的轻量级提示方式,给与用户良好的视觉体验。\n\n#### **基本类型信息展示**"},{type:"code",content:"import { Switch, Message, Button } from 'dbox-ui';\n  let normal = false;\n  onChange = () => {\n    normal = !normal\n  }\n  success = () => {\n    Message.success('这是成功信息提示', 30, () => console.log(1111), normal);\n  };\n  error = () => {\n    Message.error('这是错误信息提示', normal);\n  }\n  warn = () => {\n    Message.warn('这是警告信息提示', 3, normal);\n  };\n  info = () => {\n    Message.info('这是基本的信息提示', 3, () => console.log('关闭回调'), normal);\n  };\n  <div>\n    <h4>可切换Message以背景色展示</h4>\n    <Switch defaultChecked onChange={onChange} /><br /><br />\n    <Button style={{ marginRight: 10 }} onClick={success}>成功</Button>\n    <Button type='danger' style={{ marginRight: 10 }} onClick={error}>失败</Button>\n    <Button onClick={warn} style={{ marginRight: 10 }}>警告</Button>\n    <Button onClick={info}>信息</Button>\n  </div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **修改延时**"},{type:"code",content:"import { Switch, Message, Button } from 'dbox-ui';\n\nlet normal = false;\nonChange = () => {\n  normal = !normal\n}\nDelayInfo = () => {\n  Message.info('这是基本的信息提示，并且在10s之后会自动关闭', 10, normal);\n};\n<div>\n  <h4>可切换Message以背景色展示</h4>\n  <Switch defaultChecked onChange={onChange} /><br /><br />\n  <Button onClick={DelayInfo}>10s后关闭</Button>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **加载中**"},{type:"code",content:"import { Switch, Message, Button } from 'dbox-ui';\n\nLoadingSuccess = () => {\n  const hide = Message.loading('活动加载中..', 10);\n    setTimeout(hide, 250000);\n  };\n<Button onClick={LoadingSuccess}>加载中</Button>",settings:{},evalInContext:l},{type:"markdown",content:"#### **Promise接口**"},{type:"code",content:"import { Switch, Message, Button, Icon } from 'dbox-ui';\n\nlet normal = false;\nonChange = () => {\n  normal = !normal\n}\nconst PromiseSuccess = () => {\n  Message.loading('活动加载中..', 2.5)\n  Message.open({\n    content: 'open触发了',\n    normal: normal,\n    icon: <Icon type='check-circle' />,\n  })\n    .then(() => Message.success('加载结束', 2.5))\n    .then(() => Message.info('加载中的加载结束', 2.5));\n    };\n  <div>\n    <Button onClick={PromiseSuccess}>Promise</Button>\n  </div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n组件提供了静态方法，使用参数和方式如下\n\n-   Message.success(content, [duration], onClose, true)\n-   Message.error(content, [duration], onClose, true)\n-   Message.info(content, [duration], onClose, true)\n-   Message.warning(content, [duration], onClose, true)\n-   Message.warn(content, [duration], onClose, true)\n-   Message.loading(content, [duration], onClose)(不支持normal背景色展示)\n\n| 参数       | 说明                    | 类型       | 默认值       |     |\n| -------- | --------------------- | -------- | --------- | --- |\n| content  | 提示内容                  | string   | ReactNode | -   |\n| duration | 自动关闭的延时,单位秒。设为0时不自动关闭 | number   | 3         |     |\n| onClose  | 关闭时触发的回调函数            | Function | -         |     |\n| normal   | 是否采用无背景色的信息提示         | boolean  | false     |     |\n\n#### **API**\n\n组件同时提供promise接口\n\n-   Message[level]\\(content, [duration]).then(afterClose)\n-   Message[level]\\(content, [duration], onClose).then(afterClose)\n    其中Message[level]是组件已经提供的静态方法。then接口返回值是Promise。\n-   Message.open(config)\n\n| 参数       | 说明                    | 类型        | 默认值       |     |\n| -------- | --------------------- | --------- | --------- | --- |\n| content  | 提示内容                  | string    | ReactNode | -   |\n| duration | 自动关闭的延时,单位秒。设为0时不自动关闭 | number    | 3         |     |\n| onClose  | 关闭时触发的回调函数            | Function  | -         |     |\n| icon     | 自定义图标                 | ReactNode | -         |     |\n\n#### **全局方法**\n\n还提供了全局配置和全局销毁方法：\n\n-   Message.config(options)\n-   Message.destroy()\n\n#### **message.config**\n\nMessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3\n})\n\n| 参数           | 说明                      | 类型                | 默认值                 |\n| ------------ | ----------------------- | ----------------- | ------------------- |\n| getContainer | 配置渲染节点的输出位置             | () => HTMLElement | () => document.body |\n| duration     | 默认自动关闭延时                | number            | 3                   |\n| maxCount     | 最大显示数，超过限制时，最早的消息会被自动关闭 | number            | -                   |\n| top          | 消息距离顶部的位置               | number            | 24                  |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={description:"",displayName:"Progress",methods:[],props:[{type:{name:"enum",value:[{value:"'default'",computed:!1},{value:"'small'",computed:!1}]},required:!1,description:"进度条的大小",tags:{},name:"default"},{type:{name:"func"},required:!1,description:"自定义内容的模版函数",tags:{},name:"format"},{type:{name:"number"},required:!1,description:"百分比展示",defaultValue:{value:"0",computed:!1},tags:{},name:"percent"},{defaultValue:{value:"'idoll-progress'",computed:!1},required:!1,description:"",tags:{},name:"prefixCls"},{type:{name:"bool"},required:!1,description:"是否展示进度信息",defaultValue:{value:"true",computed:!1},tags:{},name:"showInfo"},{defaultValue:{value:"'default'",computed:!1},required:!1,description:"",tags:{},name:"size"},{type:{name:"enum",value:[{value:"'normal'",computed:!1},{value:"'exception'",computed:!1},{value:"'active'",computed:!1},{value:"'success'",computed:!1}]},required:!1,description:"状态，可选：normal、success、exception、active",tags:{},name:"status"},{type:{name:"enum",value:[{value:"'round'",computed:!1},{value:"'square'",computed:!1}]},required:!1,description:"内容的模版函数",tags:{},name:"strokeLinecap"},{type:{name:"number"},required:!1,description:"圆形进度条的宽度，单位是进度条画布宽度的百分比",tags:{},name:"strokeWidth"},{defaultValue:{value:"'#f5f5f5'",computed:!1},required:!1,description:"",tags:{},name:"trailColor"},{type:{name:"enum",value:[{value:"'line'",computed:!1},{value:"'circle'",computed:!1}]},required:!1,description:"类型 可选：line circle",defaultValue:{value:"'line'",computed:!1},tags:{},name:"type"},{type:{name:"number"},required:!1,description:"圆形进度条画布宽度，单位 px",tags:{},name:"width"}],doclets:{},examples:t(1337)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./progress.jsx":t(406)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Progress$0 = require('./progress.jsx');\nconst Progress = Progress$0.default || Progress$0;",o);e.exports=[{type:"markdown",content:"在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n-   当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过2秒时；\n-   当需要显示一个操作完成的百分比时。\n\n#### **线条型进度条**"},{type:"code",content:"import { Progress } from 'dbox-ui';\n\nclass ProgressView  extends React.Component {\n  render() {\n    return (\n      <div style={{ width: '700px' }}>\n        <Progress type='line' />\n        <Progress type='line' percent={50} status='active' />\n        <Progress type='line' percent={70} status='exception' />\n        <Progress type='line' percent={100} />\n        <Progress type='line' percent={30} showInfo={false} />\n      </div>\n    )\n  }\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **迷你线条进度条**"},{type:"code",content:"import { Progress } from 'dbox-ui';\n\nclass ProgressView extends React.Component {\n  render() {\n    return (\n      <div style={{ width: '600px' }}>\n        <Progress size='small' type='line' />\n        <Progress size='small' type='line' percent={50} status='active' />\n        <Progress size='small' type='line' percent={70} status='exception' />\n        <Progress size='small' type='line' percent={100} />\n        <Progress size='small' type='line' percent={30} showInfo={false} />\n      </div>\n    )\n  }\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **圆形进度条**"},{type:"code",content:"import { Progress } from 'dbox-ui';\n\nconst ProgressView = () => {\n  return (\n    <div >\n      <Progress type='circle' percent={50} />\n      <Progress type='circle' percent={70} status='exception' />\n      <Progress type='circle' percent={100} />\n    </div>\n  )\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **迷你圆形进度条**"},{type:"code",content:"import { Progress } from 'dbox-ui';\n\nconst ProgressView = () => {\n  return (\n    <div >\n      <Progress type='circle' width={80} percent={50} />\n      <Progress type='circle' width={80} percent={70} status='exception' />\n      <Progress type='circle' width={80} percent={100} />\n    </div>\n  )\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **动态进度条**"},{type:"code",content:"import { Progress, Button } from 'dbox-ui';\n\nconst ButtonGroup = Button.Group;\nclass ProgressView  extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percent: 0\n    }\n    this.increase = this.increase.bind(this);\n    this.decrease = this.decrease.bind(this);\n  }\n  increase() {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({percent});\n  }\n  decrease() {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({percent});\n  }\n  render() {\n    return (\n      <div style={{ width: '800px' }}>\n        <Progress type='line' percent={this.state.percent} />\n        <Progress type='circle' percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decrease} icon='remove' />\n          <Button onClick={this.increase} icon='plus' />\n        </ButtonGroup>\n      </div>\n    )\n  }\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义圆形进度条**"},{type:"code",content:"import { Progress } from 'dbox-ui';\n\nconst ProgressView = () => {\n  return (\n      <div>\n        <Progress type='circle' percent={50} format={(percent) => `${percent}Day`} />\n        <Progress type='circle' percent={100} format={() => 'Finish'} />\n      </div>\n    )\n}\n<ProgressView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 属性                          | 说明                                   | 类型                | 默认值                        |\n| --------------------------- | ------------------------------------ | ----------------- | -------------------------- |\n| format                      | 内容的模板函数                              | function(percent) | `percent => percent + '%'` |\n| percent                     | 百分比                                  | number            | 0                          |\n| showInfo                    | 是否显示进度数值或状态图标                        | boolean           | true                       |\n| status                      | 状态，可选：`success` `exception` `active` | string            | -                          |\n| strokeWidth `(type=line)`   | 进度条线的宽度，单位 px                        | number            | 8                          |\n| strokeWidth `(type=circle)` | 圆形进度条线的宽度，单位是进度条画布宽度的百分比             | number            | 8                          |\n| type                        | 类型，可选 `line` `circle`                | string            | line                       |\n| width `(type=circle)`       | 圆形进度条画布宽度，单位 px                      | number            | 132                        |\n\n<style>.idoll-progress{margin:0 10px 10px 0}</style>"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Popconfirm",examples:t(1339)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(404)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Popconfirm$0 = require('./index.jsx');\nconst Popconfirm = Popconfirm$0.default || Popconfirm$0;",o);e.exports=[{type:"markdown",content:"用户操作需要进一步确认，会在操作元素附近弹出浮层提示。\n\n#### **基本用法**\n\n最简单用法"},{type:"code",content:"import { Popconfirm } from 'dbox-ui';\nclass PopconfirmDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            visible: false,\n        }\n        this.confirm = this.confirm.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n\n    confirm(){\n        this.setState({ visible: false });\n        Message.success('删除成功');\n    }\n    cancel(){\n        this.setState({ visible: false });\n    }\n    render() {\n        return (\n            <div id='popconfirm' style={{marginLeft: '100px'}}>\n                <Popconfirm title='确定删除当前信息?' onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <a href='#'>删除</a>\n                </Popconfirm>\n            </div>\n        )\n    }\n}\n\n<PopconfirmDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **12个方向**\n\n弹出框位置有十二个方向。可通过设置 `placement` 属性控制。"},{type:"code",content:"import { Popconfirm,Button } from 'dbox-ui';\nconst buttonWidth = '70px';\nconst text = '确定要删除吗';\nclass PopconfirmDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n             visible: false,\n        }\n        this.confirm = this.confirm.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n\n    confirm(){\n        this.setState({ visible: false });\n        Message.success('删除成功');\n    }\n    cancel(){\n        this.setState({ visible: false });\n        console.log('click cancel');\n    }\n    render() {\n        return (\n        <div>\n            <div style={{ marginLeft: buttonWidth, whiteSpace: 'nowrap' }}>\n            <Popconfirm placement='topLeft' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>TL</Button>\n            </Popconfirm>\n            <Popconfirm placement='top' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button style={{ marginLeft: '10px', marginRight: '10px' }}>Top</Button>\n            </Popconfirm>\n            <Popconfirm placement='topRight' title={text} onConfirm={this.confirm} onCancel={this.cancel}  okText='确认删除' cancelText='取消'>\n                <Button>TR</Button>\n            </Popconfirm>\n            </div>\n            <div style={{ width: buttonWidth, float: 'left' }}>\n            <Popconfirm placement='leftTop' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>LT</Button>\n            </Popconfirm>\n            <Popconfirm placement='left' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Left</Button>\n            </Popconfirm>\n            <Popconfirm placement='leftBottom' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>LB</Button>\n            </Popconfirm>\n            </div>\n            <div style={{ width: buttonWidth, marginLeft: (70 * 4) + 24 }}>\n            <Popconfirm placement='rightTop' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>RT</Button>\n            </Popconfirm>\n            <Popconfirm placement='right' title={text} onConfirm={this.confirm} onCancel={this.cancel}  okText='确认删除' cancelText='取消'>\n                <Button style={{ marginTop: '10px', marginBottom: '10px' }}>Right</Button>\n            </Popconfirm>\n            <Popconfirm placement='rightBottom' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>RB</Button>\n            </Popconfirm>\n            </div>\n            <div style={{ marginLeft: buttonWidth, clear: 'both', whiteSpace: 'nowrap' }}>\n            <Popconfirm placement='bottomLeft' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>BL</Button>\n            </Popconfirm>\n            <Popconfirm placement='bottom' title={text} onConfirm={this.confirm} onCancel={this.cancel}  okText='确认删除' cancelText='取消'>\n                <Button style={{ marginLeft: '10px', marginRight: '10px' }}>Bottom</Button>\n            </Popconfirm>\n            <Popconfirm placement='bottomRight' title={text} onConfirm={this.confirm} onCancel={this.cancel} okText='确认删除' cancelText='取消'>\n                <Button>BR</Button>\n            </Popconfirm>\n            </div>\n        </div>\n        )\n    }\n}\n<PopconfirmDemo />",settings:{},evalInContext:l},{type:"markdown",content:"#### **条件触发**\n\n可以判断是否需要弹出。"},{type:"code",content:"import { Popconfirm,Switch } from 'dbox-ui';\nclass PopconfirmDemo extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n             visible: false,\n        }\n        this.confirm = this.confirm.bind(this);\n        this.handleVisibleChange = this.handleVisibleChange.bind(this);\n        this.changeCondition = this.changeCondition.bind(this);\n    }\n\n    confirm(){\n        this.setState({ visible: false });\n        Message.success('删除成功');\n    }\n\n    changeCondition(value){\n        this.setState({ condition: value });\n    }\n\n    handleVisibleChange(visible) {\n        if (!visible) {\n            this.setState({ visible });\n            return;\n        }\n\n        if (this.state.condition) {\n            this.confirm(); // next step\n        } else {\n            this.setState({ visible }); // 显示popconfirm\n        }\n   }\n\n    render(){\n        return (\n            <div>\n        <Popconfirm\n          title='确定要删除吗？'\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange}\n          onConfirm={this.confirm}\n          onCancel={this.cancel}\n          okText='确认删除'\n          cancelText='取消'\n        >\n          <a href='#'>删除任务</a>\n        </Popconfirm>\n        <br />\n        <br />\n        是否直接删除：<Switch defaultChecked onChange={this.changeCondition} />\n        </div>\n        )\n    }\n}\n<PopconfirmDemo />",settings:{},evalInContext:l},{type:"markdown",content:'#### **Popconfirm**\n\n| 参数         | 说明              | 类型               | 默认值                                   |\n| ---------- | --------------- | ---------------- | ------------------------------------- |\n| cancelText | 取消按钮文字          | string           | 取消                                    |\n| okText     | 确认按钮文字          | string           | 确定                                    |\n| okType     | 确认按钮类型          | string           | primary                               |\n| title      | 确认框的描述          | string/ReactNode | 无                                     |\n| onCancel   | 点击取消的回调         | function(e)      | 无                                     |\n| onConfirm  | 点击确认的回调         | function(e)      | 无                                     |\n| icon       | 自定义弹出气泡 Icon 图标 | ReactNode        | &lt;Icon type="exclamation-circle" /> |\n\n更多属性请参考 [Tooltip]。\n\n## 注意\n\n请确保 `Popconfirm` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。'},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Spin",examples:t(1341)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(127)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Spin$0 = require('./index.jsx');\nconst Spin = Spin$0.default || Spin$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n页面局部处于等待异步数据或正在渲染过程时，可以适当的缓解用户因为等待页面渲染而带来的焦虑。\n\n#### **简单的加载中**"},{type:"code",content:"import { Spin } from 'dbox-ui';\n\n<div style={{ marginTop: 51, marginLeft: 100 }}><Spin /></div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **三种不同大小的加载中**"},{type:"code",content:"import { Spin } from 'dbox-ui';\n\n<div style={{ width: 300, display: 'flex', justifyContent: 'space-between', marginTop: 50 }}>\n  <Spin size='small' />\n  <Spin />\n  <Spin size='large' />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **放在容器中**"},{type:"code",content:"import { Spin } from 'dbox-ui';\n\nconst style = {\n  textAlign: 'center',\n  background: 'rgba(0, 0, 0, 0.05)',\n  borderRadius: 4,\n  marginBottom: 20,\n  paddingTop: 30,\n  paddingBottom: 30,\n  paddingLeft: 50,\n  paddingRight: 50,\n  marginTop: 20,\n  marginBotton: 20\n}\nclass SpinView extends React.Component {\n  render () {\n    return (\n      <div style={style}>\n        <Spin />\n      </div>\n    )\n  }\n}\n<SpinView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义描述文案**"},{type:"code",content:"import { Spin, Alert } from 'dbox-ui';\n\n<Spin tip='Loading...'>\n  <Alert\n    message='Alert信息标题'\n    description='关于此警报上下文的详细信息.'\n    type='info'\n  />\n</Spin>",settings:{},evalInContext:l},{type:"markdown",content:"#### **卡片加载中**"},{type:"code",content:"import { Alert, Spin, Switch } from 'dbox-ui';\n\nconst container = (\n  <Alert\n    message='Alert message title'\n    description='Further details about the context of this alert.'\n    type='info'\n  />\n);\nclass SpinViewLoading extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    loading: false\n  }\n  this.toggle = this.toggle.bind(this);\n}\n  toggle(value) {\n    this.setState({ loading: value });\n  }\n  render() {\n    return (\n      <div>\n        <Spin spinning={this.state.loading} delay={500}>{container}</Spin>\n        <div style={{ marginTop: 16 }}>\n          Loading state：<Switch onChange={this.toggle} />\n        </div>\n      </div>\n    )\n  }\n}\n<SpinViewLoading />",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义颜色**"},{type:"code",content:"const style = {\n  textAlign: 'center',\n  background: '#13B886',\n  borderRadius: 4,\n  marginBottom: 20,\n  paddingTop: 30,\n  paddingBottom: 30,\n  paddingLeft: 50,\n  paddingRight: 50,\n  marginTop: 20,\n  marginBotton: 20\n}\nclass SpinView extends React.Component {\n  render () {\n    return (\n      <div style={style}>\n        <Spin color={['#fff', 'rgba(255, 255, 255, 0.05)', 'rgba(255, 255, 255, 0.05)', 'rgba(255, 255, 255, 0.05)']} />\n      </div>\n    )\n  }\n}\n<SpinView />",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 参数               | 说明                                  | 类型          | 默认值       |\n| ---------------- | ----------------------------------- | ----------- | --------- |\n| delay            | 延迟显示加载效果的时间（防止闪烁）                   | number (毫秒) | -         |\n| size             | 组件大小，可选值为 `small` `default` `large` | string      | 'default' |\n| spinning         | 是否旋转                                | boolean     | true      |\n| tip              | 当作为包裹元素时，可以自定义描述文案                  | string      | -         |\n| wrapperClassName | 包装器的类属性                             | string      | -         |\n| color            | 在深色背景下，spin的四个边框颜色自定义               | Array       |           |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Anchor",examples:t(1343)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(242)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Anchor$0 = require('./index.jsx');\nconst Anchor = Anchor$0.default || Anchor$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n用于快速定位页面内容。\n\n#### **基本用法**"},{type:"code",content:"import { Anchor } from 'dbox-ui';\nconst { Link } = Anchor;\n\n<div>\n  <span className='demo-anchor'>\n    <Anchor>\n      <Link href='#components-anchor-demo-1' title='项目一' />\n      <Link href='#components-anchor-demo-2' title='项目二' />\n      <Link href='#components-anchor-demo-3' title='项目三' />\n      <Link href=\"#API\" title=\"API\">\n        <Link href='#components-anchor-demo-4' title='项目四' />\n        <Link href='#components-anchor-demo-5' title='项目五' />\n      </Link>\n    </Anchor>\n  </span>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n#### **Anchor Props**\n\n| 参数           | 说明                | 类型                               | 默认值          |\n| ------------ | ----------------- | -------------------------------- | ------------ |\n| bounds       | 锚点区域边界            | number                           | 5(px)        |\n| getContainer | 指定滚动的容器           | () => HTMLElement                | () => window |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发  | number                           | -            |\n| offsetTop    | 距离窗口顶部达到指定偏移量后触发  | number                           | -            |\n| onClick      | click 事件的 handler | Function(e: Event, link: Object) | -            |\n\n#### **Link Props**\n\n| 参数    | 说明   | 类型                 | 默认值 |\n| ----- | ---- | ------------------ | --- |\n| href  | 锚点链接 | string             | -   |\n| title | 文字内容 | string , ReactNode | -   |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"BackTop",examples:t(1345)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(247)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst BackTop$0 = require('./index.jsx');\nconst BackTop = BackTop$0.default || BackTop$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n-   当页面内容区域比较长时,给与触发让用户快速回到页面的顶部。\n\n#### **基本用法**"},{type:"code",content:"<div>\n  <BackTop />\n    向下滚动以查看右下方的灰色\n    <strong style={{ color: 'rgba(64, 64, 64, 0.6)' }}> gray </strong>\n    按钮。\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **自定义样式**"},{type:"code",content:"<div>\n<BackTop>\n  <div style={{height: 40,width: 40, marginTop: 40, textAlign: 'center',borderRadius: 4,fontSize: 20,backgroundColor: '#13B886',color: '#fff',lineHeight: '40px', fontSize: 14}}>返回</div>\n</BackTop>\n  向下滚动以查看右下方的文字按钮。\n\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **API**\n\n| 参数               | 说明                                | 类型       | 默认值          |\n| ---------------- | --------------------------------- | -------- | ------------ |\n| target           | 设置需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | Function | () => window |\n| visibilityHeight | 滚动高度达到此参数值才出现 BackTop             | number   | 400          |\n| onClick          | 点击按钮的回调函数                         | Function | -            |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]},function(e,n,t){e.exports={methods:[],doclets:{},displayName:"Divider",examples:t(1347)}},function(e,n,t){var a={"dbox-ui":t(18),react:t(1),"./index.jsx":t(383)},o=t(16).default.bind(null,a),l=t(17).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || React$0;\nconst Divider$0 = require('./index.jsx');\nconst Divider = Divider$0.default || Divider$0;",o);e.exports=[{type:"markdown",content:"#### **何时使用**\n\n-   对文本段落进行分割。\n-   对行内文字或者链接进行分割。\n\n#### **水平分割线**"},{type:"code",content:"<div>\n  <p>默认为水平分割线(实线)</p>\n  <Divider />\n  <p>默认为水平分割线(虚线)</p>\n  <Divider dashed />\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"#### **竖分割线**"},{type:"code",content:"<div>\n  测试\n  <Divider type='vertical' />\n  <a href='#'>链接</a>\n  <Divider type='vertical' />\n  <a href='#'>链接</a>\n</div>",settings:{},evalInContext:l},{type:"markdown",content:"## API\n\n| 参数        | 说明       | 类型                            | 默认值          |\n| --------- | -------- | ----------------------------- | ------------ |\n| dashed    | 是否虚线     | Boolean                       | false        |\n| type      | 水平还是垂直类型 | enum: `horizontal` `vertical` | `horizontal` |\n| className | 分割线样式类   | string                        | -            |\n| style     | 分割线样式对象  | object                        | -            |"},{type:"code",content:"import {PrevPage, BackTop} from 'dbox-ui';\n<div>\n  <BackTop visibilityHeight={20}/>\n  <PrevPage />\n</div>",settings:{noeditor:!0},evalInContext:l}]}],[[621,1,3,2]]]);